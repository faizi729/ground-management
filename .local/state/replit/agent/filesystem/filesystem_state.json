{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Sports Facility Booking System - Aryen Recreation Centre\n\n## Overview\nThis is a comprehensive sports facility booking system for Aryen Recreation Centre, a full-stack web application. It enables users to book various sports facilities online with a modern, responsive design. The system includes a capacity-aware booking system, integrated payment architecture, and a comprehensive reporting suite. The business vision is to provide a seamless and efficient online booking experience, enhance facility utilization, and offer robust administrative tools for recreation center management.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React.js with TypeScript\n- **Routing**: Wouter\n- **Styling**: Tailwind CSS with shadcn/ui component library\n- **State Management**: TanStack Query (React Query) for server state\n- **Build Tool**: Vite\n- **UI Components**: Radix UI primitives\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Authentication**: Replit Auth with OpenID Connect (OIDC)\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n\n### Authentication Strategy\nReplit's built-in authentication system is used, providing seamless OAuth integration, PostgreSQL-backed session management, user profile data from Replit accounts, and role-based access control (client, admin, manager).\n\n### Database Schema\nThe system uses a clean master table architecture:\n- **Sports Master**: Sport types with flexible booking types and admin controls.\n- **Grounds Master**: Physical facilities linked to sports with capacity configuration.\n- **Plans Master**: Pricing plans per ground with durationDays field for flexible booking periods.\n- **Time Slots Master**: Standard time slot definitions (6 AM - 10 PM hourly slots) used by all facilities.\n- **Bookings**: Master booking records with startDate/endDate fields for flexible date ranges.\n- **Booking Slots**: Individual date/time combinations supporting multiple slots per booking.\n- **Supporting Tables**: Users, Payments, Coupons, Notifications, Sessions.\n\n### Recent Changes (January 2025)\n- **Fixed Database Design**: Booking modes now determined by sport.bookingType instead of ground-level fields\n- **Removed Redundant Fields**: Eliminated per_person_booking and full_ground_booking from grounds_master\n- **Updated Booking Schema**: Changed from bookingDate/startTime/endTime to startDate/endDate for better date range support\n- **Simplified Booking Slots**: Removed redundant status field - slots inherit status from parent booking\n- **Enhanced Logic**: All facilities for the same sport inherit consistent booking capabilities\n- **Unified Booking Interface**: Replaced StepByStepBooking with BookingModal across all pages for consistent user experience\n- **Cleaned Payment Flow**: Removed admin-specific fields (discount, payment method) from booking screens - moved to Payment page\n- **Payment Interface Consistency (August 2025)**: Unified payment interface across all modules with proper partial payment support, custom amount input, and accurate balance calculations\n- **Payment Management Enhancement (August 2025)**: Complete payment management system with tabbed interface for pending vs all payments, proper financial summaries with descriptive captions (Outstanding Amount, Total Revenue, etc.), and filter options aligned with database values (pending, completed, partial, failed, refunded)\n- **Discount System Implementation (August 2025)**: Complete discount functionality with proper storage in both booking and payment tables, accurate pending amount calculations (Total - Paid - Discount), and correct payment status updates when discounts are applied. Fixed critical validation logic issue where payment records must be created before booking status updates to prevent status override.\n- **Receipt Generation Enhancement (August 2025)**: Fixed receipt preview/PDF generation to display booking-specific payment data with detailed breakdown including Total Booking Amount, Discount Applied, Amount After Discount, Total Paid (Before This Payment), Due Amount, Amount Paid This Transaction, and Remaining Balance\n- **Payment History Feature (August 2025)**: Complete payment history system with modal interface showing all payments for a specific booking, comprehensive booking summary with financial details, individual payment records with receipt preview/download options, and seamless integration with the payment page\n- **Admin Receipt Management (August 2025)**: Enhanced admin payment management with direct receipt viewing capabilities, added Actions column to All Payments table with View Receipt, Download PDF, and Payment History buttons for complete administrative oversight of payment documentation\n- **Payment History Calculation Fix (August 2025)**: Fixed payment history financial calculations to properly handle discounts with correct formulas - Total Amount (original before discount), Net Amount (after discount), and Balance Due (net amount - paid amount). Updated both backend API and frontend display logic for accurate financial reporting\n\n### Frontend Pages\n- **Landing Page**: Public homepage.\n- **Home Dashboard**: Authenticated user dashboard.\n- **Facilities**: Browse and filter facilities.\n- **Booking**: Facility booking interface.\n- **Profile**: User account management.\n- **Admin Panel**: Administrative interface for management and reporting.\n\n### API Structure\nAPIs support CRUD operations for master tables (Sports, Grounds, Plans, Bookings) and include supporting APIs for Authentication, User, Payment, and Admin functionalities. All routes directly utilize the master tables.\n\n### Data Flow\n- **User Authentication**: Via Replit OAuth, data synchronized with local DB, role-based permissions, PostgreSQL session.\n- **Step-by-Step Booking Process**: (1) Sport selection → (2) Ground selection filtered by sport → (3) Booking mode selection based on ground capabilities → (4) Plan selection with participant count validation → (5) Date selection with automatic end date calculation for non-hourly plans → (6) Time slot availability checking with real-time capacity calculation → (7) Booking summary with pricing details and confirmation.\n- **Capacity Management**: Available capacity calculated from booking_slot table by summing existing participants and deducting from ground max capacity for per-person bookings. Full-ground bookings check simple availability without capacity calculations.\n- **Admin Operations**: Facility management, booking oversight, user management, analytics with enhanced payment processing options.\n\n### System Enhancements\n- **Step-by-Step Booking System**: Complete redesign of booking flow with 7 sequential steps: (1) Sport selection, (2) Ground selection based on sport, (3) Booking mode selection (per-person/full-ground), (4) Plan selection with person count, (5) Date selection with end date calculation, (6) Time slot availability with capacity checking, (7) Booking summary and confirmation.\n- **Booking Queue System**: `booking_queue` table for priority-based waiting list management with conflict detection and automated notifications.\n- **Notification System**: Database-backed system for booking reminders and auto-cancellation of expired pending bookings.\n- **Admin Interface**: Comprehensive sorting, color-coded status indicators (Confirmed, Pending, Completed, Cancelled for bookings; Paid, Partial, Unpaid, Failed, Refunded for payments), and real-time statistics.\n- **Login System**: Professional login interface with separate client/admin options, signup, and simulated password recovery.\n- **Reporting System**: Comprehensive reports for revenue, facility usage, member analytics, payment methods, and coupon usage, with PDF, Excel, and Print export options.\n- **Payment System**: Integrated mock payment system for testing with comprehensive partial payment support, custom amount input, proper balance calculations, and consistent interface across all application modules (booking, admin, payment pages).\n- **Receipt Generation System**: Complete receipt management with PDF/HTML generation, booking-specific payment breakdowns, SMS/email delivery capabilities, and accurate financial calculations including discount handling and payment history tracking.\n- **Payment History System**: Comprehensive payment tracking with modal interface displaying all payments for bookings, detailed payment records with receipt access, booking summaries with financial totals, and seamless integration across payment workflows.\n- **Enhanced Booking Logic**: Plans table includes `durationDays` field for flexible booking periods. Monthly/yearly bookings create individual slot records for each day (30 for monthly, 365 for yearly) with proper date calculation from start date.\n\n## External Dependencies\n\n### Core Dependencies\n- **@neondatabase/serverless**: Database connectivity.\n- **drizzle-orm**: Type-safe database operations.\n- **@tanstack/react-query**: Server state management.\n- **@radix-ui/react-***: Accessible UI primitives.\n- **tailwindcss**: Utility-first CSS framework.\n- **wouter**: Lightweight client-side routing.\n\n### Development Tools\n- **vite**: Fast build tool and dev server.\n- **typescript**: Type safety.\n- **drizzle-kit**: Database migration and schema management.\n\n### Authentication\n- **openid-client**: OIDC authentication with Replit.\n- **express-session**: Session management.\n- **connect-pg-simple**: PostgreSQL session store.\n\n### Reporting & Export\n- **jsPDF**: PDF generation.\n- **jsPDF-AutoTable**: Table formatting for PDFs.\n- **XLSX**: Excel file generation.\n- **file-saver**: File saving functionality.","size_bytes":9896},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\n\n// Demo users for authentication\nconst DEMO_USERS = {\n  client: { \n    id: \"demo-client-001\", \n    email: \"client@demo.com\", \n    password: \"client123\", \n    role: \"client\",\n    firstName: \"John\",\n    lastName: \"Doe\"\n  },\n  admin: { \n    id: \"demo-admin-001\", \n    email: \"admin@demo.com\", \n    password: \"admin123\", \n    role: \"admin\",\n    firstName: \"Admin\",\n    lastName: \"User\"\n  }\n};\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || \"demo-secret-key-123\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Setup local strategy for demo authentication\n  passport.use(\"client-local\", new LocalStrategy(\n    { usernameField: \"email\" },\n    async (email, password, done) => {\n      try {\n        // Check demo users first\n        if (email === DEMO_USERS.client.email && password === DEMO_USERS.client.password) {\n          // Ensure user exists in database\n          const user = await storage.upsertUser({\n            id: DEMO_USERS.client.id,\n            email: DEMO_USERS.client.email,\n            firstName: DEMO_USERS.client.firstName,\n            lastName: DEMO_USERS.client.lastName,\n            role: DEMO_USERS.client.role,\n          });\n          return done(null, { ...user, userType: 'client' });\n        }\n\n        // Check registered users in database\n        const registeredUser = await storage.getUserByEmail(email);\n        if (registeredUser && registeredUser.password === password && registeredUser.role === 'client') {\n          return done(null, { ...registeredUser, userType: 'client' });\n        }\n\n        return done(null, false, { message: \"Invalid credentials\" });\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.use(\"admin-local\", new LocalStrategy(\n    { usernameField: \"email\" },\n    async (email, password, done) => {\n      try {\n        if (email === DEMO_USERS.admin.email && password === DEMO_USERS.admin.password) {\n          // Ensure admin user exists in database\n          const user = await storage.upsertUser({\n            id: DEMO_USERS.admin.id,\n            email: DEMO_USERS.admin.email,\n            firstName: DEMO_USERS.admin.firstName,\n            lastName: DEMO_USERS.admin.lastName,\n            role: DEMO_USERS.admin.role,\n          });\n          return done(null, { ...user, userType: 'admin' });\n        }\n        return done(null, false, { message: \"Invalid admin credentials\" });\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  passport.serializeUser((user: any, done) => {\n    done(null, { id: user.id, userType: user.userType });\n  });\n\n  passport.deserializeUser(async (sessionData: any, done) => {\n    try {\n      const user = await storage.getUser(sessionData.id);\n      if (user) {\n        done(null, { ...user, userType: sessionData.userType });\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Login routes\n  app.post(\"/api/login/client\", passport.authenticate(\"client-local\"), (req, res) => {\n    res.json({ success: true, user: req.user, message: \"Client login successful\" });\n  });\n\n  app.post(\"/api/login/admin\", passport.authenticate(\"admin-local\"), (req, res) => {\n    res.json({ success: true, user: req.user, message: \"Admin login successful\" });\n  });\n\n  // Demo login page\n  app.get(\"/api/login\", (req, res) => {\n    const loginType = req.query.type || 'client';\n    res.send(`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Login - Aryen Recreation Centre</title>\n        <style>\n          body { font-family: Arial, sans-serif; max-width: 400px; margin: 100px auto; padding: 20px; }\n          .form-group { margin-bottom: 15px; }\n          label { display: block; margin-bottom: 5px; }\n          input { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }\n          button { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; width: 100%; }\n          button:hover { background: #0056b3; }\n          .demo-info { background: #f8f9fa; padding: 15px; border-radius: 4px; margin-bottom: 20px; }\n          .switch-type { text-align: center; margin-top: 15px; }\n          .switch-type a { color: #007bff; text-decoration: none; }\n        </style>\n      </head>\n      <body>\n        <h2>Login to Aryen Recreation Centre</h2>\n        <div class=\"demo-info\">\n          <strong>Demo Credentials ${loginType === 'admin' ? '(Admin)' : '(Client)'}:</strong><br>\n          Email: ${loginType === 'admin' ? 'admin@demo.com' : 'client@demo.com'}<br>\n          Password: ${loginType === 'admin' ? 'admin123' : 'client123'}\n        </div>\n        <form action=\"/api/login/${loginType}\" method=\"post\">\n          <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" value=\"${loginType === 'admin' ? 'admin@demo.com' : 'client@demo.com'}\" required>\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password:</label>\n            <input type=\"password\" id=\"password\" name=\"password\" value=\"${loginType === 'admin' ? 'admin123' : 'client123'}\" required>\n          </div>\n          <button type=\"submit\">Login as ${loginType === 'admin' ? 'Admin' : 'Client'}</button>\n        </form>\n        <div class=\"switch-type\">\n          ${loginType === 'admin' \n            ? '<a href=\"/api/login?type=client\">Switch to Client Login</a>' \n            : '<a href=\"/api/login?type=admin\">Switch to Admin Login</a>'\n          }\n        </div>\n        <script>\n          // Auto-redirect after successful login\n          if (window.location.search.includes('success')) {\n            setTimeout(() => window.location.href = '/', 1000);\n          }\n        </script>\n      </body>\n      </html>\n    `);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Logout failed\" });\n      }\n      req.session.destroy(() => {\n        res.clearCookie('connect.sid');\n        res.redirect('/');\n      });\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.isAuthenticated() || !req.user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n  next();\n};\n","size_bytes":7182},"server/routes.ts":{"content":"import type { Request, Response } from \"express\";\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertBookingSchema, insertBookingSlotSchema, insertPaymentSchema, insertCouponSchema, insertSportSchema, insertGroundSchema, insertPlanSchema, insertTimeSlotSchema, bookings, payments } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { eq } from \"drizzle-orm\";\nimport { ReceiptGenerator, type ReceiptData } from \"./receipt\";\nimport { SMSService, EmailService } from \"./notifications\";\nimport { nanoid } from \"nanoid\";\nimport \"./types\"; // Import the type declarations\n\n// Helper function to generate receipt data from payment ID\nasync function generateReceiptData(paymentId: number): Promise<ReceiptData> {\n  const payment = await storage.getPaymentById(paymentId);\n  if (!payment) {\n    throw new Error('Payment not found');\n  }\n  \n  const booking = await storage.getBookingDetails(payment.bookingId);\n  if (!booking) {\n    throw new Error('Booking not found');\n  }\n  \n  const user = await storage.getUserById(booking.userId);\n  if (!user) {\n    throw new Error('User not found');\n  }\n  \n  // Get all payments for this booking to calculate total paid before this payment\n  const allPayments = await storage.getPayments(booking.id);\n  const sortedPayments = allPayments.sort((a, b) => new Date(a.processedAt).getTime() - new Date(b.processedAt).getTime());\n  \n  // Find the index of current payment\n  const currentPaymentIndex = sortedPayments.findIndex(p => p.id === payment.id);\n  \n  // Calculate total paid before this payment\n  const totalPaidBeforeThis = sortedPayments\n    .slice(0, currentPaymentIndex)\n    .reduce((sum, p) => sum + Number(p.amount), 0);\n  \n  // Get booking slots for time display\n  const bookingSlots = await storage.getBookingSlots(booking.id);\n  const firstSlot = bookingSlots[0];\n  const lastSlot = bookingSlots[bookingSlots.length - 1];\n  \n  // Generate unique receipt ID\n  const receiptId = `RCP-${Date.now()}-${nanoid(6).toUpperCase()}`;\n  \n  return {\n    receiptId,\n    bookingId: booking.id,\n    paymentId: payment.id,\n    customerName: `${user.firstName} ${user.lastName}`,\n    customerEmail: user.email,\n    customerPhone: user.phone || '',\n    facilityName: booking.facilityName || 'Sports Facility',\n    sportName: booking.facilityType || 'Sport',\n    bookingDate: firstSlot?.slotDate || booking.startDate,\n    startTime: firstSlot?.startTime || '00:00',\n    endTime: lastSlot?.endTime || firstSlot?.endTime || '00:00',\n    participants: booking.participantCount || 1,\n    totalBookingAmount: Number(booking.totalAmount) + Number(booking.discountAmount || 0),\n    totalAmount: Math.max(0, Number(booking.totalAmount) + Number(booking.discountAmount || 0) - Number(booking.discountAmount || 0) - totalPaidBeforeThis),\n    paidAmount: Number(payment.amount),\n    discountAmount: Number(booking.discountAmount || 0),\n    totalPaidBeforeThis: totalPaidBeforeThis,\n    paymentMethod: payment.paymentMethod || 'Online',\n    transactionId: payment.transactionId || '',\n    paymentDate: payment.processedAt?.toISOString() || new Date().toISOString(),\n    balanceAmount: Math.max(0, Number(booking.totalAmount) - Number(booking.paidAmount || 0)),\n    paymentStatus: payment.status\n  };\n}\n\n// Helper function to generate and send receipt\nasync function generateAndSendReceipt(paymentId: number, sendSMS: boolean = false, sendEmail: boolean = false): Promise<{ receiptId: string; sent: { sms: boolean; email: boolean } }> {\n  const receiptData = await generateReceiptData(paymentId);\n  \n  const results = {\n    receiptId: receiptData.receiptId,\n    sent: { sms: false, email: false }\n  };\n  \n  // Send SMS if requested\n  if (sendSMS && receiptData.customerPhone) {\n    const smsText = ReceiptGenerator.generateSMSText(receiptData);\n    results.sent.sms = await SMSService.sendSMS(receiptData.customerPhone, smsText);\n  }\n  \n  // Send Email if requested\n  if (sendEmail && receiptData.customerEmail) {\n    const htmlContent = ReceiptGenerator.generateReceiptHTML(receiptData);\n    const pdfBuffer = ReceiptGenerator.generateReceiptPDF(receiptData);\n    results.sent.email = await EmailService.sendReceiptEmail(\n      receiptData.customerEmail,\n      receiptData.customerName,\n      receiptData.receiptId,\n      htmlContent,\n      pdfBuffer\n    );\n  }\n  \n  return results;\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Authentication routes\n  app.get(\"/api/auth/user\", (req, res) => {\n    if (req.isAuthenticated()) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ message: \"Unauthorized\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: \"Error logging out\" });\n      }\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  // Signup route for new users\n  app.post(\"/api/signup\", async (req, res) => {\n    try {\n      const { firstName, lastName, email, phone, password } = req.body;\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n      \n      // Create new user\n      const newUser = await storage.createUser({\n        id: `user-${Date.now()}`, // Generate unique ID\n        firstName,\n        lastName,\n        email,\n        phone,\n        role: \"client\",\n        isActive: true,\n        createdAt: new Date(),\n        modifiedAt: new Date()\n      });\n      \n      // Auto-login the user after signup\n      req.login(newUser, (err) => {\n        if (err) {\n          return res.status(500).json({ message: \"Error logging in after signup\" });\n        }\n        res.json({ success: true, user: newUser });\n      });\n    } catch (error: any) {\n      console.error(\"Error during signup:\", error);\n      res.status(500).json({ message: error.message || \"Failed to create account\" });\n    }\n  });\n\n  // Sports Master routes\n  app.get('/api/sports', async (req, res) => {\n    try {\n      const sports = await storage.getSports();\n      res.json(sports);\n    } catch (error) {\n      console.error(\"Error fetching sports:\", error);\n      res.status(500).json({ message: \"Failed to fetch sports\" });\n    }\n  });\n\n  // Grounds Master routes\n  app.get('/api/grounds', async (req, res) => {\n    try {\n      const sportId = req.query.sportId ? parseInt(req.query.sportId as string) : undefined;\n      const grounds = sportId ? await storage.getGroundsBySport(sportId) : await storage.getGrounds();\n      res.json(grounds);\n    } catch (error) {\n      console.error(\"Error fetching grounds:\", error);\n      res.status(500).json({ message: \"Failed to fetch grounds\" });\n    }\n  });\n\n  // Plans Master routes\n  app.get('/api/plans', async (req, res) => {\n    try {\n      const groundId = req.query.groundId ? parseInt(req.query.groundId as string) : undefined;\n      const plans = groundId ? await storage.getPlansByGround(groundId) : await storage.getPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n  \n  // Facility routes (using master tables exclusively)\n  app.get('/api/facilities', async (req, res) => {\n    try {\n      const facilities = await storage.getFacilities();\n      res.json(facilities);\n    } catch (error) {\n      console.error(\"Error fetching facilities:\", error);\n      res.status(500).json({ message: \"Failed to fetch facilities\" });\n    }\n  });\n\n  app.get('/api/facilities/popular', async (req, res) => {\n    try {\n      const facilities = await storage.getPopularFacilities();\n      res.json(facilities);\n    } catch (error) {\n      console.error(\"Error fetching popular facilities:\", error);\n      res.status(500).json({ message: \"Failed to fetch popular facilities\" });\n    }\n  });\n\n  app.get('/api/facilities/:id', async (req, res) => {\n    try {\n      const facilityId = parseInt(req.params.id);\n      const facility = await storage.getFacility(facilityId);\n      \n      if (!facility) {\n        return res.status(404).json({ message: \"Facility not found\" });\n      }\n      \n      res.json(facility);\n    } catch (error) {\n      console.error(\"Error fetching facility:\", error);\n      res.status(500).json({ message: \"Failed to fetch facility\" });\n    }\n  });\n\n  app.get('/api/facilities/:id/slots', async (req, res) => {\n    try {\n      const facilityId = parseInt(req.params.id);\n      const date = req.query.date as string;\n      const slots = await storage.getFacilitySlots(facilityId, date);\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching facility slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch facility slots\" });\n    }\n  });\n\n  // Booking routes\n  app.get(\"/api/bookings/user\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const bookings = await storage.getUserBookings(req.user.id);\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching user bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  // User's pending payments (confirmed bookings with outstanding payments)\n  app.get(\"/api/bookings/pending-payments\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const userPendingPayments = await storage.getPendingPayments(req.user.id);\n      res.json(userPendingPayments);\n    } catch (error) {\n      console.error(\"Error fetching user pending payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending payments\" });\n    }\n  });\n\n  app.get(\"/api/bookings/all-payments\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      const allPayments = await storage.getAllUserPayments(req.user.id);\n      res.json(allPayments);\n    } catch (error) {\n      console.error(\"Error fetching all payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch all payments\" });\n    }\n  });\n\n  app.get(\"/api/bookings/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user?.id) {\n        return res.status(401).json({ message: \"User not authenticated\" });\n      }\n      \n      const bookingId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      // Validate bookingId is a number\n      if (isNaN(bookingId)) {\n        return res.status(400).json({ message: \"Invalid booking ID\" });\n      }\n      \n      const booking = await storage.getBookingDetails(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      // Check if user owns the booking or is admin\n      if (booking.userId !== userId && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n\n\n  app.post(\"/api/bookings\", isAuthenticated, async (req, res) => {\n    try {\n      // Parse and validate booking data\n      const bookingData = insertBookingSchema.parse({\n        ...req.body,\n        userId: req.user.id,\n        status: \"confirmed\", // Set as confirmed after validation per requirements\n        paymentStatus: \"pending\", // Start with pending payment\n      });\n      \n      const slots = req.body.slots || [];\n      const validatedSlots = slots.map((slot: any) => {\n        // Remove bookingId from slot data since it will be set during creation\n        const { bookingId, ...slotData } = slot;\n        return insertBookingSlotSchema.parse({\n          ...slotData,\n          participantCount: bookingData.participantCount || 1, // Add participant count to each slot\n        });\n      });\n\n      // VALIDATION STEP 1: Comprehensive data validation\n      if (!bookingData.groundId || !bookingData.bookingType || !bookingData.planType) {\n        return res.status(400).json({ message: \"Missing required booking information\" });\n      }\n      \n      if (!bookingData.participantCount || bookingData.participantCount <= 0) {\n        return res.status(400).json({ message: \"Valid participant count is required\" });\n      }\n      \n      if (!bookingData.totalAmount || bookingData.totalAmount <= 0) {\n        return res.status(400).json({ message: \"Valid total amount is required\" });\n      }\n      \n      if (validatedSlots.length === 0) {\n        return res.status(400).json({ message: \"At least one time slot must be selected\" });\n      }\n\n      // Validate each slot has required data\n      for (const slot of validatedSlots) {\n        if (!slot.bookingDate || !slot.startTime || !slot.endTime) {\n          return res.status(400).json({ message: \"All slots must have complete date and time information\" });\n        }\n      }\n\n      // VALIDATION STEP 2: Get ground details for capacity validation\n      const ground = await storage.getGroundById(bookingData.groundId);\n      if (!ground) {\n        return res.status(400).json({ message: \"Invalid ground selected\" });\n      }\n\n      // VALIDATION STEP 3: Capacity validation for per-person bookings\n      if (bookingData.bookingType === \"per-person\") {\n        const maxCapacity = ground.maxCapacity || 10;\n        if (bookingData.participantCount > maxCapacity) {\n          return res.status(400).json({ \n            message: `Participant count (${bookingData.participantCount}) exceeds ground capacity (${maxCapacity})` \n          });\n        }\n        \n        // Check available capacity for each slot\n        for (const slot of validatedSlots) {\n          const existingBookings = await storage.getBookingsForSlot(\n            bookingData.groundId, \n            slot.bookingDate, \n            slot.startTime\n          );\n          \n          const bookedCapacity = existingBookings.reduce((total, booking) => {\n            return total + (booking.participantCount || 0);\n          }, 0);\n          \n          const availableCapacity = maxCapacity - bookedCapacity;\n          \n          if (bookingData.participantCount > availableCapacity) {\n            return res.status(400).json({ \n              message: `Insufficient capacity for ${slot.startTime} on ${slot.bookingDate}. Available: ${availableCapacity}, Requested: ${bookingData.participantCount}` \n            });\n          }\n        }\n      }\n\n      // VALIDATION STEP 4: Check for duplicate bookings (only for full-ground bookings)\n      // Per-person bookings rely on capacity checking instead\n      if (bookingData.bookingType === 'full-ground') {\n        for (const slot of validatedSlots) {\n          const duplicateBookings = await storage.checkDuplicateBooking(\n            req.user.id,\n            bookingData.groundId,\n            slot.bookingDate,\n            slot.startTime\n          );\n          \n          if (duplicateBookings.length > 0) {\n            return res.status(400).json({ \n              message: `You already have a booking for ${slot.startTime} on ${slot.bookingDate}` \n            });\n          }\n        }\n      }\n\n      // VALIDATION STEP 5: Ensure booking date is current or future\n      const currentDate = new Date();\n      currentDate.setHours(0, 0, 0, 0);\n      \n      for (const slot of validatedSlots) {\n        const slotDate = new Date(slot.bookingDate);\n        if (slotDate < currentDate) {\n          return res.status(400).json({ \n            message: `Cannot book for past date: ${slot.bookingDate}` \n          });\n        }\n      }\n\n      // All validations passed - create the booking\n      const result = await storage.createBooking(bookingData, validatedSlots);\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid booking data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  // Payment routes\n  app.post(\"/api/payments\", isAuthenticated, async (req, res) => {\n    try {\n      const paymentData = insertPaymentSchema.parse({\n        ...req.body,\n        userId: req.user.id,\n        status: req.body.status || 'pending', // Default to pending if not specified\n        processedAt: req.body.status === 'completed' ? new Date() : null,\n      });\n      \n      // Create the payment record\n      const payment = await storage.createPayment(paymentData);\n      \n      // If payment is completed and has a booking ID, update the booking's paid amount\n      if (payment.status === 'completed' && payment.bookingId) {\n        try {\n          // Get the booking details\n          const booking = await storage.getBookingDetails(payment.bookingId);\n          if (booking) {\n            // Get all completed payments for this booking\n            const allPayments = await storage.getPayments(payment.bookingId);\n            const totalPaid = allPayments\n              .filter(p => p.status === 'completed')\n              .reduce((sum, p) => sum + Number(p.amount), 0);\n            \n            const totalAmount = Number(booking.totalAmount);\n            \n            // Determine payment status\n            let paymentStatus;\n            let bookingStatus = booking.status;\n            \n            if (totalPaid >= totalAmount) {\n              paymentStatus = 'completed';\n              bookingStatus = 'confirmed';\n            } else if (totalPaid > 0) {\n              paymentStatus = 'partial';\n            } else {\n              paymentStatus = 'pending';\n            }\n            \n            // Update booking with correct amounts and status\n            await storage.updateBookingPayment(payment.bookingId, {\n              paidAmount: totalPaid.toString(),\n              paymentStatus: paymentStatus,\n              status: bookingStatus\n            });\n          }\n        } catch (updateError) {\n          console.error(\"Error updating booking payment info:\", updateError);\n          // Don't fail the payment creation, but log the error\n        }\n      }\n      \n      // Generate and send receipt if payment is completed\n      if (payment.status === 'completed' && payment.bookingId) {\n        try {\n          await generateAndSendReceipt(payment.id, req.body.sendSMS, req.body.sendEmail);\n        } catch (receiptError) {\n          console.error(\"Error generating receipt:\", receiptError);\n          // Don't fail the payment creation, but log the error\n        }\n      }\n      \n      res.json(payment);\n    } catch (error) {\n      console.error(\"Error creating payment:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid payment data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create payment\" });\n    }\n  });\n\n  // Admin routes\n  app.get(\"/api/admin/stats\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const status = req.query.status as string;\n      const search = req.query.search as string;\n      const sortBy = req.query.sortBy as string;\n      \n      console.log('Route received sortBy:', sortBy);\n      \n      const result = await storage.getAdminBookings({ page, limit, status, search, sortBy });\n      res.json(result);\n    } catch (error) {\n      console.error(\"Error fetching admin bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/admin/bookings/:id/slots\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const bookingId = parseInt(req.params.id);\n      const slots = await storage.getBookingSlots(bookingId);\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching booking slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking slots\" });\n    }\n  });\n\n  // Admin Master Table Management\n  app.get(\"/api/admin/sports\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const sports = await storage.getAllSports();\n      res.json(sports);\n    } catch (error) {\n      console.error(\"Error fetching sports:\", error);\n      res.status(500).json({ message: \"Failed to fetch sports\" });\n    }\n  });\n\n  app.post(\"/api/admin/sports\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const sportData = insertSportSchema.parse(req.body);\n      const sport = await storage.createSport(sportData);\n      res.json(sport);\n    } catch (error) {\n      console.error(\"Error creating sport:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid sport data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create sport\" });\n    }\n  });\n\n  app.patch(\"/api/admin/sports/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const id = parseInt(req.params.id);\n      const sport = await storage.updateSport(id, req.body);\n      res.json(sport);\n    } catch (error) {\n      console.error(\"Error updating sport:\", error);\n      res.status(500).json({ message: \"Failed to update sport\" });\n    }\n  });\n\n  app.get(\"/api/admin/grounds\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const grounds = await storage.getAllGrounds();\n      res.json(grounds);\n    } catch (error) {\n      console.error(\"Error fetching grounds:\", error);\n      res.status(500).json({ message: \"Failed to fetch grounds\" });\n    }\n  });\n\n  app.post(\"/api/admin/grounds\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const groundData = insertGroundSchema.parse(req.body);\n      const ground = await storage.createGround(groundData);\n      res.json(ground);\n    } catch (error) {\n      console.error(\"Error creating ground:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid ground data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create ground\" });\n    }\n  });\n\n  app.get(\"/api/admin/plans\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const plans = await storage.getAllPlans();\n      res.json(plans);\n    } catch (error) {\n      console.error(\"Error fetching plans:\", error);\n      res.status(500).json({ message: \"Failed to fetch plans\" });\n    }\n  });\n\n  app.post(\"/api/admin/plans\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const planData = insertPlanSchema.parse(req.body);\n      const plan = await storage.createPlan(planData);\n      res.json(plan);\n    } catch (error) {\n      console.error(\"Error creating plan:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid plan data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create plan\" });\n    }\n  });\n\n  // Admin time slots endpoints\n  app.get(\"/api/admin/timeslots\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or manager access required\" });\n      }\n      \n      const timeSlots = await storage.getAllTimeSlots();\n      res.json(timeSlots);\n    } catch (error) {\n      console.error(\"Error fetching time slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch time slots\" });\n    }\n  });\n\n  app.post(\"/api/admin/timeslots\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or manager access required\" });\n      }\n      \n      const timeSlotData = insertTimeSlotSchema.parse(req.body);\n      const timeSlot = await storage.createTimeSlot(timeSlotData);\n      res.json(timeSlot);\n    } catch (error) {\n      console.error(\"Error creating time slot:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid time slot data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to create time slot\" });\n    }\n  });\n\n  app.patch(\"/api/admin/timeslots/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or manager access required\" });\n      }\n      \n      const id = parseInt(req.params.id);\n      const timeSlotData = insertTimeSlotSchema.partial().parse(req.body);\n      const updatedTimeSlot = await storage.updateTimeSlot(id, timeSlotData);\n      res.json(updatedTimeSlot);\n    } catch (error) {\n      console.error(\"Error updating time slot:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid time slot data\", errors: error.errors });\n        return;\n      }\n      res.status(500).json({ message: \"Failed to update time slot\" });\n    }\n  });\n\n  app.delete(\"/api/admin/timeslots/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or manager access required\" });\n      }\n      \n      const id = parseInt(req.params.id);\n      await storage.deleteTimeSlot(id);\n      res.json({ message: \"Time slot deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting time slot:\", error);\n      res.status(500).json({ message: \"Failed to delete time slot\" });\n    }\n  });\n\n  // Admin facilities endpoint (using master tables)\n  app.get('/api/admin/facilities', isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const facilities = await storage.getFacilities();\n      res.json(facilities);\n    } catch (error) {\n      console.error(\"Error fetching admin facilities:\", error);\n      res.status(500).json({ message: \"Failed to fetch facilities\" });\n    }\n  });\n\n  // Admin facility statistics endpoint\n  app.get('/api/admin/facility-stats', isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const facilities = await storage.getFacilities();\n      const allBookings = await storage.getBookings(); // Use the correct method\n      const allPayments = await storage.getAllPayments();\n      \n      // Calculate accurate facility statistics\n      const totalFacilities = facilities.length;\n      \n      // Calculate total revenue from actual payments received (not booking amounts)\n      const totalRevenue = allPayments.reduce((sum, payment) => {\n        return sum + Number(payment.amount || 0);\n      }, 0);\n      \n      // Calculate average capacity from actual facility capacities\n      const avgCapacity = facilities.length > 0 \n        ? facilities.reduce((sum, f) => sum + (f.capacity || 0), 0) / facilities.length \n        : 0;\n      \n      // Calculate total bookings\n      const totalBookings = allBookings.length;\n      \n      // Calculate active facilities\n      const activeFacilities = facilities.filter(f => f.isActive).length;\n      \n      // Calculate booking trends (last 30 days vs previous 30 days)\n      const now = new Date();\n      const thirtyDaysAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      const sixtyDaysAgo = new Date(now.getTime() - 60 * 24 * 60 * 60 * 1000);\n      \n      const recentBookings = allBookings.filter(b => new Date(b.createdAt) >= thirtyDaysAgo).length;\n      const previousBookings = allBookings.filter(b => {\n        const date = new Date(b.createdAt);\n        return date >= sixtyDaysAgo && date < thirtyDaysAgo;\n      }).length;\n      \n      const bookingTrend = previousBookings > 0 \n        ? ((recentBookings - previousBookings) / previousBookings) * 100 \n        : recentBookings > 0 ? 100 : 0;\n      \n      res.json({\n        totalFacilities,\n        totalRevenue,\n        avgCapacity: Math.round(avgCapacity),\n        totalBookings,\n        activeFacilities,\n        recentBookings,\n        bookingTrend: Math.round(bookingTrend),\n        avgBookingValue: totalBookings > 0 ? totalRevenue / totalBookings : 0\n      });\n    } catch (error) {\n      console.error(\"Error fetching facility stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch facility stats\" });\n    }\n  });\n\n  // Admin payment and collection routes\n  app.get(\"/api/admin/payments\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const payments = await storage.getAllPayments();\n      res.json(payments);\n    } catch (error) {\n      console.error(\"Error fetching admin payments:\", error);\n      res.status(500).json({ message: \"Failed to fetch payments\" });\n    }\n  });\n\n  // Admin pending bookings (only payment collection tasks - no approval delays)\n  app.get(\"/api/admin/pending-payments\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const pendingBookings = await storage.getAllPendingBookings();\n      res.json(pendingBookings);\n    } catch (error) {\n      console.error(\"Error fetching pending payment bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch pending payment bookings\" });\n    }\n  });\n\n  app.post(\"/api/admin/collect-payment\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { \n        bookingId, \n        amount, \n        paymentMethod, \n        notes, \n        transactionId, \n        upiId, \n        bankName, \n        accountNumber, \n        paymentDate,\n        discountAmount = 0,\n        discountReason = ''\n      } = req.body;\n      \n      if (!bookingId || !amount || !paymentMethod) {\n        return res.status(400).json({ message: \"Missing required payment information\" });\n      }\n      \n      // Get booking using storage method to avoid db reference issues\n      const booking = await storage.getBooking(parseInt(bookingId));\n      \n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Generate transaction ID based on payment method\n      let finalTransactionId = transactionId;\n      if (!finalTransactionId) {\n        const timestamp = Date.now();\n        switch (paymentMethod) {\n          case 'cash':\n            finalTransactionId = `CASH-${timestamp}`;\n            break;\n          case 'upi':\n            finalTransactionId = `UPI-${timestamp}`;\n            break;\n          case 'card':\n            finalTransactionId = `CARD-${timestamp}`;\n            break;\n          case 'bank_transfer':\n            finalTransactionId = `BANK-${timestamp}`;\n            break;\n          default:\n            finalTransactionId = `ADMIN-${timestamp}`;\n        }\n      }\n\n      // Create detailed payment gateway response with all transaction details\n      const paymentGatewayResponse: any = {\n        collectedBy: req.user.username,\n        notes: notes || `Payment collected by admin ${req.user.username}`,\n        collectionDate: paymentDate || new Date().toISOString(),\n        paymentMethod: paymentMethod\n      };\n\n      // Add method-specific details\n      if (paymentMethod === 'upi' && upiId) {\n        paymentGatewayResponse.upiId = upiId;\n        paymentGatewayResponse.upiTransactionId = transactionId;\n      } else if (paymentMethod === 'bank_transfer') {\n        if (bankName) paymentGatewayResponse.bankName = bankName;\n        if (accountNumber) paymentGatewayResponse.accountNumber = accountNumber;\n        if (transactionId) paymentGatewayResponse.bankReferenceNumber = transactionId;\n      } else if (paymentMethod === 'card' && transactionId) {\n        paymentGatewayResponse.cardTransactionId = transactionId;\n      }\n\n      // Create payment record with discount information\n      const paymentData: any = {\n        bookingId: parseInt(bookingId),\n        userId: booking.userId,\n        amount: Number(amount),\n        paymentMethod: paymentMethod,\n        transactionId: finalTransactionId,\n        status: 'completed',\n        processedAt: paymentDate ? new Date(paymentDate) : new Date(),\n        paymentGatewayResponse: paymentGatewayResponse\n      };\n      \n      // Calculate new amounts with discount support FIRST\n      const currentPaidAmount = Number(booking.paidAmount || 0);\n      const currentDiscountAmount = Number(booking.discountAmount || 0);\n      const newDiscountAmount = Number(discountAmount || 0);\n      const totalAmount = Number(booking.totalAmount);\n      const newPaidAmount = currentPaidAmount + Number(amount);\n      \n      // Calculate final amount due after applying new discount\n      const finalAmountDue = totalAmount - newDiscountAmount;\n      const remainingBalance = Math.max(0, finalAmountDue - newPaidAmount);\n      \n      // Determine new payment status based on final amount due\n      let newPaymentStatus;\n      let newBookingStatus = booking.status;\n      \n      if (newPaidAmount >= finalAmountDue) {\n        newPaymentStatus = 'completed';\n        newBookingStatus = 'confirmed';\n      } else if (newPaidAmount > 0) {\n        newPaymentStatus = 'partial';\n        // Keep booking status as is for partial payments\n      } else {\n        newPaymentStatus = 'pending';\n      }\n      \n      console.log(`Admin collecting payment for booking ${bookingId}:`);\n      console.log(`- Total Amount: ₹${totalAmount}`);\n      console.log(`- Discount Applied: ₹${newDiscountAmount}`);\n      console.log(`- Final Amount Due: ₹${finalAmountDue}`);\n      console.log(`- Current Paid: ₹${currentPaidAmount}`);\n      console.log(`- Payment Amount: ₹${amount}`);\n      console.log(`- New Total Paid: ₹${newPaidAmount}`);\n      console.log(`- Remaining Balance: ₹${remainingBalance}`);\n      console.log(`- New Status: ${newPaymentStatus}`);\n      \n      // Add discount information to payment record if applicable\n      if (newDiscountAmount > 0) {\n        paymentData.discountAmount = newDiscountAmount;\n        paymentData.discountReason = discountReason.trim() || 'Admin discount';\n      }\n      \n      // Create payment record FIRST (before updating booking)\n      const payment = await storage.createPayment(paymentData);\n      \n      // Update booking with discount information AFTER payment is created\n      const bookingUpdates: any = {\n        paidAmount: newPaidAmount.toString(),\n        paymentStatus: newPaymentStatus,\n        status: newBookingStatus\n      };\n      \n      // Include discount information if provided\n      if (newDiscountAmount > 0 && newDiscountAmount !== currentDiscountAmount) {\n        bookingUpdates.discountAmount = newDiscountAmount.toString();\n        if (discountReason.trim()) {\n          bookingUpdates.discountReason = discountReason.trim();\n        }\n      }\n      \n      await storage.updateBookingPayment(parseInt(bookingId), bookingUpdates);\n\n      // Generate receipt data without problematic ORM calls\n      const receiptData = {\n        paymentId: payment.id,\n        bookingId: parseInt(bookingId),\n        customerName: 'Customer',\n        customerEmail: '',\n        customerPhone: '',\n        facility: 'Sports Facility',\n        amount: Number(amount),\n        paymentMethod: paymentMethod,\n        transactionId: finalTransactionId,\n        paymentDate: paymentDate || new Date().toISOString(),\n        totalAmount: totalAmount,\n        paidAmount: newPaidAmount,\n        remainingBalance: Math.max(0, remainingBalance),\n        isFullyPaid: newPaymentStatus === 'completed',\n        notes: notes\n      };\n\n      console.log('Payment processed successfully. Receipt data:', receiptData);\n      \n      // Generate and send receipt for completed payment\n      let receiptResult = null;\n      try {\n        receiptResult = await generateAndSendReceipt(payment.id, req.body.sendSMS, req.body.sendEmail);\n      } catch (receiptError) {\n        console.error(\"Error generating receipt:\", receiptError);\n        // Don't fail the payment collection, but log the error\n      }\n      \n      res.json({ \n        success: true, \n        payment,\n        remainingBalance: Math.max(0, remainingBalance),\n        isFullyPaid: newPaymentStatus === 'completed',\n        receipt: receiptResult,\n        message: newPaymentStatus === 'completed' \n          ? `Payment completed successfully. Booking confirmed.`\n          : `Partial payment of ₹${amount} collected. Remaining balance: ₹${remainingBalance.toFixed(2)}`\n      });\n    } catch (error) {\n      console.error(\"Error collecting payment:\", error);\n      res.status(500).json({ message: \"Failed to collect payment\" });\n    }\n  });\n\n  app.patch(\"/api/admin/payments/:paymentId\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const paymentId = parseInt(req.params.paymentId);\n      const { status, notes } = req.body;\n      \n      // Update payment status (this will automatically sync booking data via syncBookingPaymentData)\n      const updatedPayment = await storage.updatePaymentStatus(paymentId, status, notes);\n      \n      res.json({\n        success: true,\n        payment: updatedPayment,\n        message: `Payment status updated to ${status}. Booking payment data synchronized.`\n      });\n    } catch (error) {\n      console.error(\"Error updating payment:\", error);\n      res.status(500).json({ message: \"Failed to update payment\" });\n    }\n  });\n\n  // Reports routes\n  app.get(\"/api/admin/reports/revenue\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { period = 'month', startDate, endDate } = req.query;\n      const report = await storage.getRevenueReport(period as 'day' | 'week' | 'month', startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching revenue report:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/revenue-by-sport\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { period = 'month', startDate, endDate } = req.query;\n      const report = await storage.getRevenueReportBySport(period as 'day' | 'week' | 'month', startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching revenue by sport report:\", error);\n      res.status(500).json({ message: \"Failed to fetch revenue by sport report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/facility-usage\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { period = 'month', startDate, endDate } = req.query;\n      const report = await storage.getFacilityUsageReport(period as 'day' | 'week' | 'month', startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching facility usage report:\", error);\n      res.status(500).json({ message: \"Failed to fetch facility usage report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/member-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { userId, startDate, endDate } = req.query;\n      const report = await storage.getMemberBookingReport(userId as string, startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching member booking report:\", error);\n      res.status(500).json({ message: \"Failed to fetch member booking report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/member-payments\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { userId, startDate, endDate } = req.query;\n      const report = await storage.getMemberPaymentReport(userId as string, startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching member payment report:\", error);\n      res.status(500).json({ message: \"Failed to fetch member payment report\" });\n    }\n  });\n\n  app.get(\"/api/admin/reports/coupon-usage\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\") {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { startDate, endDate } = req.query;\n      const report = await storage.getCouponUsageReport(startDate as string, endDate as string);\n      res.json(report);\n    } catch (error) {\n      console.error(\"Error fetching coupon usage report:\", error);\n      res.status(500).json({ message: \"Failed to fetch coupon usage report\" });\n    }\n  });\n\n  // Admin - Get all users\n  app.get(\"/api/admin/users\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const role = req.query.role as string;\n      const search = req.query.search as string;\n      \n      const users = await storage.getUsers({ page, limit, role, search });\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  // Admin - Update user\n  app.patch(\"/api/admin/users/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const userId = req.params.id;\n      const updateData = req.body;\n      \n      // Validate that managers can't update admin users\n      if (req.user.role === \"manager\") {\n        const existingUser = await storage.getUser(userId);\n        if (existingUser?.role === \"admin\") {\n          return res.status(403).json({ message: \"Managers cannot modify admin users\" });\n        }\n        // Prevent managers from creating new admin users\n        if (updateData.role === \"admin\") {\n          return res.status(403).json({ message: \"Managers cannot create admin users\" });\n        }\n      }\n      \n      const updatedUser = await storage.updateUser(userId, updateData);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Update past bookings to completed status with payment validation\n  app.post(\"/api/admin/update-past-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const result = await storage.updatePastBookingsToCompleted();\n      \n      let message = '';\n      if (result.updated > 0 && result.skipped === 0) {\n        message = `✅ Updated ${result.updated} past confirmed bookings to completed status`;\n      } else if (result.updated > 0 && result.skipped > 0) {\n        message = `⚠️ Updated ${result.updated} bookings to completed. Skipped ${result.skipped} bookings with outstanding payments`;\n      } else if (result.updated === 0 && result.skipped > 0) {\n        message = `⚠️ No bookings updated. ${result.skipped} bookings have outstanding payments that need to be resolved first`;\n      } else {\n        message = `ℹ️ No past confirmed bookings found to update`;\n      }\n\n      res.json({ \n        message,\n        updated: result.updated,\n        skipped: result.skipped,\n        paymentIssues: result.issues\n      });\n    } catch (error) {\n      console.error(\"Error updating past bookings:\", error);\n      res.status(500).json({ message: \"Failed to update past bookings\" });\n    }\n  });\n\n  // Get all upcoming bookings for admin dashboard\n  app.get(\"/api/admin/upcoming-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const upcomingBookings = await storage.getAllUpcomingBookings();\n      res.json(upcomingBookings);\n    } catch (error) {\n      console.error(\"Error fetching admin upcoming bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch upcoming bookings\" });\n    }\n  });\n\n  // Notification Management Routes\n  \n  // Get user notifications\n  app.get(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n  \n  // Mark notification as read\n  app.patch(\"/api/notifications/:id/read\", isAuthenticated, async (req, res) => {\n    try {\n      const notificationId = parseInt(req.params.id);\n      const userId = req.user.id;\n      \n      await storage.markNotificationAsRead(notificationId, userId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n  \n  // Send booking reminder notifications\n  app.post(\"/api/admin/send-booking-reminders\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const result = await storage.sendBookingReminders();\n      res.json({ \n        message: `Sent ${result.remindersSent} booking reminders`,\n        details: result\n      });\n    } catch (error) {\n      console.error(\"Error sending booking reminders:\", error);\n      res.status(500).json({ message: \"Failed to send booking reminders\" });\n    }\n  });\n  \n  // Send payment reminder notifications\n  app.post(\"/api/admin/send-payment-reminders\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const result = await storage.sendPaymentReminders();\n      res.json({ \n        message: `Sent ${result.remindersSent} payment reminders`,\n        details: result\n      });\n    } catch (error) {\n      console.error(\"Error sending payment reminders:\", error);\n      res.status(500).json({ message: \"Failed to send payment reminders\" });\n    }\n  });\n  \n  // Auto-process expired bookings\n  app.post(\"/api/admin/process-expired-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const result = await storage.processExpiredBookings();\n      res.json({ \n        message: `Processed ${result.cancelledBookings} expired bookings`,\n        details: result\n      });\n    } catch (error) {\n      console.error(\"Error processing expired bookings:\", error);\n      res.status(500).json({ message: \"Failed to process expired bookings\" });\n    }\n  });\n\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  // PAYMENT ROUTES - MOCK IMPLEMENTATION FOR TESTING\n  \n  // Create payment intent for secure payment processing (Mock version for testing)\n  app.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n    try {\n      const { bookingId, amount, currency = \"inr\" } = req.body;\n      \n      // Validate input\n      if (!bookingId || !amount || amount <= 0) {\n        return res.status(400).json({ message: \"Invalid booking ID or amount\" });\n      }\n      \n      // Verify booking belongs to user and get details\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      if (booking.userId !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized booking access\" });\n      }\n      \n      console.log(`Mock payment intent created for booking ${bookingId}, amount: ${amount}`);\n      \n      // Return mock client secret for testing\n      res.json({ \n        clientSecret: `pi_mock_${bookingId}_${Date.now()}_secret`,\n        paymentIntentId: `pi_mock_${bookingId}_${Date.now()}`\n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ \n        message: \"Error creating payment intent\",\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined\n      });\n    }\n  });\n\n  // Mock webhook endpoint for testing payment confirmation\n  app.post(\"/api/stripe-webhook\", async (req, res) => {\n    console.log(\"Mock webhook received\");\n    res.json({received: true});\n  });\n\n  // Mock payment success endpoint for testing\n  app.post(\"/api/test-payment-success\", isAuthenticated, async (req, res) => {\n    try {\n      const { \n        bookingId, \n        amount, \n        paymentMethod = 'mock_card',\n        discountAmount = 0,\n        discountReason = ''\n      } = req.body;\n      \n      if (!bookingId) {\n        return res.status(400).json({ message: \"Booking ID required\" });\n      }\n      \n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      if (booking.userId !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized booking access\" });\n      }\n      \n      // Calculate payment amounts with new discount\n      const currentPaidAmount = Number(booking.paidAmount || 0);\n      const currentDiscountAmount = Number(booking.discountAmount || 0);\n      const newDiscountAmount = Number(discountAmount || 0);\n      const totalAmount = Number(booking.totalAmount);\n      const paymentAmount = amount ? Number(amount) : (totalAmount - currentPaidAmount - newDiscountAmount);\n      const newPaidAmount = currentPaidAmount + paymentAmount;\n      \n      // Calculate the final amount due after applying discount\n      const finalAmountDue = totalAmount - newDiscountAmount;\n      \n      // Determine new payment status based on final amount due\n      let newPaymentStatus = 'pending';\n      console.log(`Payment status calculation: newPaidAmount (${newPaidAmount}) >= finalAmountDue (${finalAmountDue}) = ${newPaidAmount >= finalAmountDue}`);\n      \n      if (newPaidAmount >= finalAmountDue) {\n        newPaymentStatus = 'completed';\n        console.log('Setting status to completed');\n      } else if (newPaidAmount > 0) {\n        newPaymentStatus = 'partial';\n        console.log('Setting status to partial');\n      } else {\n        console.log('Setting status to pending');\n      }\n      \n      console.log(`Processing payment for booking ${bookingId}:`);\n      console.log(`- Total Amount: ₹${totalAmount}`);\n      console.log(`- Discount Applied: ₹${newDiscountAmount}`);\n      console.log(`- Final Amount Due: ₹${finalAmountDue}`);\n      console.log(`- Current Paid: ₹${currentPaidAmount}`);\n      console.log(`- Payment Amount: ₹${paymentAmount}`);\n      console.log(`- New Total Paid: ₹${newPaidAmount}`);\n      console.log(`- New Status: ${newPaymentStatus}`);\n      \n      // Update booking with new paid amount, discount, and status\n      const bookingUpdates: any = { \n        paidAmount: newPaidAmount,\n        paymentStatus: newPaymentStatus,\n        status: 'confirmed' \n      };\n      \n      // Only update discount if it's provided and different from current\n      if (newDiscountAmount > 0 && newDiscountAmount !== currentDiscountAmount) {\n        bookingUpdates.discountAmount = newDiscountAmount;\n        if (discountReason.trim()) {\n          bookingUpdates.discountReason = discountReason.trim();\n        }\n      }\n      \n      // Create payment record FIRST (before updating booking status)\n      const paymentData: any = {\n        bookingId: bookingId,\n        userId: req.user!.id,\n        amount: paymentAmount,\n        paymentMethod: paymentMethod,\n        transactionId: `mock_${bookingId}_${Date.now()}`,\n        status: 'completed',\n        processedAt: new Date(),\n      };\n      \n      // Add discount information to payment record if applicable\n      if (newDiscountAmount > 0) {\n        paymentData.discountAmount = newDiscountAmount;\n        paymentData.discountReason = discountReason.trim() || 'Admin discount';\n      }\n      \n      console.log(`Creating payment record first...`);\n      await storage.createPayment(paymentData);\n      \n      // Now update booking with payment status (validation will find the payment we just created)\n      console.log(`Final booking updates:`, JSON.stringify(bookingUpdates, null, 2));\n      await storage.updateBooking(bookingId, bookingUpdates);\n      console.log(`Booking ${bookingId} updated successfully with status: ${newPaymentStatus}`);\n      \n      console.log(`Mock payment completed for booking ${bookingId} with discount: ₹${newDiscountAmount}`);\n      \n      // Get the updated booking and payment details for receipt generation\n      const updatedBooking = await storage.getBookingDetails(bookingId);\n      const latestPayment = await storage.getPayments(bookingId);\n      const mostRecentPayment = latestPayment[0]; // First payment is most recent due to ordering\n      \n      console.log('Updated booking discount amount:', updatedBooking?.discountAmount);\n      \n      // Get time slot information from booking slots\n      const firstSlot = updatedBooking?.slots?.[0];\n      const timeSlot = firstSlot ? `${firstSlot.startTime}-${firstSlot.endTime}` : '00:00';\n      const bookingDate = firstSlot ? firstSlot.bookingDate : updatedBooking?.startDate;\n      \n      res.json({ \n        success: true,\n        message: \"Payment completed successfully\",\n        payment: {\n          id: mostRecentPayment?.id,\n          amount: paymentAmount,\n          paymentMethod: paymentMethod,\n          status: 'completed',\n          transactionId: paymentData.transactionId,\n          processedAt: new Date().toISOString()\n        },\n        booking: {\n          id: bookingId,\n          groundName: updatedBooking?.facilityName || 'Sports Facility',\n          sportName: updatedBooking?.facilityType || 'Sport Activity',\n          startDate: bookingDate,\n          bookingDate: bookingDate,\n          timeSlot: timeSlot,\n          participantCount: updatedBooking?.participantCount || 1,\n          totalAmount: totalAmount,\n          paidAmount: newPaidAmount,\n          discountAmount: updatedBooking?.discountAmount || newDiscountAmount\n        },\n        bookingId: bookingId,\n        amountPaid: paymentAmount,\n        discountApplied: newDiscountAmount,\n        newTotalPaid: newPaidAmount,\n        finalAmountDue: finalAmountDue,\n        paymentStatus: newPaymentStatus\n      });\n    } catch (error: any) {\n      console.error(\"Error processing mock payment:\", error);\n      res.status(500).json({ \n        message: \"Error processing payment\",\n        details: process.env.NODE_ENV === 'development' ? error.message : undefined\n      });\n    }\n  });\n\n  // Get payment status for a booking\n  app.get(\"/api/bookings/:bookingId/payment-status\", isAuthenticated, async (req, res) => {\n    try {\n      const bookingId = parseInt(req.params.bookingId);\n      \n      // Verify booking belongs to user\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      if (booking.userId !== req.user!.id && req.user!.role !== 'admin') {\n        return res.status(403).json({ message: \"Unauthorized booking access\" });\n      }\n      \n      res.json({\n        bookingId: bookingId,\n        paymentStatus: booking.paymentStatus,\n        totalAmount: booking.totalAmount,\n        paidAmount: booking.paidAmount || 0,\n        balanceDue: Number(booking.totalAmount) - Number(booking.paidAmount || 0)\n      });\n    } catch (error) {\n      console.error(\"Error fetching payment status:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment status\" });\n    }\n  });\n\n  // Auto-cancel expired pending bookings\n  const autoCancelExpiredBookings = async () => {\n    try {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0); // Start of today\n      \n      const expiredBookings = await storage.getExpiredPendingBookings(today);\n      \n      if (expiredBookings.length > 0) {\n        console.log(`Found ${expiredBookings.length} expired pending bookings to auto-cancel`);\n        \n        for (const booking of expiredBookings) {\n          await storage.updateBookingStatus(booking.id, 'cancelled');\n          console.log(`Auto-cancelled expired booking ID ${booking.id} (date: ${booking.bookingDate})`);\n        }\n        \n        return expiredBookings.length;\n      }\n      return 0;\n    } catch (error) {\n      console.error('Error auto-cancelling expired bookings:', error);\n      return 0;\n    }\n  };\n\n  // Admin Bookings Management Routes\n  app.get(\"/api/admin/bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n\n      // Auto-cancel expired pending bookings before fetching data\n      const cancelledCount = await autoCancelExpiredBookings();\n      if (cancelledCount > 0) {\n        console.log(`Auto-cancelled ${cancelledCount} expired pending bookings`);\n      }\n      \n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const status = req.query.status as string;\n      const search = req.query.search as string;\n      const sortBy = req.query.sortBy as string || 'date_desc';\n      \n      console.log(`Admin bookings request - page: ${page}, limit: ${limit}, status: ${status || 'all'}, sortBy: ${sortBy}`);\n      \n      // Get bookings with status filtering and sorting\n      const result = await storage.getAdminBookings({ page, limit, status, search, sortBy });\n      \n      console.log(`Found ${result.bookings.length} bookings (total: ${result.total})`);\n      \n      // Enhance with user and facility information\n      const enhancedBookings = await Promise.all(\n        result.bookings.map(async (booking) => {\n          try {\n            // Get user info\n            const user = await storage.getUserById(booking.userId);\n            \n            // Get ground info\n            const ground = await storage.getGroundById(booking.groundId);\n            \n            return {\n              ...booking,\n              userName: user?.username || 'Unknown User',\n              userEmail: user?.email || 'No email',\n              userPhone: user?.phone || '',\n              facilityName: ground?.name || `Ground ${booking.groundId}`,\n              facilityId: booking.groundId,\n              sportName: ground?.sportName || 'Unknown Sport'\n            };\n          } catch (error) {\n            console.error(`Error enhancing booking ${booking.id}:`, error);\n            return {\n              ...booking,\n              userName: 'Unknown User',\n              userEmail: 'No email',\n              userPhone: '',\n              facilityName: `Ground ${booking.groundId}`,\n              facilityId: booking.groundId,\n              sportName: 'Unknown Sport'\n            };\n          }\n        })\n      );\n      \n      res.json({\n        bookings: enhancedBookings,\n        total: result.total\n      });\n    } catch (error) {\n      console.error(\"Error fetching admin bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get(\"/api/admin/bookings/:id/slots\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const bookingId = parseInt(req.params.id);\n      const slots = await storage.getBookingSlots(bookingId);\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching booking slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking slots\" });\n    }\n  });\n\n  app.patch(\"/api/admin/bookings/:id\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n      \n      const bookingId = parseInt(req.params.id);\n      const { bookingStatus } = req.body;\n      \n      // Get current booking to check status\n      const currentBooking = await storage.getBookingById(bookingId);\n      if (!currentBooking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      // Check if booking is already in the target status\n      if (currentBooking.status === bookingStatus) {\n        return res.status(400).json({ \n          message: `Booking is already ${bookingStatus}`,\n          currentStatus: currentBooking.status,\n          paymentStatus: currentBooking.paymentStatus\n        });\n      }\n      \n      // Validate status transition\n      const validTransitions = {\n        'pending': ['confirmed', 'cancelled'],\n        'confirmed': ['completed', 'cancelled'],\n        'completed': [], // No transitions from completed\n        'cancelled': [] // No transitions from cancelled\n      };\n      \n      const allowedStatuses = validTransitions[currentBooking.status as keyof typeof validTransitions] || [];\n      if (!allowedStatuses.includes(bookingStatus)) {\n        return res.status(400).json({ \n          message: `Cannot change status from ${currentBooking.status} to ${bookingStatus}`,\n          allowedStatuses\n        });\n      }\n      \n      const updatedBooking = await storage.updateBookingStatus(bookingId, bookingStatus);\n      res.json({\n        ...updatedBooking,\n        message: `Booking status updated from ${currentBooking.status} to ${bookingStatus}`\n      });\n    } catch (error) {\n      console.error(\"Error updating booking:\", error);\n      res.status(500).json({ message: \"Failed to update booking\" });\n    }\n  });\n\n  // Manual endpoint to cancel expired bookings (for admin use)\n  app.post(\"/api/admin/cancel-expired-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n\n      const today = new Date();\n      today.setHours(0, 0, 0, 0); // Start of today\n      \n      const expiredBookings = await storage.getExpiredPendingBookings(today);\n      let cancelledCount = 0;\n      \n      if (expiredBookings.length > 0) {\n        console.log(`Found ${expiredBookings.length} expired pending bookings to cancel`);\n        \n        for (const booking of expiredBookings) {\n          await storage.updateBookingStatus(booking.id, 'cancelled');\n          \n          // Create notification for cancelled booking\n          await storage.createNotification({\n            userId: booking.userId,\n            bookingId: booking.id,\n            type: 'booking_auto_cancelled',\n            title: 'Booking Auto-Cancelled',\n            message: `Your booking for ${booking.bookingDate} was automatically cancelled as the booking date has passed and payment was not completed.`,\n            read: false\n          });\n          \n          cancelledCount++;\n          console.log(`Cancelled expired booking ID ${booking.id} and sent notification`);\n        }\n      }\n      \n      res.json({\n        message: `Successfully cancelled ${cancelledCount} expired pending bookings and sent notifications`,\n        cancelledCount,\n        totalChecked: expiredBookings.length\n      });\n    } catch (error) {\n      console.error(\"Error manually cancelling expired bookings:\", error);\n      res.status(500).json({ message: \"Failed to cancel expired bookings\" });\n    }\n  });\n\n  // Notification System Routes\n  app.get(\"/api/notifications\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const unreadOnly = req.query.unread === 'true';\n      \n      const notifications = await storage.getUserNotifications(userId, unreadOnly);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", isAuthenticated, async (req, res) => {\n    try {\n      const notificationId = parseInt(req.params.id);\n      await storage.markNotificationAsRead(notificationId);\n      res.json({ message: \"Notification marked as read\" });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Send booking reminders (automated task)\n  app.post(\"/api/admin/send-reminders\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n\n      const bookingsNeedingReminders = await storage.getBookingsNeedingReminders();\n      let remindersSent = 0;\n\n      for (const booking of bookingsNeedingReminders) {\n        // Check if reminder already sent\n        const alreadySent = await storage.hasReminderBeenSent(booking.id);\n        if (!alreadySent) {\n          // Create notification\n          await storage.createNotification({\n            userId: booking.userId,\n            bookingId: booking.id,\n            type: 'booking_reminder',\n            title: 'Booking Reminder',\n            message: `Don't forget your booking tomorrow at ${booking.facilityName} (${booking.sportName}) from ${booking.startTime} to ${booking.endTime}. ${booking.participantCount} participants.`,\n            read: false\n          });\n          \n          remindersSent++;\n          console.log(`Sent reminder for booking ${booking.id} to user ${booking.userId}`);\n        }\n      }\n\n      res.json({\n        message: `Sent ${remindersSent} booking reminders`,\n        remindersSent,\n        totalBookingsChecked: bookingsNeedingReminders.length\n      });\n    } catch (error) {\n      console.error(\"Error sending booking reminders:\", error);\n      res.status(500).json({ message: \"Failed to send booking reminders\" });\n    }\n  });\n\n  // User booking management routes\n  app.get(\"/api/user/upcoming-bookings\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const upcomingBookings = await storage.getUserUpcomingBookings(userId);\n      res.json(upcomingBookings);\n    } catch (error) {\n      console.error(\"Error fetching upcoming bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch upcoming bookings\" });\n    }\n  });\n\n\n\n  // Cancel booking with policy\n  app.post(\"/api/user/cancel-booking/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const bookingId = parseInt(req.params.id);\n      const userId = req.user.id;\n      const { reason } = req.body;\n\n      // Get booking details\n      const booking = await storage.getBookingDetails(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      if (booking.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      if (!['confirmed', 'pending'].includes(booking.status)) {\n        return res.status(400).json({ message: \"Cannot cancel this booking\" });\n      }\n\n      // Check cancellation policy (24 hours before)\n      const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime}`);\n      const now = new Date();\n      const hoursUntilBooking = (bookingDateTime.getTime() - now.getTime()) / (1000 * 60 * 60);\n      \n      let refundAmount = 0;\n      let cancellationFee = 0;\n      \n      if (hoursUntilBooking >= 24) {\n        // Full refund if cancelled 24+ hours before\n        refundAmount = parseFloat(booking.paidAmount || '0');\n      } else if (hoursUntilBooking >= 2) {\n        // 50% refund if cancelled 2-24 hours before\n        const totalPaid = parseFloat(booking.paidAmount || '0');\n        cancellationFee = totalPaid * 0.5;\n        refundAmount = totalPaid - cancellationFee;\n      } else {\n        // No refund if cancelled less than 2 hours before\n        cancellationFee = parseFloat(booking.paidAmount || '0');\n      }\n\n      // Update booking status\n      await storage.updateBookingStatus(bookingId, 'cancelled');\n\n      // Create notification\n      await storage.createNotification({\n        userId: userId,\n        bookingId: bookingId,\n        type: 'booking_cancelled',\n        title: 'Booking Cancelled',\n        message: `Your booking at ${booking.facilityName} on ${booking.bookingDate} has been cancelled. ${refundAmount > 0 ? `Refund amount: ₹${refundAmount}` : 'No refund applicable.'}`,\n        read: false\n      });\n\n      res.json({\n        message: \"Booking cancelled successfully\",\n        refundAmount,\n        cancellationFee,\n        hoursUntilBooking: Math.round(hoursUntilBooking * 100) / 100\n      });\n    } catch (error) {\n      console.error(\"Error cancelling booking:\", error);\n      res.status(500).json({ message: \"Failed to cancel booking\" });\n    }\n  });\n\n  // Booking Queue Routes\n  app.post(\"/api/queue/join\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const queueData = { ...req.body, userId };\n      const queueEntry = await storage.addToQueue(queueData);\n      \n      res.json({\n        success: true,\n        queueEntry,\n        message: `Added to waiting list (Position #${queueEntry.priority})`\n      });\n    } catch (error) {\n      console.error(\"Error joining queue:\", error);\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to join queue\" \n      });\n    }\n  });\n\n  app.get(\"/api/queue/user\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const queueRequests = await storage.getUserQueueRequests(userId);\n      res.json(queueRequests);\n    } catch (error) {\n      console.error(\"Error fetching user queue requests:\", error);\n      res.status(500).json({ error: \"Failed to fetch queue requests\" });\n    }\n  });\n\n  app.post(\"/api/queue/:queueId/book\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const queueId = parseInt(req.params.queueId);\n      const booking = await storage.convertQueueToBooking(queueId);\n      \n      res.json({\n        success: true,\n        booking,\n        message: \"Booking confirmed from waiting list!\"\n      });\n    } catch (error) {\n      console.error(\"Error converting queue to booking:\", error);\n      res.status(400).json({ \n        error: error instanceof Error ? error.message : \"Failed to convert queue to booking\" \n      });\n    }\n  });\n\n  app.delete(\"/api/queue/:queueId\", isAuthenticated, async (req, res) => {\n    try {\n      const userId = req.user.id;\n      const queueId = parseInt(req.params.queueId);\n      await storage.removeFromQueue(queueId);\n      \n      res.json({\n        success: true,\n        message: \"Removed from waiting list\"\n      });\n    } catch (error) {\n      console.error(\"Error removing from queue:\", error);\n      res.status(500).json({ error: \"Failed to remove from queue\" });\n    }\n  });\n\n  // Admin queue management\n  app.get(\"/api/admin/queue\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n\n      const { sportId, groundId, date, startTime, endTime } = req.query;\n      \n      if (sportId && groundId && date && startTime && endTime) {\n        const queueEntries = await storage.getQueueBySlot(\n          parseInt(sportId as string),\n          parseInt(groundId as string),\n          date as string,\n          startTime as string,\n          endTime as string\n        );\n        res.json(queueEntries);\n      } else {\n        // Return all active queue entries - implement later\n        res.json([]);\n      }\n    } catch (error) {\n      console.error(\"Error fetching queue entries:\", error);\n      res.status(500).json({ error: \"Failed to fetch queue entries\" });\n    }\n  });\n\n  app.post(\"/api/admin/queue/:queueId/offer\", isAuthenticated, async (req, res) => {\n    try {\n      if (req.user.role !== \"admin\" && req.user.role !== \"manager\") {\n        return res.status(403).json({ message: \"Admin or Manager access required\" });\n      }\n\n      const queueId = parseInt(req.params.queueId);\n      await storage.offerSlotToNextInQueue(queueId);\n      \n      res.json({\n        success: true,\n        message: \"Slot offered to next in queue\"\n      });\n    } catch (error) {\n      console.error(\"Error offering slot:\", error);\n      res.status(500).json({ error: \"Failed to offer slot\" });\n    }\n  });\n\n  // Receipt generation routes\n  app.post(\"/api/receipts/generate\", isAuthenticated, async (req, res) => {\n    try {\n      const { paymentId, sendSMS = false, sendEmail = false } = req.body;\n      \n      if (!paymentId) {\n        return res.status(400).json({ message: \"Payment ID is required\" });\n      }\n      \n      // Verify payment exists and user has access\n      const payment = await storage.getPaymentById(parseInt(paymentId));\n      if (!payment) {\n        return res.status(404).json({ message: \"Payment not found\" });\n      }\n      \n      const booking = await storage.getBookingDetails(payment.bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Associated booking not found\" });\n      }\n      \n      // Check if user owns the booking or is admin\n      if (booking.userId !== req.user.id && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const receiptResult = await generateAndSendReceipt(parseInt(paymentId), sendSMS, sendEmail);\n      res.json({\n        success: true,\n        receipt: receiptResult,\n        message: \"Receipt generated successfully\"\n      });\n    } catch (error) {\n      console.error(\"Error generating receipt:\", error);\n      res.status(500).json({ message: \"Failed to generate receipt\" });\n    }\n  });\n\n  app.get(\"/api/receipts/:paymentId/preview\", isAuthenticated, async (req, res) => {\n    try {\n      const paymentId = parseInt(req.params.paymentId);\n      \n      // Verify payment exists and user has access\n      const payment = await storage.getPaymentById(paymentId);\n      if (!payment) {\n        return res.status(404).json({ message: \"Payment not found\" });\n      }\n      \n      const booking = await storage.getBookingDetails(payment.bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Associated booking not found\" });\n      }\n      \n      // Check if user owns the booking or is admin\n      if (booking.userId !== req.user.id && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const receiptData = await generateReceiptData(paymentId);\n      const htmlContent = ReceiptGenerator.generateReceiptHTML(receiptData);\n      \n      res.setHeader('Content-Type', 'text/html');\n      res.send(htmlContent);\n    } catch (error) {\n      console.error(\"Error generating receipt preview:\", error);\n      res.status(500).json({ message: \"Failed to generate receipt preview\" });\n    }\n  });\n\n  // Get payment history for a booking\n  app.get(\"/api/bookings/:bookingId/payment-history\", isAuthenticated, async (req, res) => {\n    try {\n      const bookingId = parseInt(req.params.bookingId);\n      \n      // Verify booking exists and user has access\n      const booking = await storage.getBooking(bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n      \n      if (booking.userId !== req.user.id && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      // Get all payments for this booking\n      const payments = await storage.getPayments(bookingId);\n      \n      // Get booking details for context\n      const bookingDetails = await storage.getBookingDetails(bookingId);\n      \n      // Calculate correct amounts considering discount\n      const originalTotalAmount = Number(bookingDetails?.totalAmount || 0);\n      const discountAmount = Number(bookingDetails?.discountAmount || 0);\n      const paidAmount = Number(bookingDetails?.paidAmount || 0);\n      \n      // Total amount before discount (original booking amount)\n      const totalAmountBeforeDiscount = originalTotalAmount + discountAmount;\n      \n      // Net amount after discount (amount customer needs to pay)\n      const netAmount = originalTotalAmount;\n      \n      // Balance due (net amount - paid amount)\n      const balanceDue = Math.max(0, netAmount - paidAmount);\n\n      res.json({\n        bookingId,\n        bookingDetails: {\n          facilityName: bookingDetails?.facilityName || 'Sports Facility',\n          sportName: bookingDetails?.facilityType || 'Sport',\n          totalAmount: totalAmountBeforeDiscount, // Original amount before discount\n          discountAmount: discountAmount,\n          paidAmount: paidAmount,\n          netAmount: netAmount, // Amount after discount\n          balanceDue: balanceDue, // Remaining balance\n          paymentStatus: bookingDetails?.paymentStatus || 'pending'\n        },\n        payments\n      });\n    } catch (error) {\n      console.error(\"Error fetching payment history:\", error);\n      res.status(500).json({ message: \"Failed to fetch payment history\" });\n    }\n  });\n\n  app.get(\"/api/receipts/:paymentId/pdf\", isAuthenticated, async (req, res) => {\n    try {\n      const paymentId = parseInt(req.params.paymentId);\n      \n      // Verify payment exists and user has access\n      const payment = await storage.getPaymentById(paymentId);\n      if (!payment) {\n        return res.status(404).json({ message: \"Payment not found\" });\n      }\n      \n      const booking = await storage.getBookingDetails(payment.bookingId);\n      if (!booking) {\n        return res.status(404).json({ message: \"Associated booking not found\" });\n      }\n      \n      // Check if user owns the booking or is admin\n      if (booking.userId !== req.user.id && req.user.role !== 'admin') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n      \n      const receiptData = await generateReceiptData(paymentId);\n      const pdfBuffer = ReceiptGenerator.generateReceiptPDF(receiptData);\n      \n      res.setHeader('Content-Type', 'application/pdf');\n      res.setHeader('Content-Disposition', `attachment; filename=\"receipt-${receiptData.receiptId}.pdf\"`);\n      res.send(pdfBuffer);\n    } catch (error) {\n      console.error(\"Error generating receipt PDF:\", error);\n      res.status(500).json({ message: \"Failed to generate receipt PDF\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":82800},"server/seed.ts":{"content":"import { db } from './db';\nimport { facilities, users } from '@shared/schema';\n\nasync function seed() {\n  console.log('🌱 Seeding database...');\n\n  try {\n    // Seed demo users\n    await db.insert(users).values([\n      {\n        id: 'demo-client-001',\n        email: 'client@demo.com',\n        firstName: 'John',\n        lastName: 'Doe',\n        role: 'client',\n        phone: '+1234567890',\n        notificationPreferences: {\n          sms: true,\n          email: true,\n          marketing: false,\n        },\n      },\n      {\n        id: 'demo-admin-001',\n        email: 'admin@demo.com',\n        firstName: 'Admin',\n        lastName: 'User',\n        role: 'admin',\n        phone: '+1234567891',\n        notificationPreferences: {\n          sms: true,\n          email: true,\n          marketing: false,\n        },\n      },\n    ]).onConflictDoNothing();\n\n    // Seed facilities\n    await db.insert(facilities).values([\n      {\n        name: 'Badminton Court 1',\n        description: 'Professional indoor badminton court with premium flooring and lighting',\n        type: 'badminton',\n        capacity: 4,\n        hourlyRate: '25.00',\n        monthlyRate: '600.00',\n        yearlyRate: '6000.00',\n        imageUrl: 'https://images.unsplash.com/photo-1544947950-fa07a98d237f?w=500',\n        amenities: ['Air Conditioning', 'Premium Flooring', 'Professional Net', 'Racket Rental'],\n        operatingHours: {\n          monday: { open: '06:00', close: '22:00' },\n          tuesday: { open: '06:00', close: '22:00' },\n          wednesday: { open: '06:00', close: '22:00' },\n          thursday: { open: '06:00', close: '22:00' },\n          friday: { open: '06:00', close: '22:00' },\n          saturday: { open: '06:00', close: '22:00' },\n          sunday: { open: '06:00', close: '22:00' },\n        },\n      },\n      {\n        name: 'Soccer Field',\n        description: 'Full-size outdoor soccer field with natural grass',\n        type: 'soccer',\n        capacity: 22,\n        hourlyRate: '100.00',\n        monthlyRate: '2400.00',\n        yearlyRate: '24000.00',\n        imageUrl: 'https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=500',\n        amenities: ['Natural Grass', 'Floodlights', 'Goal Posts', 'Changing Rooms'],\n        operatingHours: {\n          monday: { open: '06:00', close: '22:00' },\n          tuesday: { open: '06:00', close: '22:00' },\n          wednesday: { open: '06:00', close: '22:00' },\n          thursday: { open: '06:00', close: '22:00' },\n          friday: { open: '06:00', close: '22:00' },\n          saturday: { open: '06:00', close: '22:00' },\n          sunday: { open: '06:00', close: '22:00' },\n        },\n      },\n      {\n        name: 'Basketball Court',\n        description: 'Indoor basketball court with professional standards',\n        type: 'basketball',\n        capacity: 10,\n        hourlyRate: '50.00',\n        monthlyRate: '1200.00',\n        yearlyRate: '12000.00',\n        imageUrl: 'https://images.unsplash.com/photo-1546519638-68e109498ffc?w=500',\n        amenities: ['Wooden Floor', 'Professional Hoops', 'Air Conditioning', 'Sound System'],\n        operatingHours: {\n          monday: { open: '06:00', close: '22:00' },\n          tuesday: { open: '06:00', close: '22:00' },\n          wednesday: { open: '06:00', close: '22:00' },\n          thursday: { open: '06:00', close: '22:00' },\n          friday: { open: '06:00', close: '22:00' },\n          saturday: { open: '06:00', close: '22:00' },\n          sunday: { open: '06:00', close: '22:00' },\n        },\n      },\n      {\n        name: 'Swimming Pool',\n        description: 'Olympic-size swimming pool with lane dividers',\n        type: 'swimming',\n        capacity: 50,\n        hourlyRate: '15.00',\n        monthlyRate: '300.00',\n        yearlyRate: '3000.00',\n        imageUrl: 'https://images.unsplash.com/photo-1530549387789-4c1017266635?w=500',\n        amenities: ['Olympic Size', 'Lane Dividers', 'Lifeguard', 'Changing Rooms', 'Lockers'],\n        operatingHours: {\n          monday: { open: '05:00', close: '21:00' },\n          tuesday: { open: '05:00', close: '21:00' },\n          wednesday: { open: '05:00', close: '21:00' },\n          thursday: { open: '05:00', close: '21:00' },\n          friday: { open: '05:00', close: '21:00' },\n          saturday: { open: '06:00', close: '20:00' },\n          sunday: { open: '06:00', close: '20:00' },\n        },\n      },\n      {\n        name: 'Tennis Court',\n        description: 'Hard court tennis facility with professional net',\n        type: 'tennis',\n        capacity: 4,\n        hourlyRate: '40.00',\n        monthlyRate: '960.00',\n        yearlyRate: '9600.00',\n        imageUrl: 'https://images.unsplash.com/photo-1595435742656-5773e8473e3c?w=500',\n        amenities: ['Hard Court', 'Professional Net', 'Floodlights', 'Ball Machine'],\n        operatingHours: {\n          monday: { open: '06:00', close: '22:00' },\n          tuesday: { open: '06:00', close: '22:00' },\n          wednesday: { open: '06:00', close: '22:00' },\n          thursday: { open: '06:00', close: '22:00' },\n          friday: { open: '06:00', close: '22:00' },\n          saturday: { open: '06:00', close: '22:00' },\n          sunday: { open: '06:00', close: '22:00' },\n        },\n      },\n      {\n        name: 'Cricket Ground',\n        description: 'Full-size cricket ground with professional pitch',\n        type: 'cricket',\n        capacity: 30,\n        hourlyRate: '150.00',\n        monthlyRate: '3600.00',\n        yearlyRate: '36000.00',\n        imageUrl: 'https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?w=500',\n        amenities: ['Natural Pitch', 'Boundary', 'Pavilion', 'Equipment Storage'],\n        operatingHours: {\n          monday: { open: '06:00', close: '18:00' },\n          tuesday: { open: '06:00', close: '18:00' },\n          wednesday: { open: '06:00', close: '18:00' },\n          thursday: { open: '06:00', close: '18:00' },\n          friday: { open: '06:00', close: '18:00' },\n          saturday: { open: '06:00', close: '18:00' },\n          sunday: { open: '06:00', close: '18:00' },\n        },\n      },\n    ]).onConflictDoNothing();\n\n    console.log('✅ Database seeded successfully!');\n  } catch (error) {\n    console.error('❌ Error seeding database:', error);\n  }\n}\n\n// Run seed if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seed().then(() => process.exit(0));\n}\n\nexport { seed };","size_bytes":6399},"server/storage.ts":{"content":"import {\n  users,\n  sports,\n  grounds,\n  plans,\n  timeSlots,\n  bookings,\n  bookingSlots,\n  payments,\n  coupons,\n  notifications,\n  bookingQueue,\n  type User,\n  type UpsertUser,\n  type Sport,\n  type InsertSport,\n  type Ground,\n  type InsertGround,\n  type Plan,\n  type InsertPlan,\n  type TimeSlot,\n  type InsertTimeSlot,\n  type Booking,\n  type InsertBooking,\n  type BookingSlot,\n  type InsertBookingSlot,\n  type Payment,\n  type InsertPayment,\n  type Coupon,\n  type InsertCoupon,\n  type Notification,\n  type InsertNotification,\n  type BookingQueue,\n  type InsertBookingQueue,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, asc, and, gte, lte, sql, or, count, sum, ne, lt, gt, inArray, like, ilike } from \"drizzle-orm\";\nimport { format } from \"date-fns\";\n\nexport interface IStorage {\n  // User operations (mandatory for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: any): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUser(id: string, data: Partial<User>): Promise<User>;\n  getUsers(options: { page: number; limit: number; role?: string; search?: string }): Promise<{ users: User[]; total: number }>;\n\n  // Sports Master operations\n  getSports(): Promise<Sport[]>;\n  getAllSports(): Promise<Sport[]>;\n  getSport(id: number): Promise<Sport | undefined>;\n  createSport(sport: InsertSport): Promise<Sport>;\n  updateSport(id: number, data: Partial<InsertSport>): Promise<Sport>;\n  deleteSport(id: number): Promise<void>;\n\n  // Grounds Master operations\n  getGrounds(): Promise<Ground[]>;\n  getAllGrounds(): Promise<Ground[]>;\n  getGround(id: number): Promise<Ground | undefined>;\n  getGroundsBySport(sportId: number): Promise<Ground[]>;\n  createGround(ground: InsertGround): Promise<Ground>;\n  updateGround(id: number, data: Partial<InsertGround>): Promise<Ground>;\n  deleteGround(id: number): Promise<void>;\n\n  // Plans Master operations\n  getPlans(): Promise<Plan[]>;\n  getAllPlans(): Promise<Plan[]>;\n  getPlan(id: number): Promise<Plan | undefined>;\n  getPlansByGround(groundId: number): Promise<Plan[]>;\n  createPlan(plan: InsertPlan): Promise<Plan>;\n  updatePlan(id: number, data: Partial<InsertPlan>): Promise<Plan>;\n  deletePlan(id: number): Promise<void>;\n\n  // Facility operations (now use master tables exclusively)\n  getFacilities(): Promise<any[]>;\n  getFacility(id: number): Promise<any | undefined>;\n  getPopularFacilities(): Promise<any[]>;\n  getFacilitySlots(facilityId: number, date?: string): Promise<any[]>;\n\n  // Booking operations\n  getBookings(userId?: string, options?: { page?: number; limit?: number; status?: string }): Promise<Booking[]>;\n  getBooking(id: number): Promise<Booking | undefined>;\n  getGroundById(id: number): Promise<Ground | undefined>;\n  getBookingDetails(id: number): Promise<any>;\n  getUserBookings(userId: string): Promise<Booking[]>;\n  getPendingPayments(userId: string): Promise<any[]>;\n  getBookingsForSlot(groundId: number, bookingDate: string, startTime: string): Promise<Booking[]>;\n  checkDuplicateBooking(userId: string, groundId: number, bookingDate: string, startTime: string): Promise<Booking[]>;\n  createBooking(booking: InsertBooking, slots: InsertBookingSlot[]): Promise<{ booking: Booking; slots: BookingSlot[] }>;\n  updateBooking(id: number, data: Partial<InsertBooking>): Promise<Booking>;\n  cancelBooking(id: number): Promise<Booking>;\n  \n  // Payment operations\n  createPayment(payment: InsertPayment): Promise<Payment>;\n  getAllPendingPayments(): Promise<any[]>;\n  getPayments(bookingId?: number): Promise<Payment[]>;\n  getAllPayments(): Promise<any[]>;\n  getAllUserPayments(userId: string): Promise<any[]>;\n  updatePaymentStatus(paymentId: number, status: string, notes?: string): Promise<Payment>;\n  updateBookingPaymentStatus(bookingId: number, status: string, transactionId?: string): Promise<void>;\n\n  // Coupon operations\n  getCoupons(): Promise<Coupon[]>;\n  getCoupon(code: string): Promise<Coupon | undefined>;\n  createCoupon(coupon: InsertCoupon): Promise<Coupon>;\n\n  // Admin operations\n  getDashboardStats(): Promise<any>;\n  getAdminBookings(options?: { page?: number; limit?: number; status?: string; search?: string; sortBy?: string }): Promise<{ bookings: any[]; total: number }>;\n  getBookingSlots(bookingId: number): Promise<BookingSlot[]>;\n  updateBookingStatus(id: number, status: string): Promise<Booking>;\n  updateBookingPayment(bookingId: number, paymentData: { paidAmount: string; paymentStatus: string; status: string }): Promise<Booking>;\n  \n  // Reports operations\n  getRevenueReport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]>;\n  getRevenueReportBySport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]>;\n  getFacilityUsageReport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]>;\n  getMemberBookingReport(userId?: string, startDate?: string, endDate?: string): Promise<any[]>;\n  getMemberPaymentReport(userId?: string, startDate?: string, endDate?: string): Promise<any[]>;\n  getCouponUsageReport(startDate?: string, endDate?: string): Promise<any[]>;\n\n  // Booking Queue operations\n  addToQueue(queueData: InsertBookingQueue): Promise<BookingQueue>;\n  getQueueBySlot(sportId: number, groundId: number, date: string, startTime: string, endTime: string): Promise<BookingQueue[]>;\n  getUserQueueRequests(userId: string): Promise<BookingQueue[]>;\n  processQueueOnCancellation(cancelledBookingId: number): Promise<void>;\n  offerSlotToNextInQueue(queueId: number): Promise<void>;\n  convertQueueToBooking(queueId: number): Promise<Booking>;\n  removeFromQueue(queueId: number): Promise<void>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(notificationId: number, userId: string): Promise<void>;\n  sendBookingReminders(): Promise<{ remindersSent: number; details: any[] }>;\n  sendPaymentReminders(): Promise<{ remindersSent: number; details: any[] }>;\n  processExpiredBookings(): Promise<{ cancelledBookings: number; details: any[] }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phone, phone));\n    return user;\n  }\n\n  async createUser(user: any): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async upsertUser(user: UpsertUser): Promise<User> {\n    const existingUser = await this.getUser(user.id);\n    if (existingUser) {\n      return await this.updateUser(user.id, user);\n    } else {\n      return await this.createUser(user);\n    }\n  }\n\n  async updateUser(id: string, data: Partial<User>): Promise<User> {\n    const [user] = await db.update(users).set(data).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getUsers(options: { page: number; limit: number; role?: string; search?: string }): Promise<{ users: any[]; total: number }> {\n    const { page, limit, role, search } = options;\n    const offset = (page - 1) * limit;\n\n    // Use Drizzle ORM instead of raw SQL for better parameter handling\n    let baseQuery = db.select({\n      id: users.id,\n      email: users.email,\n      firstName: users.firstName,\n      lastName: users.lastName,\n      phone: users.phone,\n      role: users.role,\n      isActive: users.isActive,\n      createdAt: users.createdAt,\n    }).from(users);\n\n    // Apply filters\n    const conditions = [];\n    if (role && role !== 'all') {\n      conditions.push(eq(users.role, role));\n    }\n    if (search) {\n      conditions.push(\n        or(\n          ilike(users.firstName, `%${search}%`),\n          ilike(users.lastName, `%${search}%`),\n          ilike(users.email, `%${search}%`)\n        )\n      );\n    }\n\n    if (conditions.length > 0) {\n      baseQuery = db.select({\n        id: users.id,\n        email: users.email,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        phone: users.phone,\n        role: users.role,\n        isActive: users.isActive,\n        createdAt: users.createdAt,\n      }).from(users).where(and(...conditions));\n    }\n\n    // Get paginated results\n    const usersList = await baseQuery\n      .orderBy(desc(users.createdAt))\n      .limit(limit)\n      .offset(offset);\n\n    // Get total count\n    let countQuery = db.select({ count: sql`count(*)` }).from(users);\n    if (conditions.length > 0) {\n      countQuery = db.select({ count: sql`count(*)` }).from(users).where(and(...conditions));\n    }\n    const countResult = await countQuery;\n    const total = parseInt(countResult[0].count as string) || 0;\n\n    // Calculate booking and payment statistics for each user using proper SQL joins\n    const userIds = usersList.map(user => user.id);\n    \n    // Get booking counts for all users at once\n    const bookingStats = await db\n      .select({\n        userId: bookings.userId,\n        count: sql`count(*)`\n      })\n      .from(bookings)\n      .where(inArray(bookings.userId, userIds))\n      .groupBy(bookings.userId);\n\n    // Get payment totals for all users at once\n    const paymentStats = await db\n      .select({\n        userId: payments.userId,\n        total: sql`COALESCE(SUM(${payments.amount}), 0)`\n      })\n      .from(payments)\n      .where(\n        and(\n          inArray(payments.userId, userIds),\n          eq(payments.status, 'completed')\n        )\n      )\n      .groupBy(payments.userId);\n\n    // Create lookup maps for performance\n    const bookingLookup = new Map(\n      bookingStats.map(stat => [stat.userId, parseInt(stat.count as string) || 0])\n    );\n    const paymentLookup = new Map(\n      paymentStats.map(stat => [stat.userId, parseFloat(stat.total as string) || 0])\n    );\n\n    // Map results with actual statistics\n    const usersWithStats = usersList.map(user => ({\n      ...user,\n      lastLogin: null, // Remove since not in schema\n      bookingsCount: bookingLookup.get(user.id) || 0,\n      totalSpent: paymentLookup.get(user.id) || 0\n    }));\n\n    return { users: usersWithStats, total };\n  }\n\n  // Sports Master operations\n  async getSports(): Promise<Sport[]> {\n    return await db.select().from(sports).where(eq(sports.isActive, true)).orderBy(asc(sports.sportName));\n  }\n\n  async getAllSports(): Promise<Sport[]> {\n    return await db.select({\n      id: sports.id,\n      sportId: sports.id,\n      sportName: sports.sportName,\n      sportCode: sports.sportCode,\n      description: sports.description,\n      bookingType: sports.bookingType,\n      imageUrl: sports.imageUrl,\n      isActive: sports.isActive,\n      createdAt: sports.createdAt,\n      modifiedAt: sports.modifiedAt\n    }).from(sports).where(eq(sports.isActive, true)).orderBy(asc(sports.sportName));\n  }\n\n  async getSport(id: number): Promise<Sport | undefined> {\n    const [sport] = await db.select().from(sports).where(eq(sports.id, id));\n    return sport;\n  }\n\n  async createSport(sport: InsertSport): Promise<Sport> {\n    const [newSport] = await db.insert(sports).values(sport).returning();\n    return newSport;\n  }\n\n  async updateSport(id: number, data: Partial<InsertSport>): Promise<Sport> {\n    const [sport] = await db.update(sports).set(data).where(eq(sports.id, id)).returning();\n    return sport;\n  }\n\n  async deleteSport(id: number): Promise<void> {\n    await db.update(sports).set({ isActive: false }).where(eq(sports.id, id));\n  }\n\n  // Grounds Master operations\n  async getGrounds(): Promise<Ground[]> {\n    return await db.select().from(grounds).where(eq(grounds.isActive, true)).orderBy(asc(grounds.groundName));\n  }\n\n  async getAllGrounds(): Promise<Ground[]> {\n    return await db.select({\n      id: grounds.id,\n      groundId: grounds.id,\n      sportId: grounds.sportId,\n      groundName: grounds.groundName,\n      groundCode: grounds.groundCode,\n      location: grounds.location,\n      facilities: grounds.facilities,\n      maxCapacity: grounds.maxCapacity,\n\n      imageUrl: grounds.imageUrl,\n      isActive: grounds.isActive,\n      createdAt: grounds.createdAt,\n      modifiedAt: grounds.modifiedAt\n    }).from(grounds).where(eq(grounds.isActive, true)).orderBy(asc(grounds.groundName));\n  }\n\n  async getGround(id: number): Promise<Ground | undefined> {\n    const [ground] = await db.select().from(grounds).where(eq(grounds.id, id));\n    return ground;\n  }\n\n  async getGroundsBySport(sportId: number): Promise<Ground[]> {\n    return await db.select().from(grounds)\n      .where(and(eq(grounds.sportId, sportId), eq(grounds.isActive, true)))\n      .orderBy(asc(grounds.groundName));\n  }\n\n  async createGround(ground: InsertGround): Promise<Ground> {\n    const [newGround] = await db.insert(grounds).values(ground).returning();\n    return newGround;\n  }\n\n  async updateGround(id: number, data: Partial<InsertGround>): Promise<Ground> {\n    const [ground] = await db.update(grounds).set(data).where(eq(grounds.id, id)).returning();\n    return ground;\n  }\n\n  async deleteGround(id: number): Promise<void> {\n    await db.update(grounds).set({ isActive: false }).where(eq(grounds.id, id));\n  }\n\n  // Plans Master operations\n  async getPlans(): Promise<Plan[]> {\n    return await db.select().from(plans).where(eq(plans.isActive, true)).orderBy(asc(plans.planName));\n  }\n\n  async getAllPlans(): Promise<Plan[]> {\n    return await db.select({\n      id: plans.id,\n      planId: plans.id,\n      groundId: plans.groundId,\n      planName: plans.planName,\n      planType: plans.planType,\n      durationDays: plans.durationDays,\n      basePrice: plans.basePrice,\n      peakHourMultiplier: plans.peakHourMultiplier,\n      weekendMultiplier: plans.weekendMultiplier,\n      description: plans.description,\n      operatingHours: plans.operatingHours,\n      isActive: plans.isActive,\n      createdAt: plans.createdAt,\n      modifiedAt: plans.modifiedAt,\n    }).from(plans).where(eq(plans.isActive, true)).orderBy(asc(plans.planName));\n  }\n\n  async getPlan(id: number): Promise<Plan | undefined> {\n    const [plan] = await db.select().from(plans).where(eq(plans.id, id));\n    return plan;\n  }\n\n  async getPlansByGround(groundId: number): Promise<Plan[]> {\n    return await db.select().from(plans)\n      .where(and(eq(plans.groundId, groundId), eq(plans.isActive, true)))\n      .orderBy(asc(plans.planName));\n  }\n\n  async createPlan(plan: InsertPlan): Promise<Plan> {\n    const [newPlan] = await db.insert(plans).values(plan).returning();\n    return newPlan;\n  }\n\n  async updatePlan(id: number, data: Partial<InsertPlan>): Promise<Plan> {\n    const [plan] = await db.update(plans).set(data).where(eq(plans.id, id)).returning();\n    return plan;\n  }\n\n  async deletePlan(id: number): Promise<void> {\n    await db.update(plans).set({ isActive: false }).where(eq(plans.id, id));\n  }\n\n  // Time Slots Master operations\n  async getTimeSlots(): Promise<TimeSlot[]> {\n    return await db.select().from(timeSlots).where(eq(timeSlots.isActive, true)).orderBy(asc(timeSlots.startTime));\n  }\n\n  async getAllTimeSlots(): Promise<TimeSlot[]> {\n    return await db.select().from(timeSlots).orderBy(asc(timeSlots.startTime));\n  }\n\n  async getTimeSlot(id: number): Promise<TimeSlot | undefined> {\n    const [timeSlot] = await db.select().from(timeSlots).where(eq(timeSlots.id, id));\n    return timeSlot;\n  }\n\n  async createTimeSlot(timeSlot: InsertTimeSlot): Promise<TimeSlot> {\n    const [newTimeSlot] = await db.insert(timeSlots).values(timeSlot).returning();\n    return newTimeSlot;\n  }\n\n  async updateTimeSlot(id: number, data: Partial<InsertTimeSlot>): Promise<TimeSlot> {\n    const [timeSlot] = await db.update(timeSlots).set(data).where(eq(timeSlots.id, id)).returning();\n    return timeSlot;\n  }\n\n  async deleteTimeSlot(id: number): Promise<void> {\n    await db.update(timeSlots).set({ isActive: false }).where(eq(timeSlots.id, id));\n  }\n\n  // Facility operations using master tables\n  async getFacilities(): Promise<any[]> {\n    try {\n      // Get raw data from database with proper column mapping\n      const groundsResult = await db.select().from(grounds).where(eq(grounds.isActive, true));\n      const sportsResult = await db.select().from(sports).where(eq(sports.isActive, true));\n      const plansResult = await db.select().from(plans).where(eq(plans.isActive, true));\n      \n      const facilities = groundsResult.map(ground => {\n        const sport = sportsResult.find(s => s.id === ground.sportId);\n        const groundPlans = plansResult.filter(p => p.groundId === ground.id);\n        \n        const hourlyPlan = groundPlans.find(p => p.planName?.toLowerCase().includes('hourly'));\n        const monthlyPlan = groundPlans.find(p => p.planName?.toLowerCase().includes('monthly'));\n        const yearlyPlan = groundPlans.find(p => p.planName?.toLowerCase().includes('yearly'));\n        \n        const hourlyRate = hourlyPlan ? Number(hourlyPlan.basePrice) : 0;\n        const monthlyRate = monthlyPlan ? Number(monthlyPlan.basePrice) : hourlyRate * 30;\n        const yearlyRate = yearlyPlan ? Number(yearlyPlan.basePrice) : hourlyRate * 365;\n        \n        return {\n          id: ground.id,\n          facilityId: ground.id,\n          groundId: ground.id,\n          name: ground.groundName,\n          type: sport?.sportName?.toLowerCase() || 'general',\n          description: sport?.description || ground.groundName,\n          capacity: ground.maxCapacity || 0,\n          hourlyRate: hourlyRate.toString(),\n          monthlyRate: monthlyRate.toString(),\n          yearlyRate: yearlyRate.toString(),\n          isActive: ground.isActive,\n          location: ground.location || '',\n          amenities: ground.facilities ? ground.facilities.split(',').map(a => a.trim()) : [],\n          images: ground.imageUrl ? [ground.imageUrl] : [],\n          createdAt: ground.createdAt,\n          updatedAt: ground.modifiedAt,\n          source: 'master',\n          sportName: sport?.sportName,\n          sportCode: sport?.sportCode,\n          groundCode: ground.groundCode,\n          bookingTypes: {\n            perPerson: sport?.bookingType === 'per-person' || sport?.bookingType === 'both',\n            fullGround: sport?.bookingType === 'full-ground' || sport?.bookingType === 'both'\n          },\n          plans: groundPlans.map(p => ({\n            id: p.id,\n            planId: p.id,\n            planName: p.planName,\n            planType: p.planType,\n            durationDays: p.durationDays || 1,\n            basePrice: Number(p.basePrice),\n            peakHourMultiplier: Number(p.peakHourMultiplier || 1),\n            weekendMultiplier: Number(p.weekendMultiplier || 1)\n          }))\n        };\n      });\n      \n      return facilities;\n    } catch (error) {\n      console.error(\"Error in getFacilities:\", error);\n      return [];\n    }\n  }\n\n  async getFacility(id: number): Promise<any | undefined> {\n    const facilities = await this.getFacilities();\n    return facilities.find(f => f.id === id || f.groundId === id || f.facilityId === id);\n  }\n\n  async getPopularFacilities(): Promise<any[]> {\n    const facilities = await this.getFacilities();\n    return facilities.slice(0, 6); // Return first 6 as popular\n  }\n\n  async getFacilitySlots(facilityId: number, date?: string): Promise<any[]> {\n    const targetDate = date || format(new Date(), 'yyyy-MM-dd');\n    console.log(`=== getFacilitySlots called for facility ${facilityId} on ${targetDate} ===`);\n    console.log(`=== RECEIVED DATE PARAMETER: ${date} ===`);\n    \n    // Get facility/ground details for capacity checking\n    const facility = await db.select().from(grounds).where(eq(grounds.id, facilityId)).limit(1);\n    if (!facility.length) return [];\n    \n    const ground = facility[0];\n    const maxCapacity = ground.maxCapacity || 0;\n    // Get sport details to determine booking type\n    const sportResult = await db.select().from(sports).where(eq(sports.id, ground.sportId)).limit(1);\n    const sport = sportResult[0];\n    const supportsPerPerson = sport?.bookingType === 'per-person' || sport?.bookingType === 'both';\n    \n    // Get existing bookings for this ground and date from bookings table \n    // For hourly bookings, check if the target date falls within start/end date range\n    const existingBookingsFromMain = await db.select({\n      participantCount: bookings.participantCount,\n      bookingType: bookings.bookingType,\n      status: bookings.status,\n      planType: bookings.planType,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate\n    }).from(bookings)\n      .where(and(\n        eq(bookings.groundId, facilityId),\n        ne(bookings.status, 'cancelled'),\n        lte(bookings.startDate, targetDate),\n        gte(bookings.endDate, targetDate)\n      ));\n\n    // Get booking slots for the exact date (hourly bookings)\n    const existingBookingsFromSlots = await db.select({\n      startTime: bookingSlots.startTime,\n      endTime: bookingSlots.endTime,\n      participantCount: bookingSlots.participantCount,\n      bookingType: bookings.bookingType,\n      status: bookings.status,\n      planType: bookings.planType,\n      bookingDate: bookingSlots.bookingDate\n    }).from(bookingSlots)\n      .innerJoin(bookings, eq(bookingSlots.bookingId, bookings.id))\n      .where(and(\n        eq(bookings.groundId, facilityId),\n        eq(bookingSlots.bookingDate, targetDate),\n        ne(bookings.status, 'cancelled')\n      ));\n\n    // Since we now create individual booking slots for monthly/yearly plans,\n    // we only need to check the exact date bookings from booking_slots table\n    // Main bookings table will contain the summary info, slots table has the daily records\n    const existingBookings = existingBookingsFromSlots;\n\n    console.log(`=== DETAILED BOOKING ANALYSIS FOR ${targetDate} ===`);\n    console.log(`Found ${existingBookingsFromMain.length} bookings from main table:`);\n    existingBookingsFromMain.forEach((b, i) => console.log(`  Main ${i+1}: ${b.startTime}-${b.endTime}, ${b.participantCount} participants, ${b.status}`));\n    console.log(`Found ${existingBookingsFromSlots.length} bookings from slots table:`);\n    existingBookingsFromSlots.forEach((b, i) => console.log(`  Slots ${i+1}: ${b.startTime}-${b.endTime}, ${b.participantCount} participants, ${b.status}`));\n    console.log(`Total combined bookings: ${existingBookings.length}`);\n    existingBookings.forEach((b, i) => console.log(`  Combined ${i+1}: ${b.startTime}-${b.endTime}, ${b.participantCount} participants, ${b.status}`));\n    console.log(`Ground details - maxCapacity: ${maxCapacity}, supportsPerPerson: ${supportsPerPerson}`);\n    \n    // Get time slot master data for peak hour information\n    const timeSlotsMaster = await db.select().from(timeSlots).where(eq(timeSlots.isActive, true));\n    \n    // Generate hourly slots from 6 AM to 10 PM\n    const slots = [];\n    for (let hour = 6; hour < 22; hour++) {\n      const startTime = `${hour.toString().padStart(2, '0')}:00:00`;\n      const endTime = `${(hour + 1).toString().padStart(2, '0')}:00:00`;\n      \n      // Find matching time slot from master table to get peak hour info\n      const masterSlot = timeSlotsMaster.find(ts => ts.startTime === startTime);\n      \n      // Check capacity for this time slot\n      let isAvailable = true;\n      let availableCapacity = maxCapacity;\n      let bookedCount = 0;\n      \n      // Calculate used capacity for this time slot\n      for (const booking of existingBookings) {\n        const bookingStart = booking.startTime;\n        const bookingEnd = booking.endTime;\n        \n        // Check if times overlap - booking overlaps with this slot if:\n        // booking starts before this slot ends AND booking ends after this slot starts\n        if (bookingStart && bookingEnd && \n            bookingStart < endTime && bookingEnd > startTime) {\n          console.log(`Time overlap found: booking ${bookingStart}-${bookingEnd} overlaps with slot ${startTime}-${endTime}`);\n          \n          if (booking.bookingType === 'full-ground') {\n            // Full ground booking makes the entire slot unavailable\n            isAvailable = false;\n            availableCapacity = 0;\n            bookedCount = maxCapacity;\n            break;\n          } else if (booking.bookingType === 'per-person' && supportsPerPerson) {\n            // Per-person booking reduces available capacity\n            bookedCount += booking.participantCount || 1;\n          } else if (booking.bookingType === 'per-person' && !supportsPerPerson) {\n            // This should not happen - per-person booking on a ground that doesn't support it\n            // Treat as full ground booking (entire slot unavailable)\n            isAvailable = false;\n            availableCapacity = 0;\n            bookedCount = maxCapacity;\n            break;\n          } else if (booking.bookingType === 'full-ground') {\n            // Full ground booking makes the entire slot unavailable regardless of ground type\n            isAvailable = false;\n            availableCapacity = 0;\n            bookedCount = maxCapacity;\n            break;\n          }\n        }\n      }\n      \n      // Update availability based on ground type and capacity\n      if (supportsPerPerson) {\n        // Per-person grounds: calculate remaining capacity\n        availableCapacity = Math.max(0, maxCapacity - bookedCount);\n        isAvailable = availableCapacity > 0;\n      } else {\n        // Full-ground only: if any booking exists for this time slot, the entire slot is unavailable\n        // Don't modify isAvailable/availableCapacity here as they're already set above when conflicts are found\n      }\n      console.log(`Slot ${startTime}-${endTime}: bookedCount=${bookedCount}, availableCapacity=${availableCapacity}, maxCapacity=${maxCapacity}, isAvailable=${isAvailable}, supportsPerPerson=${supportsPerPerson}`);\n      \n      \n      slots.push({\n        id: `${facilityId}-${targetDate}-${hour}`,\n        facilityId,\n        groundId: facilityId,\n        date: targetDate,\n        startTime: `${hour.toString().padStart(2, '0')}:00`,\n        endTime: `${(hour + 1).toString().padStart(2, '0')}:00`,\n        duration: 60,\n        isAvailable,\n        availableCapacity,\n        maxCapacity,\n        bookedCount,\n        supportsPerPerson,\n        peakHour: masterSlot?.isPeakHour || false, // Add peak hour information\n        price: \"100\"\n      });\n    }\n    \n    return slots;\n  }\n\n  // Booking operations\n  async getBookings(userId?: string, options?: { page?: number; limit?: number; status?: string }): Promise<Booking[]> {\n    let query = db.select().from(bookings);\n    \n    const conditions = [];\n    if (userId) {\n      conditions.push(eq(bookings.userId, userId));\n    }\n    \n    if (options?.status) {\n      conditions.push(eq(bookings.status, options.status));\n    }\n    \n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n    \n    return await query.orderBy(desc(bookings.createdAt));\n  }\n\n  async getBooking(id: number): Promise<Booking | undefined> {\n    const [booking] = await db.select().from(bookings).where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async getBookingDetails(id: number): Promise<any> {\n    const [booking] = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      sportId: bookings.sportId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      notes: bookings.notes,\n      duration: bookings.duration,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      isRecurring: bookings.isRecurring,\n      recurringEndDate: bookings.recurringEndDate,\n      createdAt: bookings.createdAt,\n      updatedAt: bookings.updatedAt,\n      // Ground and sport details from master tables\n      facilityName: grounds.groundName,\n      facilityType: sports.sportName,\n      // User details\n      firstName: users.firstName,\n      lastName: users.lastName,\n      email: users.email,\n      phone: users.phone\n    })\n    .from(bookings)\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(bookings.sportId, sports.id))\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .where(eq(bookings.id, id));\n    \n    if (booking) {\n      // Get booking slots  \n      const slots = await db.select().from(bookingSlots)\n        .where(eq(bookingSlots.bookingId, id))\n        .orderBy(asc(bookingSlots.bookingDate), asc(bookingSlots.startTime));\n      \n      return { ...booking, slots, participants: booking.participantCount };\n    }\n    \n    return booking;\n  }\n\n  async getPendingPayments(userId: string): Promise<any[]> {\n    const pendingBookingsData = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      sportId: bookings.sportId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      duration: bookings.duration,\n      createdAt: bookings.createdAt,\n      // Ground and sport details from master tables\n      facilityName: grounds.groundName,\n      facilityType: sports.sportName,\n      // User details\n      firstName: users.firstName,\n      lastName: users.lastName,\n      email: users.email,\n      phone: users.phone\n    })\n    .from(bookings)\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(bookings.sportId, sports.id))\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .where(and(\n      eq(bookings.userId, userId),\n      or(\n        eq(bookings.paymentStatus, 'pending'),\n        eq(bookings.paymentStatus, 'partial')\n      )\n    ))\n    .orderBy(desc(bookings.createdAt));\n\n    // Get slot details for each booking and format data for frontend\n    const formattedBookings = [];\n    \n    for (const booking of pendingBookingsData) {\n      // Get the first slot for display (for date/time info)\n      const slots = await db.select({\n        bookingDate: bookingSlots.bookingDate,\n        startTime: bookingSlots.startTime,\n        endTime: bookingSlots.endTime,\n        duration: bookingSlots.duration\n      })\n      .from(bookingSlots)\n      .where(eq(bookingSlots.bookingId, booking.id))\n      .orderBy(bookingSlots.bookingDate, bookingSlots.startTime)\n      .limit(1);\n\n      const firstSlot = slots[0];\n      const balanceDue = Number(booking.totalAmount) - Number(booking.paidAmount) - Number(booking.discountAmount);\n      \n      formattedBookings.push({\n        ...booking,\n        balanceDue,\n        participants: booking.participantCount,\n        // Add slot information for display\n        bookingDate: firstSlot?.bookingDate || booking.startDate,\n        startTime: firstSlot?.startTime || '00:00',\n        endTime: firstSlot?.endTime || '00:00',\n        duration: firstSlot?.duration || booking.duration || 0,\n        user: {\n          firstName: booking.firstName,\n          lastName: booking.lastName,\n          email: booking.email,\n          phone: booking.phone\n        }\n      });\n    }\n    \n    return formattedBookings;\n  }\n\n  async getAllUserPayments(userId: string): Promise<any[]> {\n    const allBookingsData = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      sportId: bookings.sportId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      duration: bookings.duration,\n      createdAt: bookings.createdAt,\n      // Ground and sport details from master tables\n      facilityName: grounds.groundName,\n      facilityType: sports.sportName,\n      // User details\n      firstName: users.firstName,\n      lastName: users.lastName,\n      email: users.email,\n      phone: users.phone\n    })\n    .from(bookings)\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(bookings.sportId, sports.id))\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .where(eq(bookings.userId, userId))\n    .orderBy(desc(bookings.createdAt));\n\n    // Get slot details for each booking and format data for frontend\n    const formattedBookings = [];\n    \n    for (const booking of allBookingsData) {\n      // Get the first slot for display (for date/time info)\n      const slots = await db.select({\n        bookingDate: bookingSlots.bookingDate,\n        startTime: bookingSlots.startTime,\n        endTime: bookingSlots.endTime,\n        duration: bookingSlots.duration\n      })\n      .from(bookingSlots)\n      .where(eq(bookingSlots.bookingId, booking.id))\n      .orderBy(bookingSlots.bookingDate, bookingSlots.startTime)\n      .limit(1);\n\n      const firstSlot = slots[0];\n      const balanceDue = Number(booking.totalAmount) - Number(booking.paidAmount) - Number(booking.discountAmount);\n      \n      formattedBookings.push({\n        ...booking,\n        balanceDue,\n        participants: booking.participantCount,\n        // Add slot information for display\n        bookingDate: firstSlot?.bookingDate || booking.startDate,\n        startTime: firstSlot?.startTime || '00:00',\n        endTime: firstSlot?.endTime || '00:00',\n        duration: firstSlot?.duration || booking.duration || 0,\n        user: {\n          firstName: booking.firstName,\n          lastName: booking.lastName,\n          email: booking.email,\n          phone: booking.phone\n        }\n      });\n    }\n    \n    return formattedBookings;\n  }\n\n  async getUserBookings(userId: string): Promise<any[]> {\n    // Get bookings with joined data from sports, grounds, and slots\n    const result = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      sportId: bookings.sportId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      duration: bookings.duration,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      notes: bookings.notes,\n      createdAt: bookings.createdAt,\n      updatedAt: bookings.updatedAt,\n      // Joined data\n      sportName: sports.sportName,\n      facilityName: grounds.groundName,\n      groundName: grounds.groundName,\n      // Get first slot data for display\n      bookingDate: sql<string>`(\n        SELECT booking_date::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n      startTime: sql<string>`(\n        SELECT start_time::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n      endTime: sql<string>`(\n        SELECT end_time::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n    })\n    .from(bookings)\n    .innerJoin(sports, eq(bookings.sportId, sports.id))\n    .innerJoin(grounds, eq(bookings.groundId, grounds.id))\n    .where(eq(bookings.userId, userId))\n    .orderBy(desc(bookings.createdAt));\n\n    return result;\n  }\n\n  async getGroundById(id: number): Promise<Ground | undefined> {\n    const [ground] = await db.select().from(grounds).where(eq(grounds.id, id));\n    return ground;\n  }\n\n  async getBookingsForSlot(groundId: number, bookingDate: string, startTime: string): Promise<Booking[]> {\n    // For hourly slots, check booking_slots table instead\n    const bookingIds = await db.select({\n      bookingId: bookingSlots.bookingId\n    }).from(bookingSlots)\n      .where(and(\n        eq(bookingSlots.bookingDate, bookingDate),\n        eq(bookingSlots.startTime, startTime)\n      ));\n    \n    if (bookingIds.length === 0) return [];\n    \n    return await db.select().from(bookings)\n      .where(and(\n        eq(bookings.groundId, groundId),\n        inArray(bookings.id, bookingIds.map(b => b.bookingId)),\n        ne(bookings.status, 'cancelled'),\n        ne(bookings.status, 'failed')\n      ));\n  }\n\n  async checkDuplicateBooking(userId: string, groundId: number, bookingDate: string, startTime: string): Promise<Booking[]> {\n    console.log(`=== CHECKING DUPLICATE BOOKING ===`);\n    console.log(`User: ${userId}, Ground: ${groundId}, Date: ${bookingDate}, Time: ${startTime}`);\n    \n    // Check for duplicates in booking_slots table with detailed logging\n    const bookingIds = await db.select({\n      bookingId: bookingSlots.bookingId,\n      bookingStatus: bookings.status,\n      slotDate: bookingSlots.bookingDate,\n      slotTime: bookingSlots.startTime\n    }).from(bookingSlots)\n      .innerJoin(bookings, eq(bookingSlots.bookingId, bookings.id))\n      .where(and(\n        eq(bookings.userId, userId),\n        eq(bookings.groundId, groundId),\n        eq(bookingSlots.bookingDate, bookingDate),\n        eq(bookingSlots.startTime, startTime),\n        ne(bookings.status, 'cancelled'),\n        ne(bookings.status, 'failed')\n      ));\n    \n    console.log(`Found ${bookingIds.length} potential duplicate bookings:`, bookingIds);\n    \n    if (bookingIds.length === 0) return [];\n    \n    const duplicateBookings = await db.select().from(bookings)\n      .where(inArray(bookings.id, bookingIds.map(b => b.bookingId)));\n    \n    console.log(`Returning ${duplicateBookings.length} actual duplicate bookings`);\n    return duplicateBookings;\n  }\n\n\n\n  async createBooking(booking: InsertBooking, slots: InsertBookingSlot[]): Promise<{ booking: Booking; slots: BookingSlot[] }> {\n    const result = await db.transaction(async (tx) => {\n      // Get ground details to determine sportId if not provided\n      const ground = await tx.select().from(grounds).where(eq(grounds.id, booking.groundId)).limit(1);\n      if (!ground.length) {\n        throw new Error(`Ground with ID ${booking.groundId} not found`);\n      }\n      \n      // Set sportId from ground if not provided\n      const bookingWithSportId = {\n        ...booking,\n        sportId: booking.sportId || ground[0].sportId\n      };\n      \n      // Get sport details to determine booking type\n      const sportResult = await tx.select().from(sports).where(eq(sports.id, ground[0].sportId)).limit(1);\n      const sport = sportResult[0];\n      const supportsPerPerson = sport?.bookingType === 'per-person' || sport?.bookingType === 'both';\n      const maxCapacity = ground[0].maxCapacity || 0;\n      \n      for (const slot of slots) {\n        // Get existing bookings from booking_slots table (primary source of truth for capacity)\n        const existingSlotBookings = await tx.select({\n          participantCount: bookingSlots.participantCount,\n          bookingType: bookings.bookingType,\n          bookingId: bookings.id\n        }).from(bookingSlots)\n          .innerJoin(bookings, eq(bookingSlots.bookingId, bookings.id))\n          .where(and(\n            eq(bookings.groundId, booking.groundId),\n            eq(bookingSlots.bookingDate, slot.bookingDate),\n            eq(bookingSlots.startTime, slot.startTime),\n            ne(bookings.status, 'cancelled')\n          ));\n\n        // Use only slot bookings to avoid double-counting\n        const allExistingBookings = existingSlotBookings;\n\n        if (booking.bookingType === 'full-ground') {\n          // Full-ground booking: check if slot is already booked\n          if (allExistingBookings.length > 0) {\n            throw new Error(`Time slot ${slot.startTime} is already booked and unavailable for full-ground booking`);\n          }\n        } else if (booking.bookingType === 'per-person') {\n          if (!supportsPerPerson) {\n            // Ground doesn't support per-person, check if any booking exists\n            if (allExistingBookings.length > 0) {\n              throw new Error(`Time slot ${slot.startTime} is already booked and this ground only supports full-ground bookings`);\n            }\n          } else {\n            // Per-person ground: check capacity\n            let usedCapacity = 0;\n            for (const existing of allExistingBookings) {\n              if (existing.bookingType === 'full-ground') {\n                throw new Error(`Time slot ${slot.startTime} is fully booked for full-ground`);\n              }\n              usedCapacity += existing.participantCount || 1;\n            }\n            \n            const requestedCapacity = booking.participantCount || 1;\n            const availableCapacity = Math.max(0, maxCapacity - usedCapacity);\n            \n            console.log(`Capacity check for ${slot.startTime}: used=${usedCapacity}, max=${maxCapacity}, available=${availableCapacity}, requested=${requestedCapacity}`);\n            \n            if (requestedCapacity > availableCapacity) {\n              throw new Error(`Not enough capacity for ${slot.startTime}. Available: ${availableCapacity}, Requested: ${requestedCapacity}. Try booking fewer participants or choose a different time slot.`);\n            }\n          }\n        }\n      }\n      \n      // Create the main booking record\n      const [newBooking] = await tx.insert(bookings).values(bookingWithSportId).returning();\n      \n      console.log(`=== CREATING BOOKING SLOTS ===`);\n      console.log(`Created booking ID: ${newBooking.id}`);\n      console.log(`Received ${slots.length} slots to create`);\n      \n      // Create booking slots with participant count\n      const slotsWithBookingId = slots.map((slot, index) => ({\n        ...slot,\n        bookingId: newBooking.id,\n        participantCount: booking.participantCount // Store participant count in each slot\n      }));\n      \n      console.log(`Prepared ${slotsWithBookingId.length} slots with booking ID`);\n      console.log(`First slot: ${JSON.stringify(slotsWithBookingId[0])}`);\n      console.log(`Last slot: ${JSON.stringify(slotsWithBookingId[slotsWithBookingId.length - 1])}`);\n      \n      const newSlots = await tx.insert(bookingSlots).values(slotsWithBookingId).returning();\n      \n      console.log(`Successfully created ${newSlots.length} booking slots`);\n      \n      return { booking: newBooking, slots: newSlots };\n    });\n    \n    return result;\n  }\n\n  async updateBooking(id: number, data: Partial<InsertBooking>): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return booking;\n  }\n\n  async cancelBooking(id: number): Promise<Booking> {\n    const [booking] = await db\n      .update(bookings)\n      .set({ status: 'cancelled', updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    \n    return booking;\n  }\n\n  // Payment operations\n  async createPayment(payment: InsertPayment): Promise<Payment> {\n    const [newPayment] = await db.insert(payments).values(payment).returning();\n    \n    // CRITICAL: Sync booking payment data when new payment is created\n    if (newPayment && newPayment.bookingId) {\n      await this.syncBookingPaymentData(newPayment.bookingId);\n    }\n    \n    return newPayment;\n  }\n\n  async getPayments(bookingId?: number): Promise<Payment[]> {\n    if (bookingId) {\n      return await db.select().from(payments)\n        .where(eq(payments.bookingId, bookingId))\n        .orderBy(desc(payments.createdAt));\n    }\n    \n    return await db.select().from(payments)\n      .orderBy(desc(payments.createdAt));\n  }\n\n  async getAllPendingPayments(): Promise<any[]> {\n    const results = await db.select({\n      id: payments.id,\n      userId: payments.userId,\n      bookingId: payments.bookingId,\n      amount: payments.amount,\n      paymentMethod: payments.paymentMethod,\n      status: payments.status,\n      createdAt: payments.createdAt,\n      firstName: users.firstName,\n      lastName: users.lastName,\n      email: users.email\n    })\n    .from(payments)\n    .leftJoin(users, eq(payments.userId, users.id))\n    .where(inArray(payments.status, ['pending', 'partial']))\n    .orderBy(desc(payments.createdAt));\n\n    return results;\n  }\n\n  async getAllPayments(): Promise<any[]> {\n    const result = await db.select({\n      id: payments.id,\n      bookingId: payments.bookingId,\n      userId: payments.userId,\n      amount: payments.amount,\n      paymentMethod: payments.paymentMethod,\n      transactionId: payments.transactionId,\n      status: payments.status,\n      discountAmount: payments.discountAmount,\n      discountReason: payments.discountReason,\n      processedAt: payments.processedAt,\n      createdAt: payments.createdAt,\n      userName: users.firstName,\n      userEmail: users.email,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate\n    })\n    .from(payments)\n    .leftJoin(users, eq(payments.userId, users.id))\n    .leftJoin(bookings, eq(payments.bookingId, bookings.id))\n    .orderBy(desc(payments.createdAt));\n\n    return result;\n  }\n\n  // Get all pending bookings (awaiting approval OR have outstanding payments)\n  async getAllPendingBookings(): Promise<any[]> {\n    const result = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      createdAt: bookings.createdAt,\n      userName: users.firstName,\n      userEmail: users.email,\n      userPhone: users.phone,\n      groundName: grounds.groundName,\n      sportName: sports.sportName\n    })\n    .from(bookings)\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(grounds.sportId, sports.id))\n    .where(\n      // Only confirmed bookings with outstanding payments (no approval delays)\n      and(\n        eq(bookings.status, 'confirmed'),\n        inArray(bookings.paymentStatus, ['pending', 'partial'])\n      )\n    )\n    .orderBy(desc(bookings.createdAt));\n\n    // Format data for frontend with facility name and balance calculations\n    return result.map(booking => {\n      const pendingAmount = Number(booking.totalAmount) - Number(booking.paidAmount) - Number(booking.discountAmount);\n      return {\n        ...booking,  \n        facilityName: `${booking.sportName} - ${booking.groundName}`,\n        pendingAmount, // Use pendingAmount to match frontend interface\n        balanceDue: pendingAmount, // Keep balanceDue for backward compatibility\n        participants: booking.participantCount,\n        // Get first booking slot for date/time display\n        bookingDate: booking.startDate, // Use startDate as primary booking date\n        startTime: '06:00:00', // Default time - will be overridden by actual slot data\n        endTime: '07:00:00', // Default time - will be overridden by actual slot data\n        user: {\n          firstName: booking.userName,\n          lastName: '', // Only first name available from this query\n          email: booking.userEmail,\n          phone: booking.userPhone\n        }\n      };\n    });\n  }\n\n  // Get pending payments only (confirmed bookings with outstanding payments)\n  async getUserPendingPayments(userId?: string): Promise<any[]> {\n    let query = db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      groundId: bookings.groundId,\n      sportId: bookings.sportId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      createdAt: bookings.createdAt,\n      userName: users.firstName,\n      userEmail: users.email,\n      userPhone: users.phone,\n      groundName: grounds.groundName,\n      sportName: sports.sportName\n    })\n    .from(bookings)\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(bookings.sportId, sports.id))\n    .where(and(\n      // Only confirmed bookings with payment issues\n      eq(bookings.status, 'confirmed'),\n      inArray(bookings.paymentStatus, ['pending', 'partial']),\n      userId ? eq(bookings.userId, userId) : undefined\n    ));\n\n    const result = await query.orderBy(desc(bookings.createdAt));\n    \n    // Format data for frontend\n    return result.map(booking => {\n      const balanceDue = Number(booking.totalAmount) - Number(booking.paidAmount) - Number(booking.discountAmount);\n      return {\n        ...booking,  \n        facilityName: `${booking.sportName} - ${booking.groundName}`,\n        balanceDue,\n        participants: booking.participantCount,\n        user: {\n          firstName: booking.userName,\n          lastName: '', \n          email: booking.userEmail,\n          phone: booking.userPhone\n        }\n      };\n    });\n  }\n\n  async updatePaymentStatus(paymentId: number, status: string, notes?: string): Promise<Payment> {\n    const updateData: any = { status };\n    if (notes) {\n      updateData.paymentGatewayResponse = { notes };\n    }\n    \n    const [updatedPayment] = await db.update(payments)\n      .set(updateData)\n      .where(eq(payments.id, paymentId))\n      .returning();\n    \n    // CRITICAL: Sync booking payment data when payment status changes\n    if (updatedPayment && updatedPayment.bookingId) {\n      await this.syncBookingPaymentData(updatedPayment.bookingId);\n    }\n      \n    return updatedPayment;\n  }\n\n  // Helper function to sync booking payment data with actual payments\n  async syncBookingPaymentData(bookingId: number): Promise<void> {\n    try {\n      // Get booking details\n      const booking = await this.getBookingDetails(bookingId);\n      if (!booking) return;\n\n      // Get all completed payments for this booking\n      const allPayments = await this.getPayments(bookingId);\n      const totalPaid = allPayments\n        .filter(p => p.status === 'completed')\n        .reduce((sum, p) => sum + Number(p.amount), 0);\n      \n      const totalAmount = Number(booking.totalAmount);\n      \n      // Determine payment status\n      let paymentStatus;\n      let bookingStatus = booking.status;\n      \n      if (totalPaid >= totalAmount) {\n        paymentStatus = 'completed';\n        bookingStatus = 'confirmed';\n      } else if (totalPaid > 0) {\n        paymentStatus = 'partial';\n        // Keep existing booking status for partial payments unless it's pending\n        if (booking.status === 'pending') {\n          bookingStatus = 'confirmed';\n        }\n      } else {\n        paymentStatus = 'pending';\n        // Set to pending only if no payments exist\n        bookingStatus = 'pending';\n      }\n      \n      // Update booking with correct amounts and status\n      await this.updateBookingPayment(bookingId, {\n        paidAmount: totalPaid.toString(),\n        paymentStatus: paymentStatus,\n        status: bookingStatus\n      });\n    } catch (error) {\n      console.error(`Error syncing booking payment data for booking ${bookingId}:`, error);\n      // Don't throw error - this is a sync operation that shouldn't break the main flow\n    }\n  }\n\n  async updateBookingPaymentStatus(bookingId: number, status: string, transactionId?: string): Promise<void> {\n    // CRITICAL FIX: Always sync payment data based on actual payment records\n    // instead of blindly setting payment status\n    console.log(`WARNING: updateBookingPaymentStatus called for booking ${bookingId} with status ${status}`);\n    console.log('Using syncBookingPaymentData instead to maintain data integrity');\n    \n    // Use the safer sync method that calculates status from actual payments\n    await this.syncBookingPaymentData(bookingId);\n    \n    // If transactionId is provided, we can update that separately\n    if (transactionId) {\n      await db.update(bookings)\n        .set({ paymentMethod: transactionId }) // Store transaction ID as payment method reference\n        .where(eq(bookings.id, bookingId));\n      console.log(`Updated booking ${bookingId} with transaction reference: ${transactionId}`);\n    }\n  }\n\n  // Coupon operations\n  async getCoupons(): Promise<Coupon[]> {\n    return await db.select().from(coupons).orderBy(desc(coupons.createdAt));\n  }\n\n  async getCoupon(code: string): Promise<Coupon | undefined> {\n    const [coupon] = await db.select().from(coupons).where(eq(coupons.code, code));\n    return coupon;\n  }\n\n  async createCoupon(coupon: InsertCoupon): Promise<Coupon> {\n    const [newCoupon] = await db.insert(coupons).values(coupon).returning();\n    return newCoupon;\n  }\n\n  // Update past confirmed bookings to completed status with payment validation\n  async updatePastBookingsToCompleted(): Promise<{ updated: number; skipped: number; issues: string[] }> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    try {\n      // Find all confirmed bookings that are in the past with payment details\n      const pastConfirmedBookings = await db\n        .select({\n          bookingId: bookings.id,\n          bookingDate: bookingSlots.bookingDate,\n          totalAmount: bookings.totalAmount,\n          paidAmount: bookings.paidAmount,\n          paymentStatus: bookings.paymentStatus,\n          userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          userEmail: users.email\n        })\n        .from(bookings)\n        .innerJoin(bookingSlots, eq(bookings.id, bookingSlots.bookingId))\n        .innerJoin(users, eq(bookings.userId, users.id))\n        .where(and(\n          eq(bookings.status, 'confirmed'),\n          lt(bookingSlots.bookingDate, today)\n        ));\n\n      if (pastConfirmedBookings.length === 0) {\n        return { updated: 0, skipped: 0, issues: [] };\n      }\n\n      // Get unique booking IDs and validate payments\n      const uniqueBookings = Array.from(\n        new Map(pastConfirmedBookings.map(b => [b.bookingId, b])).values()\n      );\n\n      const safeToComplete: number[] = [];\n      const paymentIssues: string[] = [];\n      let skippedCount = 0;\n\n      for (const booking of uniqueBookings) {\n        const totalAmount = Number(booking.totalAmount);\n        const paidAmount = Number(booking.paidAmount);\n        const paymentGap = totalAmount - paidAmount;\n\n        if (paymentGap > 0) {\n          // Has outstanding payment - skip this booking\n          skippedCount++;\n          paymentIssues.push(\n            `Booking ID ${booking.bookingId} (${booking.userName}): ₹${paymentGap} outstanding (₹${paidAmount}/₹${totalAmount} paid)`\n          );\n          console.warn(`Skipping booking ${booking.bookingId} - Outstanding payment: ₹${paymentGap}`);\n        } else {\n          // Fully paid - safe to complete\n          safeToComplete.push(booking.bookingId);\n        }\n      }\n\n      let updatedCount = 0;\n      if (safeToComplete.length > 0) {\n        // Update only fully paid bookings to completed\n        await db\n          .update(bookings)\n          .set({ \n            status: 'completed',\n            updatedAt: new Date()\n          })\n          .where(inArray(bookings.id, safeToComplete));\n\n        updatedCount = safeToComplete.length;\n        console.log(`Updated ${updatedCount} fully paid past bookings to completed status`);\n      }\n\n      if (skippedCount > 0) {\n        console.log(`Skipped ${skippedCount} bookings with outstanding payments`);\n      }\n\n      return {\n        updated: updatedCount,\n        skipped: skippedCount,\n        issues: paymentIssues\n      };\n    } catch (error) {\n      console.error('Error updating past bookings to completed:', error);\n      return { updated: 0, skipped: 0, issues: [`Database error: ${(error as any).message}`] };\n    }\n  }\n\n  // Get all upcoming bookings for admin dashboard (all users)\n  async getAllUpcomingBookings(): Promise<any[]> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // Get upcoming bookings from booking_slots table (more accurate)\n    const upcomingBookings = await db\n      .select({\n        id: bookings.id,\n        bookingDate: bookingSlots.bookingDate,\n        startTime: bookingSlots.startTime,\n        endTime: bookingSlots.endTime,\n        status: bookings.status,\n        totalAmount: bookings.totalAmount,\n        paidAmount: bookings.paidAmount,\n        paymentStatus: bookings.paymentStatus,\n        participantCount: bookings.participantCount,\n        // User information\n        userName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n        userEmail: users.email,\n        userPhone: users.phone,\n        // Facility information\n        facilityName: sql<string>`CONCAT(${sports.sportName}, ' - ', ${grounds.groundName})`,\n        sportName: sports.sportName,\n        groundName: grounds.groundName,\n        createdAt: bookings.createdAt\n      })\n      .from(bookings)\n      .innerJoin(bookingSlots, eq(bookings.id, bookingSlots.bookingId))\n      .innerJoin(users, eq(bookings.userId, users.id))\n      .innerJoin(grounds, eq(bookings.groundId, grounds.id))\n      .innerJoin(sports, eq(bookings.sportId, sports.id))\n      .where(and(\n        gte(bookingSlots.bookingDate, today),\n        inArray(bookings.status, ['confirmed', 'pending'])\n      ))\n      .orderBy(asc(bookingSlots.bookingDate), asc(bookingSlots.startTime))\n      .limit(20); // Limit to 20 upcoming bookings for dashboard\n\n    return upcomingBookings;\n  }\n\n  // Admin operations\n  async getDashboardStats(): Promise<any> {\n    const today = new Date();\n    const todayStr = today.toISOString().split('T')[0];\n    const currentTime = today.toTimeString().split(' ')[0]; // HH:MM:SS format\n    \n    const [\n      todayBookingsResult,\n      totalBookingsResult,\n      todayRevenueResult,\n      totalRevenueResult,\n      activeUsersResult,\n      activeGroundsResult,\n      confirmedBookingsResult,\n      pendingBookingsResult,\n      cancelledBookingsResult,\n      completedBookingsResult,\n      liveSessionsResult\n    ] = await Promise.all([\n      db.select({ count: count() })\n        .from(bookingSlots)\n        .where(eq(bookingSlots.bookingDate, todayStr)),\n      db.select({ count: count() }).from(bookings),\n      db.select({ sum: sum(payments.amount) })\n        .from(payments)\n        .where(and(\n          eq(payments.status, 'completed'),\n          eq(sql`DATE(${payments.createdAt})`, todayStr)\n        )),\n      db.select({ sum: sum(payments.amount) })\n        .from(payments)\n        .where(eq(payments.status, 'completed')),\n      db.select({ count: count() })\n        .from(users)\n        .where(eq(users.isActive, true)),\n      db.select({ count: count() })\n        .from(grounds)\n        .where(eq(grounds.isActive, true)),\n      db.select({ count: count() })\n        .from(bookings)\n        .where(eq(bookings.status, 'confirmed')),\n      db.select({ count: count() })\n        .from(bookings)\n        .where(eq(bookings.status, 'pending')),\n      db.select({ count: count() })\n        .from(bookings)\n        .where(eq(bookings.status, 'cancelled')),\n      db.select({ count: count() })\n        .from(bookings)\n        .where(eq(bookings.status, 'completed')),\n      // Live sessions: confirmed bookings happening right now\n      db.select({ count: count() })\n        .from(bookingSlots)\n        .innerJoin(bookings, eq(bookingSlots.bookingId, bookings.id))\n        .where(and(\n          eq(bookingSlots.bookingDate, todayStr),\n          eq(bookings.status, 'confirmed'),\n          lte(bookingSlots.startTime, currentTime),\n          gte(bookingSlots.endTime, currentTime)\n        ))\n    ]);\n\n    return {\n      todayBookings: todayBookingsResult[0]?.count || 0,\n      totalBookings: totalBookingsResult[0]?.count || 0,\n      todayRevenue: Number(todayRevenueResult[0]?.sum || 0),\n      totalRevenue: Number(totalRevenueResult[0]?.sum || 0),\n      activeUsers: activeUsersResult[0]?.count || 0,\n      activeGrounds: activeGroundsResult[0]?.count || 0,\n      confirmed: confirmedBookingsResult[0]?.count || 0,\n      pending: pendingBookingsResult[0]?.count || 0,\n      cancelled: cancelledBookingsResult[0]?.count || 0,\n      completed: completedBookingsResult[0]?.count || 0,\n      liveSessions: liveSessionsResult[0]?.count || 0\n    };\n  }\n\n  async getAdminBookings(options?: { page?: number; limit?: number; status?: string; search?: string; sortBy?: string }): Promise<{ bookings: any[]; total: number }> {\n    const { page = 1, limit = 10, status, search, sortBy = 'date_desc' } = options || {};\n    const offset = (page - 1) * limit;\n\n    console.log(`getAdminBookings called with options:`, { page, limit, status, search, sortBy });\n\n    // Enhanced query with user and facility data joined\n    let query = db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      sportId: bookings.sportId,\n      groundId: bookings.groundId,\n      bookingType: bookings.bookingType,\n      planType: bookings.planType,\n      startDate: bookings.startDate,\n      endDate: bookings.endDate,\n      duration: bookings.duration,\n      participantCount: bookings.participantCount,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      discountAmount: bookings.discountAmount,\n      status: bookings.status,\n      paymentStatus: bookings.paymentStatus,\n      paymentMethod: bookings.paymentMethod,\n      isRecurring: bookings.isRecurring,\n      recurringEndDate: bookings.recurringEndDate,\n      notes: bookings.notes,\n      createdAt: bookings.createdAt,\n      updatedAt: bookings.updatedAt,\n      // User information mapped to expected field names\n      firstName: users.firstName,\n      lastName: users.lastName,\n      userName: sql<string>`CONCAT(COALESCE(${users.firstName}, ''), ' ', COALESCE(${users.lastName}, ''))`,\n      userEmail: users.email,\n      userPhone: users.phone,\n      // Facility information from joined tables\n      sportName: sports.sportName,\n      groundName: grounds.groundName,\n      facilityName: grounds.groundName, // Map groundName to facilityName for frontend\n      facilityId: grounds.id,\n      capacity: grounds.maxCapacity,\n      // Get first slot data for date/time display\n      bookingDate: sql<string>`(\n        SELECT booking_date::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n      startTime: sql<string>`(\n        SELECT start_time::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n      endTime: sql<string>`(\n        SELECT end_time::text \n        FROM booking_slots \n        WHERE booking_id = ${bookings.id} \n        ORDER BY booking_date ASC, start_time ASC \n        LIMIT 1\n      )`,\n    })\n    .from(bookings)\n    .leftJoin(users, eq(bookings.userId, users.id))\n    .leftJoin(grounds, eq(bookings.groundId, grounds.id))\n    .leftJoin(sports, eq(bookings.sportId, sports.id));\n\n    let countQuery = db.select({ count: count() }).from(bookings);\n\n    // Apply filters\n    if (status && status !== 'all') {\n      console.log(`Filtering by status: '${status}'`);\n      query = query.where(eq(bookings.status, status));\n      countQuery = countQuery.where(eq(bookings.status, status));\n    } else {\n      console.log('No status filter applied or status is \"all\"');\n    }\n\n    if (search) {\n      console.log(`Applying search filter: '${search}'`);\n      const searchCondition = or(\n        like(users.email, `%${search}%`),\n        like(sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`, `%${search}%`),\n        like(sql<string>`CONCAT('BK', LPAD(CAST(${bookings.id} AS TEXT), 4, '0'))`, `%${search}%`)\n      );\n      query = query.where(searchCondition);\n      countQuery = countQuery.leftJoin(users, eq(bookings.userId, users.id)).where(searchCondition);\n    }\n\n    // Apply sorting\n    let orderByClause;\n    switch (sortBy) {\n      case 'date_asc':\n        orderByClause = asc(bookings.startDate);\n        break;\n      case 'customer_asc':\n        orderByClause = asc(sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`);\n        break;\n      case 'customer_desc':\n        orderByClause = desc(sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`);\n        break;\n      case 'sport_asc':\n        orderByClause = asc(sports.sportName);\n        break;\n      case 'sport_desc':\n        orderByClause = desc(sports.sportName);\n        break;\n      case 'ground_asc':\n        orderByClause = asc(grounds.groundName);\n        break;\n      case 'ground_desc':\n        orderByClause = desc(grounds.groundName);\n        break;\n      case 'amount_asc':\n        orderByClause = asc(bookings.totalAmount);\n        break;\n      case 'amount_desc':\n        orderByClause = desc(bookings.totalAmount);\n        break;\n      case 'date_desc':\n      default:\n        orderByClause = desc(bookings.startDate);\n        break;\n    }\n\n    const [bookingsResult, [{ count: total }]] = await Promise.all([\n      query.limit(limit).offset(offset).orderBy(orderByClause),\n      countQuery\n    ]);\n\n    console.log(`Query returned ${bookingsResult.length} bookings, total: ${total}`);\n    if (bookingsResult.length > 0) {\n      console.log('Sample booking with user/facility data:', {\n        id: bookingsResult[0].id,\n        status: bookingsResult[0].status,\n        userName: bookingsResult[0].userName,\n        facilityName: bookingsResult[0].facilityName\n      });\n    }\n\n    return { bookings: bookingsResult, total };\n  }\n\n  async getBookingSlots(bookingId: number): Promise<BookingSlot[]> {\n    return await db.select().from(bookingSlots)\n      .where(eq(bookingSlots.bookingId, bookingId))\n      .orderBy(asc(bookingSlots.bookingDate), asc(bookingSlots.startTime));\n  }\n\n  async updateBookingStatus(id: number, status: string): Promise<Booking> {\n    const [updatedBooking] = await db.update(bookings)\n      .set({ status: status })\n      .where(eq(bookings.id, id))\n      .returning();\n      \n    return updatedBooking;\n  }\n\n  // Get expired pending bookings for auto-cancellation\n  async getExpiredPendingBookings(currentDate: Date): Promise<Booking[]> {\n    try {\n      const dateString = currentDate.toISOString().split('T')[0]; // YYYY-MM-DD format\n      \n      const expiredBookings = await db\n        .select()\n        .from(bookings)\n        .where(and(\n          eq(bookings.status, 'pending'),\n          lt(bookings.bookingDate, dateString)\n        ));\n      \n      return expiredBookings;\n    } catch (error) {\n      console.error('Error fetching expired pending bookings:', error);\n      return [];\n    }\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications)\n      .values(notification)\n      .returning();\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string, unreadOnly: boolean = false): Promise<Notification[]> {\n    let query = db.select().from(notifications)\n      .where(eq(notifications.userId, userId));\n    \n    if (unreadOnly) {\n      query = db.select().from(notifications)\n        .where(and(\n          eq(notifications.userId, userId),\n          eq(notifications.isRead, false)\n        ));\n    }\n    \n    return await query.orderBy(desc(notifications.createdAt));\n  }\n\n  async markNotificationAsRead(notificationId: number): Promise<void> {\n    await db.update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.id, notificationId));\n  }\n\n  // Additional methods for receipt generation\n  async getPaymentById(paymentId: number): Promise<Payment | undefined> {\n    const [payment] = await db.select().from(payments).where(eq(payments.id, paymentId));\n    return payment;\n  }\n\n  async getUserById(userId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, userId));\n    return user;\n  }\n\n  // Get bookings that need reminders (1 day before)\n  async getBookingsNeedingReminders(): Promise<any[]> {\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const tomorrowString = tomorrow.toISOString().split('T')[0];\n    \n    const bookingsNeedingReminders = await db\n      .select({\n        id: bookings.id,\n        userId: bookings.userId,\n\n        facilityName: grounds.groundName,\n        sportName: sports.sportName,\n        userEmail: users.email,\n        userName: sql`COALESCE(${users.firstName} || ' ' || ${users.lastName}, ${users.email})`,\n        totalAmount: bookings.totalAmount,\n        participantCount: bookings.participantCount\n      })\n      .from(bookings)\n      .innerJoin(grounds, eq(bookings.groundId, grounds.id))\n      .innerJoin(sports, eq(bookings.sportId, sports.id))\n      .innerJoin(users, eq(bookings.userId, users.id))\n      .where(eq(bookings.status, 'confirmed'));\n    \n    return bookingsNeedingReminders;\n  }\n\n  // Check if reminder already sent for a booking\n  async hasReminderBeenSent(bookingId: number): Promise<boolean> {\n    const existing = await db.select().from(notifications)\n      .where(and(\n        eq(notifications.relatedBookingId, bookingId),\n        eq(notifications.type, 'booking_reminder')\n      ))\n      .limit(1);\n    \n    return existing.length > 0;\n  }\n\n  // Get user's upcoming bookings for cancellation/rescheduling\n  async getUserUpcomingBookings(userId: string): Promise<any[]> {\n    const today = new Date().toISOString().split('T')[0];\n    \n    // First, try to get bookings with slots data (newer approach)\n    const bookingsWithSlots = await db\n      .select({\n        id: bookings.id,\n        bookingDate: bookingSlots.bookingDate,\n        startTime: bookingSlots.startTime,\n        endTime: bookingSlots.endTime,\n        status: bookings.status,\n        totalAmount: bookings.totalAmount,\n        paidAmount: bookings.paidAmount,\n        paymentStatus: bookings.paymentStatus,\n        facilityName: grounds.groundName,\n        sportName: sports.sportName,\n        participantCount: bookings.participantCount,\n        createdAt: bookings.createdAt\n      })\n      .from(bookings)\n      .innerJoin(bookingSlots, eq(bookings.id, bookingSlots.bookingId))\n      .innerJoin(grounds, eq(bookings.groundId, grounds.id))\n      .innerJoin(sports, eq(bookings.sportId, sports.id))\n      .where(and(\n        eq(bookings.userId, userId),\n        gte(bookingSlots.bookingDate, today),\n        inArray(bookings.status, ['confirmed', 'pending'])\n      ))\n      .orderBy(asc(bookingSlots.bookingDate), asc(bookingSlots.startTime));\n\n    // No fallback needed - all bookings should have slots\n\n    return bookingsWithSlots;\n  }\n\n  async updateBookingPayment(bookingId: number, paymentData: { paidAmount: string; paymentStatus: string; status: string }): Promise<Booking> {\n    // SAFETY CHECK: Log all payment status updates for auditing\n    console.log(`Updating booking ${bookingId} payment:`, {\n      paidAmount: paymentData.paidAmount,\n      paymentStatus: paymentData.paymentStatus,\n      status: paymentData.status\n    });\n    \n    // Validate that payment status aligns with actual payment records\n    if (paymentData.paymentStatus === 'completed' || paymentData.paymentStatus === 'confirmed') {\n      const actualPayments = await this.getPayments(bookingId);\n      const actualPaidAmount = actualPayments\n        .filter(p => p.status === 'completed')\n        .reduce((sum, p) => sum + Number(p.amount), 0);\n      \n      if (actualPaidAmount === 0) {\n        console.warn(`WARNING: Attempting to set payment status to ${paymentData.paymentStatus} for booking ${bookingId} but no completed payments exist!`);\n        console.warn('This could create data integrity issues. Using actual payment data instead.');\n        \n        // Override with correct data based on actual payments\n        paymentData.paidAmount = \"0\";\n        paymentData.paymentStatus = \"pending\";\n      }\n    }\n    \n    const [updatedBooking] = await db.update(bookings)\n      .set({\n        paidAmount: paymentData.paidAmount,\n        paymentStatus: paymentData.paymentStatus,\n        status: paymentData.status,\n        updatedAt: new Date()\n      })\n      .where(eq(bookings.id, bookingId))\n      .returning();\n      \n    return updatedBooking;\n  }\n\n  // Reports operations\n  async getRevenueReport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]> {\n    let dateFormat;\n    let dateGrouping;\n    \n    switch (period) {\n      case 'day':\n        dateFormat = 'YYYY-MM-DD';\n        dateGrouping = 'DATE(p.created_at)';\n        break;\n      case 'week':\n        dateFormat = 'YYYY-WW';\n        dateGrouping = 'DATE_TRUNC(\\'week\\', p.created_at)';\n        break;\n      case 'month':\n        dateFormat = 'YYYY-MM';\n        dateGrouping = 'DATE_TRUNC(\\'month\\', p.created_at)';\n        break;\n    }\n\n    const query = `\n      SELECT \n        ${dateGrouping} as period,\n        TO_CHAR(${dateGrouping}, '${dateFormat}') as period_label,\n        COUNT(p.id) as transaction_count,\n        SUM(p.amount) as total_revenue,\n        AVG(p.amount) as avg_transaction_value\n      FROM payments p\n      WHERE p.status = 'completed'\n        ${startDate ? `AND p.created_at >= '${startDate}'::date` : ''}\n        ${endDate ? `AND p.created_at <= '${endDate}'::date` : ''}\n      GROUP BY ${dateGrouping}\n      ORDER BY period DESC\n    `;\n\n    const result = await db.execute(sql.raw(query));\n    return result.rows;\n  }\n\n  async getRevenueReportBySport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]> {\n    let dateFormat;\n    let dateGrouping;\n    \n    switch (period) {\n      case 'day':\n        dateFormat = 'YYYY-MM-DD';\n        dateGrouping = 'DATE(p.created_at)';\n        break;\n      case 'week':\n        dateFormat = 'YYYY-WW';\n        dateGrouping = 'DATE_TRUNC(\\'week\\', p.created_at)';\n        break;\n      case 'month':\n        dateFormat = 'YYYY-MM';\n        dateGrouping = 'DATE_TRUNC(\\'month\\', p.created_at)';\n        break;\n    }\n\n    const query = `\n      SELECT \n        s.sport_name,\n        ${dateGrouping} as period,\n        TO_CHAR(${dateGrouping}, '${dateFormat}') as period_label,\n        COUNT(p.id) as transaction_count,\n        SUM(p.amount) as total_revenue,\n        AVG(p.amount) as avg_transaction_value\n      FROM payments p\n      INNER JOIN bookings b ON p.booking_id = b.id\n      INNER JOIN grounds_master g ON b.ground_id = g.ground_id\n      INNER JOIN sports_master s ON g.sport_id = s.sport_id\n      WHERE p.status = 'completed'\n        ${startDate ? `AND p.created_at >= '${startDate}'::date` : ''}\n        ${endDate ? `AND p.created_at <= '${endDate}'::date` : ''}\n      GROUP BY s.sport_name, ${dateGrouping}\n      ORDER BY period DESC, total_revenue DESC\n    `;\n\n    const result = await db.execute(sql.raw(query));\n    return result.rows;\n  }\n\n  async getFacilityUsageReport(period: 'day' | 'week' | 'month', startDate?: string, endDate?: string): Promise<any[]> {\n    let dateFormat;\n    let dateGrouping;\n    \n    switch (period) {\n      case 'day':\n        dateFormat = 'YYYY-MM-DD';\n        dateGrouping = 'DATE(bs.booking_date)';\n        break;\n      case 'week':\n        dateFormat = 'YYYY-WW';\n        dateGrouping = 'DATE_TRUNC(\\'week\\', bs.booking_date)';\n        break;\n      case 'month':\n        dateFormat = 'YYYY-MM';\n        dateGrouping = 'DATE_TRUNC(\\'month\\', bs.booking_date)';\n        break;\n    }\n\n    const query = `\n      SELECT \n        s.sport_name,\n        g.ground_name,\n        ${dateGrouping} as period,\n        TO_CHAR(${dateGrouping}, '${dateFormat}') as period_label,\n        COUNT(DISTINCT b.id) as total_bookings,\n        COUNT(bs.id) as total_slots_used,\n        SUM(bs.participant_count) as total_participants,\n        AVG(bs.participant_count) as avg_participants_per_slot,\n        COUNT(DISTINCT CASE WHEN b.status = 'confirmed' THEN b.id ELSE NULL END) as confirmed_bookings,\n        COUNT(DISTINCT CASE WHEN b.status = 'cancelled' THEN b.id ELSE NULL END) as cancelled_bookings,\n        ROUND(\n          (COUNT(DISTINCT CASE WHEN b.status = 'confirmed' THEN b.id ELSE NULL END)::decimal / COUNT(DISTINCT b.id)) * 100, 2\n        ) as utilization_rate\n      FROM booking_slots bs\n      INNER JOIN bookings b ON bs.booking_id = b.id\n      INNER JOIN grounds_master g ON b.ground_id = g.ground_id\n      INNER JOIN sports_master s ON g.sport_id = s.sport_id\n      WHERE 1=1\n        ${startDate ? `AND bs.booking_date >= '${startDate}'::date` : ''}\n        ${endDate ? `AND bs.booking_date <= '${endDate}'::date` : ''}\n      GROUP BY s.sport_name, g.ground_name, ${dateGrouping}\n      ORDER BY period DESC, total_slots_used DESC\n    `;\n\n    const result = await db.execute(sql.raw(query));\n    return result.rows;\n  }\n\n  async getMemberBookingReport(userId?: string, startDate?: string, endDate?: string): Promise<any[]> {\n    const query = `\n      SELECT \n        u.id as user_id,\n        u.first_name,\n        u.last_name,\n        u.email,\n        u.phone,\n        COUNT(b.id) as total_bookings,\n        SUM(b.total_amount) as total_booking_value,\n        SUM(b.participant_count) as total_participants,\n        AVG(b.total_amount) as avg_booking_value,\n        SUM(CASE WHEN b.status = 'confirmed' THEN 1 ELSE 0 END) as confirmed_bookings,\n        SUM(CASE WHEN b.status = 'cancelled' THEN 1 ELSE 0 END) as cancelled_bookings,\n        SUM(CASE WHEN b.status = 'pending' THEN 1 ELSE 0 END) as pending_bookings,\n        MIN(b.created_at) as first_booking_date,\n        MAX(b.created_at) as latest_booking_date,\n        STRING_AGG(DISTINCT s.sport_name, ', ') as sports_played\n      FROM users u\n      INNER JOIN bookings b ON u.id = b.user_id\n      INNER JOIN grounds_master g ON b.ground_id = g.ground_id\n      INNER JOIN sports_master s ON g.sport_id = s.sport_id\n      WHERE 1=1\n        ${userId ? `AND u.id = '${userId}'` : ''}\n        ${startDate ? `AND b.created_at >= '${startDate}'::date` : ''}\n        ${endDate ? `AND b.created_at <= '${endDate}'::date` : ''}\n      GROUP BY u.id, u.first_name, u.last_name, u.email, u.phone\n      ORDER BY total_booking_value DESC\n    `;\n\n    const result = await db.execute(sql.raw(query));\n    return result.rows;\n  }\n\n  async getMemberPaymentReport(userId?: string, startDate?: string, endDate?: string): Promise<any[]> {\n    const query = `\n      SELECT \n        u.id as user_id,\n        u.first_name,\n        u.last_name,\n        u.email,\n        COUNT(p.id) as total_payments,\n        SUM(p.amount) as total_paid,\n        AVG(p.amount) as avg_payment_amount,\n        SUM(CASE WHEN p.payment_method = 'cash' THEN p.amount ELSE 0 END) as cash_payments,\n        SUM(CASE WHEN p.payment_method = 'upi' THEN p.amount ELSE 0 END) as upi_payments,\n        SUM(CASE WHEN p.payment_method IN ('card', 'credit_card') THEN p.amount ELSE 0 END) as card_payments,\n        SUM(CASE WHEN p.payment_method = 'bank_transfer' THEN p.amount ELSE 0 END) as bank_transfer_payments,\n        MIN(p.created_at) as first_payment_date,\n        MAX(p.created_at) as latest_payment_date,\n        COUNT(DISTINCT p.booking_id) as unique_bookings_paid\n      FROM users u\n      INNER JOIN payments p ON u.id = p.user_id\n      WHERE p.status = 'completed'\n        ${userId ? `AND u.id = '${userId}'` : ''}\n        ${startDate ? `AND p.created_at >= '${startDate}'::date` : ''}\n        ${endDate ? `AND p.created_at <= '${endDate}'::date` : ''}\n      GROUP BY u.id, u.first_name, u.last_name, u.email\n      ORDER BY total_paid DESC\n    `;\n\n    const result = await db.execute(sql.raw(query));\n    return result.rows;\n  }\n\n  async getCouponUsageReport(startDate?: string, endDate?: string): Promise<any[]> {\n    // For now, return empty array since coupon functionality is not fully implemented\n    // The bookings table doesn't have coupon_code column yet\n    return [];\n  }\n\n  // Booking Queue System Methods\n  async addToQueue(queueData: InsertBookingQueue): Promise<BookingQueue> {\n    // Check if user already in queue for this slot\n    const existingQueue = await db.select().from(bookingQueue)\n      .where(and(\n        eq(bookingQueue.userId, queueData.userId),\n        eq(bookingQueue.sportId, queueData.sportId),\n        eq(bookingQueue.groundId, queueData.groundId),\n        eq(bookingQueue.bookingDate, queueData.bookingDate),\n        eq(bookingQueue.startTime, queueData.startTime),\n        eq(bookingQueue.status, 'waiting')\n      ));\n\n    if (existingQueue.length > 0) {\n      throw new Error('User already in queue for this slot');\n    }\n\n    // Get next priority number\n    const [maxPriority] = await db.select({ max: sql<number>`MAX(${bookingQueue.priority})` })\n      .from(bookingQueue)\n      .where(and(\n        eq(bookingQueue.sportId, queueData.sportId),\n        eq(bookingQueue.groundId, queueData.groundId),\n        eq(bookingQueue.bookingDate, queueData.bookingDate),\n        eq(bookingQueue.startTime, queueData.startTime),\n        eq(bookingQueue.status, 'waiting')\n      ));\n\n    const nextPriority = (maxPriority.max || 0) + 1;\n\n    const [newQueueEntry] = await db.insert(bookingQueue).values({\n      ...queueData,\n      priority: nextPriority,\n      expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours from now\n    }).returning();\n\n    // Create notification for user\n    await this.createNotification({\n      userId: queueData.userId,\n      type: 'queue_update',\n      title: 'Added to Waiting List',\n      message: `You've been added to the waiting list (Position #${nextPriority}) for ${queueData.bookingDate} ${queueData.startTime}`,\n      channels: ['app'],\n      relatedQueueId: newQueueEntry.id\n    });\n\n    return newQueueEntry;\n  }\n\n  async getQueueBySlot(sportId: number, groundId: number, date: string, startTime: string, endTime: string): Promise<BookingQueue[]> {\n    return await db.select().from(bookingQueue)\n      .where(and(\n        eq(bookingQueue.sportId, sportId),\n        eq(bookingQueue.groundId, groundId),\n        eq(bookingQueue.bookingDate, date),\n        eq(bookingQueue.startTime, startTime),\n        eq(bookingQueue.endTime, endTime),\n        eq(bookingQueue.status, 'waiting')\n      ))\n      .orderBy(asc(bookingQueue.priority));\n  }\n\n  async getUserQueueRequests(userId: string): Promise<BookingQueue[]> {\n    return await db.select({\n      id: bookingQueue.id,\n      userId: bookingQueue.userId,\n      sportId: bookingQueue.sportId,\n      groundId: bookingQueue.groundId,\n      bookingDate: bookingQueue.bookingDate,\n      startTime: bookingQueue.startTime,\n      endTime: bookingQueue.endTime,\n      participantCount: bookingQueue.participantCount,\n      bookingType: bookingQueue.bookingType,\n      planType: bookingQueue.planType,\n      requestedAmount: bookingQueue.requestedAmount,\n      priority: bookingQueue.priority,\n      status: bookingQueue.status,\n      createdAt: bookingQueue.createdAt,\n      expiresAt: bookingQueue.expiresAt,\n      notes: bookingQueue.notes,\n      conflictingBookingId: bookingQueue.conflictingBookingId,\n      facilityName: sql<string>`${sports.sportName} || ' - ' || ${grounds.groundName}`,\n      sportName: sports.sportName,\n      groundName: grounds.groundName\n    })\n    .from(bookingQueue)\n    .innerJoin(grounds, eq(bookingQueue.groundId, grounds.id))\n    .innerJoin(sports, eq(bookingQueue.sportId, sports.id))\n    .where(and(\n      eq(bookingQueue.userId, userId),\n      inArray(bookingQueue.status, ['waiting', 'offered'])\n    ))\n    .orderBy(desc(bookingQueue.createdAt));\n  }\n\n  async processQueueOnCancellation(cancelledBookingId: number): Promise<void> {\n    // Get the cancelled booking details\n    const booking = await this.getBookingDetails(cancelledBookingId);\n    if (!booking) return;\n\n    // Find queue entries for this slot\n    const queueEntries = await this.getQueueBySlot(\n      booking.sportId,\n      booking.groundId,\n      booking.bookingDate,\n      booking.startTime,\n      booking.endTime\n    );\n\n    if (queueEntries.length === 0) return;\n\n    // Offer slot to first person in queue (priority 1)\n    const firstInQueue = queueEntries[0];\n    await this.offerSlotToNextInQueue(firstInQueue.id);\n  }\n\n  async offerSlotToNextInQueue(queueId: number): Promise<void> {\n    // Update queue status to offered\n    await db.update(bookingQueue)\n      .set({ \n        status: 'offered',\n        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 hours to respond\n      })\n      .where(eq(bookingQueue.id, queueId));\n\n    // Get queue details for notification\n    const [queueEntry] = await db.select({\n      userId: bookingQueue.userId,\n      bookingDate: bookingQueue.bookingDate,\n      startTime: bookingQueue.startTime,\n      endTime: bookingQueue.endTime,\n      facilityName: sql<string>`${sports.sportName} || ' - ' || ${grounds.groundName}`\n    })\n    .from(bookingQueue)\n    .innerJoin(grounds, eq(bookingQueue.groundId, grounds.id))\n    .innerJoin(sports, eq(bookingQueue.sportId, sports.id))\n    .where(eq(bookingQueue.id, queueId));\n\n    if (queueEntry) {\n      // Create notification for user\n      await this.createNotification({\n        userId: queueEntry.userId,\n        type: 'queue_update',\n        title: 'Booking Slot Available!',\n        message: `Great news! A slot is now available for ${queueEntry.facilityName} on ${queueEntry.bookingDate} ${queueEntry.startTime}-${queueEntry.endTime}. Book within 24 hours.`,\n        channels: ['app'],\n        relatedQueueId: queueId\n      });\n    }\n  }\n\n  async convertQueueToBooking(queueId: number): Promise<Booking> {\n    const [queueEntry] = await db.select().from(bookingQueue).where(eq(bookingQueue.id, queueId));\n    if (!queueEntry || queueEntry.status !== 'offered') {\n      throw new Error('Queue entry not found or not in offered status');\n    }\n\n    // Create booking from queue data\n    const bookingData: InsertBooking = {\n      userId: queueEntry.userId,\n      sportId: queueEntry.sportId,\n      groundId: queueEntry.groundId,\n      bookingType: queueEntry.bookingType,\n      planType: queueEntry.planType,\n\n      startTime: queueEntry.startTime,\n      endTime: queueEntry.endTime,\n      duration: 60, // Default 1 hour, should be calculated\n      participantCount: queueEntry.participantCount,\n      totalAmount: queueEntry.requestedAmount,\n      discountAmount: \"0\",\n      status: 'confirmed',\n      paymentStatus: 'pending'\n    };\n\n    const booking = await this.createBooking(bookingData, []);\n\n    // Update queue status to converted\n    await db.update(bookingQueue)\n      .set({ status: 'converted' })\n      .where(eq(bookingQueue.id, queueId));\n\n    // Create success notification\n    await this.createNotification({\n      userId: queueEntry.userId,\n      type: 'booking_confirmation',\n      title: 'Booking Confirmed!',\n      message: `Your booking from the waiting list has been confirmed for ${queueEntry.bookingDate} ${queueEntry.startTime}`,\n      channels: ['app'],\n      relatedBookingId: booking.booking.id,\n      relatedQueueId: queueId\n    });\n\n    return booking.booking;\n  }\n\n  async removeFromQueue(queueId: number): Promise<void> {\n    await db.update(bookingQueue)\n      .set({ status: 'expired' })\n      .where(eq(bookingQueue.id, queueId));\n  }\n\n\n\n  async sendBookingReminders(): Promise<{ remindersSent: number; details: any[] }> {\n    // Find bookings that need reminders (next day bookings)\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n    const tomorrowStr = tomorrow.toISOString().split('T')[0];\n\n    // Get bookings with slots for tomorrow\n    const upcomingBookings = await db.select({\n      id: bookings.id,\n      userId: bookings.userId,\n      bookingDate: bookingSlots.bookingDate,\n      startTime: bookingSlots.startTime,\n      totalAmount: bookings.totalAmount,\n      paymentStatus: bookings.paymentStatus,\n      userName: sql`CONCAT(${users.firstName}, ' ', ${users.lastName})`.as('userName'),\n      userEmail: users.email\n    })\n    .from(bookings)\n    .innerJoin(bookingSlots, eq(bookings.id, bookingSlots.bookingId))\n    .innerJoin(users, eq(bookings.userId, users.id))\n    .where(and(\n      eq(bookingSlots.bookingDate, tomorrowStr),\n      eq(bookings.status, 'confirmed')\n    ));\n\n    const remindersSent = [];\n    \n    for (const booking of upcomingBookings) {\n      // Check if reminder already sent today\n      const existingReminder = await db.select()\n        .from(notifications)\n        .where(and(\n          eq(notifications.userId, booking.userId),\n          eq(notifications.type, 'booking_reminder'),\n          eq(notifications.relatedBookingId, booking.id),\n          gte(notifications.createdAt, new Date(new Date().setHours(0, 0, 0, 0)))\n        ))\n        .limit(1);\n\n      if (existingReminder.length === 0) {\n        const paymentMessage = booking.paymentStatus === 'pending' \n          ? ` Please complete your payment of ₹${booking.totalAmount}.`\n          : '';\n\n        await this.createNotification({\n          userId: booking.userId,\n          type: 'booking_reminder',\n          title: 'Booking Reminder - Tomorrow',\n          message: `Your booking is scheduled for tomorrow (${booking.bookingDate}) at ${booking.startTime}.${paymentMessage}`,\n          channels: ['app'],\n          relatedBookingId: booking.id,\n          metadata: {\n            bookingDate: booking.bookingDate,\n            startTime: booking.startTime,\n            reminderType: 'day_before'\n          }\n        });\n\n        remindersSent.push({\n          bookingId: booking.id,\n          userName: booking.userName,\n          email: booking.userEmail,\n          bookingDate: booking.bookingDate,\n          startTime: booking.startTime\n        });\n      }\n    }\n\n    return { \n      remindersSent: remindersSent.length,\n      details: remindersSent\n    };\n  }\n\n  async sendPaymentReminders(): Promise<{ remindersSent: number; details: any[] }> {\n    // Find bookings with pending payments\n    const pendingPaymentBookings = await db.select({\n      bookingId: bookings.id,\n      userId: bookings.userId,\n      bookingDate: bookings.bookingDate,\n      startTime: bookings.startTime,\n      totalAmount: bookings.totalAmount,\n      paidAmount: bookings.paidAmount,\n      userName: sql`CONCAT(${users.firstName}, ' ', ${users.lastName})`.as('userName'),\n      userEmail: users.email\n    })\n    .from(bookings)\n    .innerJoin(users, eq(bookings.userId, users.id))\n    .where(and(\n      eq(bookings.status, 'confirmed'),\n      inArray(bookings.paymentStatus, ['pending', 'partial'])\n    ));\n\n    const remindersSent = [];\n    \n    for (const booking of pendingPaymentBookings) {\n      // Check if payment reminder already sent today\n      const existingReminder = await db.select()\n        .from(notifications)\n        .where(and(\n          eq(notifications.userId, booking.userId),\n          eq(notifications.type, 'payment_reminder'),\n          eq(notifications.relatedBookingId, booking.bookingId),\n          gte(notifications.createdAt, new Date(new Date().setHours(0, 0, 0, 0)))\n        ))\n        .limit(1);\n\n      if (existingReminder.length === 0) {\n        const balanceDue = parseFloat(booking.totalAmount) - (parseFloat(booking.paidAmount || '0'));\n        \n        await this.createNotification({\n          userId: booking.userId,\n          type: 'payment_reminder',\n          title: 'Payment Reminder',\n          message: `Please complete your payment of ₹${balanceDue} for your booking on ${booking.bookingDate} at ${booking.startTime}.`,\n          channels: ['app'],\n          relatedBookingId: booking.bookingId,\n          metadata: {\n            bookingDate: booking.bookingDate,\n            startTime: booking.startTime,\n            balanceDue: balanceDue,\n            reminderType: 'payment_pending'\n          }\n        });\n\n        remindersSent.push({\n          bookingId: booking.bookingId,\n          userName: booking.userName,\n          email: booking.userEmail,\n          bookingDate: booking.bookingDate,\n          startTime: booking.startTime,\n          balanceDue: balanceDue\n        });\n      }\n    }\n\n    return { \n      remindersSent: remindersSent.length,\n      details: remindersSent\n    };\n  }\n\n  async processExpiredBookings(): Promise<{ cancelledBookings: number; details: any[] }> {\n    // Find bookings that are past due and still pending payment\n    const currentDate = new Date();\n    const expiredBookings = await db.select({\n      bookingId: bookings.id,\n      userId: bookings.userId,\n      bookingDate: bookings.bookingDate,\n      startTime: bookings.startTime,\n      totalAmount: bookings.totalAmount,\n      userName: sql`CONCAT(${users.firstName}, ' ', ${users.lastName})`.as('userName'),\n      userEmail: users.email\n    })\n    .from(bookings)\n    .innerJoin(users, eq(bookings.userId, users.id))\n    .where(and(\n      eq(bookings.status, 'confirmed'),\n      eq(bookings.paymentStatus, 'pending'),\n      lt(sql`CONCAT(${bookings.bookingDate}, ' ', ${bookings.startTime})::timestamp`, currentDate)\n    ));\n\n    const cancelledBookings = [];\n    \n    for (const booking of expiredBookings) {\n      // Cancel the booking\n      await db.update(bookings)\n        .set({ \n          status: 'cancelled',\n          notes: 'Auto-cancelled due to unpaid status past booking time'\n        })\n        .where(eq(bookings.id, booking.bookingId));\n\n      // Send cancellation notification\n      await this.createNotification({\n        userId: booking.userId,\n        type: 'booking_cancelled',\n        title: 'Booking Cancelled - Payment Overdue',\n        message: `Your booking for ${booking.bookingDate} at ${booking.startTime} has been cancelled due to unpaid status.`,\n        channels: ['app'],\n        relatedBookingId: booking.bookingId,\n        metadata: {\n          bookingDate: booking.bookingDate,\n          startTime: booking.startTime,\n          cancellationReason: 'payment_overdue',\n          amount: booking.totalAmount\n        }\n      });\n\n      cancelledBookings.push({\n        bookingId: booking.bookingId,\n        userName: booking.userName,\n        email: booking.userEmail,\n        bookingDate: booking.bookingDate,\n        startTime: booking.startTime,\n        amount: booking.totalAmount\n      });\n    }\n\n    return { \n      cancelledBookings: cancelledBookings.length,\n      details: cancelledBookings\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":95916},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  decimal,\n  boolean,\n  time,\n  date,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (mandatory for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  phone: varchar(\"phone\").unique(),\n  password: varchar(\"password\"), // For registered users (demo users don't need this)\n  role: varchar(\"role\").notNull().default(\"client\"), // client, admin, manager\n  isActive: boolean(\"is_active\").notNull().default(true),\n  emailVerified: boolean(\"email_verified\").default(false), // For email verification\n  notificationPreferences: jsonb(\"notification_preferences\").default({\n    sms: true,\n    email: true,\n    marketing: false,\n  }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sports Master - Sport types and categories\nexport const sports = pgTable(\"sports_master\", {\n  id: serial(\"sport_id\").primaryKey(),\n  sportCode: varchar(\"sport_code\", { length: 10 }).unique().notNull(),\n  sportName: varchar(\"sport_name\", { length: 100 }).notNull(),\n  bookingType: varchar(\"booking_type\", { length: 20 }).notNull().default(\"full-ground\"), // per-person, full-ground, both\n  description: text(\"description\"),\n  imageUrl: varchar(\"image_url\", { length: 255 }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  modifiedAt: timestamp(\"modified_date\").defaultNow(),\n});\n\n// Grounds Master - Physical facilities/courts\nexport const grounds = pgTable(\"grounds_master\", {\n  id: serial(\"ground_id\").primaryKey(),\n  sportId: integer(\"sport_id\").notNull().references(() => sports.id),\n  groundName: varchar(\"ground_name\", { length: 100 }).notNull(),\n  groundCode: varchar(\"ground_code\", { length: 20 }).unique().notNull(),\n  location: varchar(\"location\", { length: 255 }),\n  facilities: text(\"facilities\"),\n  maxCapacity: integer(\"max_capacity\"), // Only for per-person booking\n  imageUrl: varchar(\"image_url\", { length: 255 }),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  modifiedAt: timestamp(\"modified_date\").defaultNow(),\n});\n\n// Plans Master - Pricing plans for different plan types\nexport const plans = pgTable(\"plans_master\", {\n  id: serial(\"plan_id\").primaryKey(),\n  groundId: integer(\"ground_id\").notNull().references(() => grounds.id),\n  planName: varchar(\"plan_name\", { length: 100 }).notNull(),\n  planType: varchar(\"plan_type\", { length: 20 }).notNull(), // hourly, monthly, yearly\n  durationDays: integer(\"duration_days\").notNull().default(1), // 1 for hourly, 30 for monthly, 365 for yearly\n  basePrice: decimal(\"base_price\", { precision: 10, scale: 2 }).notNull(),\n  peakHourMultiplier: decimal(\"peak_hour_multiplier\", { precision: 3, scale: 2 }).default(\"1.0\"),\n  weekendMultiplier: decimal(\"weekend_multiplier\", { precision: 3, scale: 2 }).default(\"1.0\"),\n  description: text(\"description\"),\n  operatingHours: jsonb(\"operating_hours\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  modifiedAt: timestamp(\"modified_date\").defaultNow(),\n});\n\n// Time Slots Master - Standard time slot definitions\nexport const timeSlots = pgTable(\"time_slots_master\", {\n  id: serial(\"time_slot_id\").primaryKey(),\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  slotName: varchar(\"slot_name\", { length: 50 }).notNull(),\n  isPeakHour: boolean(\"is_peak_hour\").notNull().default(false),\n  isAvailable: boolean(\"is_available\").notNull().default(true),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  modifiedAt: timestamp(\"modified_date\").defaultNow(),\n});\n\n// No legacy tables - only master tables are used\n\n\n\n// Booking Master - Main booking record (uses sport_id and ground_id from master tables)\nexport const bookings = pgTable(\"bookings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sportId: integer(\"sport_id\").notNull().references(() => sports.id),\n  groundId: integer(\"ground_id\").notNull().references(() => grounds.id),\n  bookingType: varchar(\"booking_type\").notNull(), // per-person, full-ground\n  planType: varchar(\"plan_type\").notNull(), // hourly, monthly, yearly\n  startDate: date(\"start_date\").notNull(), // Booking start date\n  endDate: date(\"end_date\").notNull(), // Booking end date (calculated from plan duration)\n  duration: integer(\"duration\"), // Duration in minutes (for hourly bookings)\n  participantCount: integer(\"participant_count\").default(1),\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paidAmount: decimal(\"paid_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"),\n  status: varchar(\"status\").notNull().default(\"confirmed\"), // pending, confirmed, cancelled, completed\n  paymentStatus: varchar(\"payment_status\").notNull().default(\"pending\"), // pending, partial, completed, failed, refunded\n  paymentMethod: varchar(\"payment_method\"), // credit_card, upi, cash\n  isRecurring: boolean(\"is_recurring\").notNull().default(false),\n  recurringEndDate: date(\"recurring_end_date\"),\n  notes: text(\"notes\"),\n\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Booking Slots - Individual date/time combinations for a booking\nexport const bookingSlots = pgTable(\"booking_slots\", {\n  id: serial(\"id\").primaryKey(),\n  bookingId: integer(\"booking_id\").notNull().references(() => bookings.id, { onDelete: \"cascade\" }),\n  bookingDate: date(\"booking_date\").notNull(),\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  participantCount: integer(\"participant_count\").default(1), // Store participants per slot\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Payments\nexport const payments = pgTable(\"payments\", {\n  id: serial(\"id\").primaryKey(),\n  bookingId: integer(\"booking_id\").notNull().references(() => bookings.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentMethod: varchar(\"payment_method\").notNull(),\n  transactionId: varchar(\"transaction_id\"),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, completed, failed, refunded\n  paymentGatewayResponse: jsonb(\"payment_gateway_response\"),\n  discountAmount: decimal(\"discount_amount\", { precision: 10, scale: 2 }).default(\"0\"), // Admin discount amount\n  discountReason: varchar(\"discount_reason\"), // Reason for discount (admin only)\n  processedAt: timestamp(\"processed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Coupons\nexport const coupons = pgTable(\"coupons\", {\n  id: serial(\"id\").primaryKey(),\n  code: varchar(\"code\").notNull().unique(),\n  description: text(\"description\"),\n  discountType: varchar(\"discount_type\").notNull(), // percentage, fixed\n  discountValue: decimal(\"discount_value\", { precision: 10, scale: 2 }).notNull(),\n  minBookingAmount: decimal(\"min_booking_amount\", { precision: 10, scale: 2 }),\n  maxDiscount: decimal(\"max_discount\", { precision: 10, scale: 2 }),\n  usageLimit: integer(\"usage_limit\"),\n  usedCount: integer(\"used_count\").default(0),\n  validFrom: timestamp(\"valid_from\").notNull(),\n  validUntil: timestamp(\"valid_until\").notNull(),\n  applicableFacilities: jsonb(\"applicable_facilities\").default([]),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n\n\n// Booking Queue - Waiting list for conflicting slot requests\nexport const bookingQueue = pgTable(\"booking_queue\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  sportId: integer(\"sport_id\").notNull().references(() => sports.id),\n  groundId: integer(\"ground_id\").notNull().references(() => grounds.id),\n  bookingDate: date(\"booking_date\").notNull(),\n  startTime: time(\"start_time\").notNull(),\n  endTime: time(\"end_time\").notNull(),\n  participantCount: integer(\"participant_count\").default(1),\n  bookingType: varchar(\"booking_type\").notNull(), // per-person, full-ground\n  planType: varchar(\"plan_type\").notNull(), // hourly, monthly, yearly\n  requestedAmount: decimal(\"requested_amount\", { precision: 10, scale: 2 }).notNull(),\n  priority: integer(\"priority\").default(1), // 1 = highest, higher numbers = lower priority\n  status: varchar(\"status\").notNull().default(\"waiting\"), // waiting, offered, expired, converted\n  conflictingBookingId: integer(\"conflicting_booking_id\").references(() => bookings.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  expiresAt: timestamp(\"expires_at\"), // Auto-expire waiting requests\n  notes: text(\"notes\"),\n});\n\n// Notifications (enhanced for queue system)\nexport const notifications = pgTable(\"notifications\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  type: varchar(\"type\").notNull(), // booking_confirmation, reminder, marketing, maintenance, queue_update\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  channels: jsonb(\"channels\").default([\"app\"]), // app, sms, email\n  isRead: boolean(\"is_read\").notNull().default(false),\n  sentAt: timestamp(\"sent_at\"),\n  scheduledFor: timestamp(\"scheduled_for\"),\n  metadata: jsonb(\"metadata\"),\n  relatedBookingId: integer(\"related_booking_id\").references(() => bookings.id),\n  relatedQueueId: integer(\"related_queue_id\").references(() => bookingQueue.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Maintenance schedules (now references grounds master table)\nexport const maintenance = pgTable(\"maintenance\", {\n  id: serial(\"id\").primaryKey(),\n  groundId: integer(\"ground_id\").notNull().references(() => grounds.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User preferences and settings\nexport const userPreferences = pgTable(\"user_preferences\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").notNull().references(() => users.id).unique(),\n  favoritesFacilities: jsonb(\"favorites_facilities\").default([]),\n  defaultBookingType: varchar(\"default_booking_type\").default(\"per-person\"),\n  reminderPreferences: jsonb(\"reminder_preferences\").default({\n    beforeBooking: 60, // minutes\n    beforeSession: 15, // minutes\n    afterSession: 5, // minutes\n  }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Schema exports for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// New Master Tables Insert Schemas\nexport const insertSportSchema = createInsertSchema(sports).omit({\n  id: true,\n  createdAt: true,\n  modifiedAt: true,\n});\n\nexport const insertGroundSchema = createInsertSchema(grounds).omit({\n  id: true,\n  createdAt: true,\n  modifiedAt: true,\n});\n\nexport const insertPlanSchema = createInsertSchema(plans).omit({\n  id: true,\n  createdAt: true,\n  modifiedAt: true,\n}).extend({\n  basePrice: z.union([z.string(), z.number()]).transform(val => val.toString()),\n  peakHourMultiplier: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n  weekendMultiplier: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n});\n\nexport const insertTimeSlotSchema = createInsertSchema(timeSlots).omit({\n  id: true,\n  createdAt: true,\n  modifiedAt: true,\n});\n\n\n// Core booking and payment schemas\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  totalAmount: z.union([z.string(), z.number()]).transform(val => val.toString()),\n  discountAmount: z.union([z.string(), z.number()]).transform(val => val.toString()),\n  paidAmount: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n  sportId: z.number().optional(), // Will be set from ground if not provided\n\n});\n\nexport const insertBookingSlotSchema = createInsertSchema(bookingSlots).omit({\n  id: true,\n  bookingId: true, // Will be set during creation\n  createdAt: true,\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform(val => val.toString()),\n});\n\nexport const insertPaymentSchema = createInsertSchema(payments).omit({\n  id: true,\n  createdAt: true,\n}).extend({\n  amount: z.union([z.string(), z.number()]).transform(val => val.toString()),\n  discountAmount: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n});\n\nexport const insertCouponSchema = createInsertSchema(coupons).omit({\n  id: true,\n  usedCount: true,\n  createdAt: true,\n}).extend({\n  discountValue: z.union([z.string(), z.number()]).transform(val => val.toString()),\n  minBookingAmount: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n  maxDiscount: z.union([z.string(), z.number()]).transform(val => val.toString()).optional(),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Master table schemas only\n\n// Type exports\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Sport = typeof sports.$inferSelect;\nexport type InsertSport = z.infer<typeof insertSportSchema>;\nexport type Ground = typeof grounds.$inferSelect;\nexport type InsertGround = z.infer<typeof insertGroundSchema>;\nexport type Plan = typeof plans.$inferSelect;\nexport type InsertPlan = z.infer<typeof insertPlanSchema>;\nexport type TimeSlot = typeof timeSlots.$inferSelect;\nexport type InsertTimeSlot = z.infer<typeof insertTimeSlotSchema>;\n\n// Only master table types are used\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type BookingSlot = typeof bookingSlots.$inferSelect;\nexport type InsertBookingSlot = z.infer<typeof insertBookingSlotSchema>;\nexport type Payment = typeof payments.$inferSelect;\nexport type InsertPayment = z.infer<typeof insertPaymentSchema>;\nexport type Coupon = typeof coupons.$inferSelect;\nexport type InsertCoupon = z.infer<typeof insertCouponSchema>;\n\nexport const insertBookingQueueSchema = createInsertSchema(bookingQueue).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type BookingQueue = typeof bookingQueue.$inferSelect;\nexport type InsertBookingQueue = z.infer<typeof insertBookingQueueSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n// Time slots removed - using master tables only\n\n","size_bytes":15660},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/NotFound\";\nimport Landing from \"@/pages/landing\";\nimport Login from \"@/pages/login\";\n\nimport Home from \"@/pages/home\";\nimport Facilities from \"@/pages/facilities\";\nimport Booking from \"@/pages/booking\";\nimport EnhancedBooking from \"@/pages/EnhancedBooking\";\nimport Profile from \"@/pages/profile\";\nimport TestPaymentHistory from \"@/pages/TestPaymentHistory\";\nimport Payment from \"@/pages/Payment\";\nimport PaymentPage from \"@/pages/PaymentPage\";\nimport PendingPayments from \"@/pages/PendingPayments\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminSports from \"@/pages/admin/sports\";\nimport AdminGrounds from \"@/pages/admin/grounds\";\nimport AdminPlans from \"@/pages/admin/plans\";\nimport AdminTimeSlots from \"@/pages/admin/timeslots\";\nimport AdminFacilities from \"@/pages/admin/facilities\";\nimport AdminBookings from \"@/pages/admin/bookings\";\nimport AdminUsers from \"@/pages/admin/users\";\nimport AdminPayments from \"@/pages/admin/payments\";\nimport AdminReports from \"@/pages/admin/reports\";\nimport NotificationManagement from \"@/pages/admin/NotificationManagement\";\nimport UserDashboard from \"@/pages/user/Dashboard\";\nimport BookingQueue from \"@/pages/BookingQueue\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Don't show loading spinner for unauthenticated users - just show the landing page\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/facilities\" component={Facilities} />\n          <Route path=\"/booking/:facilityId?\" component={Booking} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/dashboard\" component={UserDashboard} />\n          <Route path=\"/facilities\" component={Facilities} />\n          <Route path=\"/booking/:facilityId?\" component={Booking} />\n          <Route path=\"/enhanced-booking\" component={EnhancedBooking} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/payment/:bookingId\" component={PaymentPage} />\n          <Route path=\"/pending-payments\" component={PendingPayments} />\n          <Route path=\"/queue\" component={BookingQueue} />\n          <Route path=\"/test-payment-history\" component={TestPaymentHistory} />\n          \n          {/* Admin routes */}\n          {(user?.role === 'admin' || user?.role === 'manager') && (\n            <>\n              <Route path=\"/admin\" component={AdminDashboard} />\n              <Route path=\"/admin/sports\" component={AdminSports} />\n              <Route path=\"/admin/grounds\" component={AdminGrounds} />\n              <Route path=\"/admin/plans\" component={AdminPlans} />\n              <Route path=\"/admin/timeslots\" component={AdminTimeSlots} />\n              <Route path=\"/admin/facilities\" component={AdminFacilities} />\n              <Route path=\"/admin/bookings\" component={AdminBookings} />\n              <Route path=\"/admin/users\" component={AdminUsers} />\n              <Route path=\"/admin/payments\" component={AdminPayments} />\n              <Route path=\"/admin/reports\" component={AdminReports} />\n              <Route path=\"/admin/notifications\" component={NotificationManagement} />\n            </>\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4135},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --accent: hsl(38, 92%, 50%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Custom colors matching design */\n  --sports-primary: hsl(207, 90%, 54%);\n  --sports-secondary: hsl(142, 76%, 36%);\n  --sports-accent: hsl(38, 92%, 50%);\n  --sports-dark: hsl(215, 28%, 17%);\n  --sports-light: hsl(210, 17%, 98%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer utilities {\n  .hero-gradient {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(142, 76%, 36%) 100%);\n  }\n  \n  .facility-card-hover {\n    transition: all 0.3s ease;\n    transform: translateY(0);\n  }\n  \n  .facility-card-hover:hover {\n    transform: translateY(-8px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  \n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n  \n  .text-gradient {\n    background: linear-gradient(135deg, hsl(207, 90%, 54%) 0%, hsl(142, 76%, 36%) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n  \n  .btn-sports-primary {\n    @apply bg-primary hover:bg-blue-700 text-white font-semibold px-6 py-3 rounded-lg transition-all duration-200 transform hover:scale-105;\n  }\n  \n  .btn-sports-secondary {\n    @apply bg-secondary hover:bg-green-700 text-white font-semibold px-6 py-3 rounded-lg transition-all duration-200;\n  }\n  \n  .btn-sports-outline {\n    @apply border-2 border-primary text-primary hover:bg-primary hover:text-white font-semibold px-6 py-3 rounded-lg transition-all duration-200;\n  }\n}\n\n/* Loading animations */\n@keyframes pulse-slow {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.animate-pulse-slow {\n  animation: pulse-slow 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(20, 5.9%, 90%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(207, 90%, 54%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(207, 90%, 44%);\n}\n","size_bytes":3707},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdminSidebar.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  LayoutDashboard, \n  Building2, \n  Calendar,\n  Users, \n  Settings,\n  Menu,\n  Dumbbell,\n  ChevronLeft,\n  Trophy,\n  MapPin,\n  CreditCard,\n  Clock,\n  IndianRupee,\n  BarChart3,\n  Bell\n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SidebarItem {\n  name: string;\n  href: string;\n  icon: React.ComponentType<{ className?: string }>;\n}\n\nconst sidebarItems: SidebarItem[] = [\n  {\n    name: \"Dashboard\",\n    href: \"/admin\",\n    icon: LayoutDashboard,\n  },\n  {\n    name: \"Sports Management\",\n    href: \"/admin/sports\",\n    icon: Trophy,\n  },\n  {\n    name: \"Grounds Management\",\n    href: \"/admin/grounds\",\n    icon: MapPin,\n  },\n  {\n    name: \"Pricing Plans\",\n    href: \"/admin/plans\",\n    icon: CreditCard,\n  },\n  {\n    name: \"Time Slots\",\n    href: \"/admin/timeslots\",\n    icon: Clock,\n  },\n  {\n    name: \"Facilities\",\n    href: \"/admin/facilities\",\n    icon: Building2,\n  },\n  {\n    name: \"Booking Management\",\n    href: \"/admin/bookings\",\n    icon: Calendar,\n  },\n  {\n    name: \"Users\",\n    href: \"/admin/users\",\n    icon: Users,\n  },\n  {\n    name: \"Payments\",\n    href: \"/admin/payments\",\n    icon: IndianRupee,\n  },\n  {\n    name: \"Reports\",\n    href: \"/admin/reports\",\n    icon: BarChart3,\n  },\n  {\n    name: \"Notifications\",\n    href: \"/admin/notifications\",\n    icon: Bell,\n  },\n];\n\ninterface AdminSidebarProps {\n  className?: string;\n}\n\nexport default function AdminSidebar({ className }: AdminSidebarProps) {\n  const [location] = useLocation();\n  const [mobileOpen, setMobileOpen] = useState(false);\n\n  const SidebarContent = () => (\n    <div className=\"flex flex-col h-full bg-white border-r border-gray-200\">\n      {/* Logo */}\n      <div className=\"flex items-center px-6 py-4 border-b border-gray-200\">\n        <Dumbbell className=\"h-8 w-8 text-primary mr-3\" />\n        <div>\n          <h1 className=\"font-bold text-lg\">Aryen Centre</h1>\n          <p className=\"text-xs text-gray-500\">Management</p>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-4 py-6 space-y-1\">\n        {sidebarItems.map((item) => {\n          const Icon = item.icon;\n          const isActive = location === item.href || (item.href !== '/admin' && location.startsWith(item.href));\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={cn(\n                  \"w-full justify-start h-11\",\n                  isActive && \"bg-primary text-white hover:bg-primary hover:text-white\"\n                )}\n                onClick={() => setMobileOpen(false)}\n              >\n                <Icon className=\"h-5 w-5 mr-3\" />\n                {item.name}\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* Back to Site */}\n      <div className=\"p-4 border-t border-gray-200\">\n        <Link href=\"/\">\n          <Button variant=\"outline\" className=\"w-full\" onClick={() => setMobileOpen(false)}>\n            <ChevronLeft className=\"h-4 w-4 mr-2\" />\n            Back to Site\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Mobile Sidebar */}\n      <Sheet open={mobileOpen} onOpenChange={setMobileOpen}>\n        <SheetTrigger asChild>\n          <Button variant=\"ghost\" size=\"icon\" className=\"lg:hidden\">\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"p-0 w-80\">\n          <SidebarContent />\n        </SheetContent>\n      </Sheet>\n\n      {/* Desktop Sidebar */}\n      <div className={cn(\"hidden lg:flex lg:flex-col lg:w-64 lg:fixed lg:inset-y-0\", className)}>\n        <SidebarContent />\n      </div>\n    </>\n  );\n}\n","size_bytes":3920},"client/src/components/BookingModal.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { User, Clock, Users, Calendar as CalendarIcon, CreditCard, X } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n// Remove unused imports since we use facility data from master tables\n\ninterface BookingModalProps {\n  facility: any; // Master table facility data\n  isOpen: boolean;\n  onClose: () => void;\n  isAdminBooking?: boolean;\n}\n\n// Helper functions\nconst getEndTime = (startTime: string, duration: number): string => {\n  const [hours, minutes] = startTime.split(':').map(Number);\n  const endHours = hours + duration;\n  return `${String(endHours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;\n};\n\nconst calculateSlotPrice = (bookingType: string, participantCount: number, facility: any): number => {\n  const baseRate = Number(facility.hourlyRate || 0);\n  return bookingType === \"per-person\" ? baseRate * participantCount : baseRate;\n};\n\nexport default function BookingModal({ facility, isOpen, onClose, isAdminBooking = false }: BookingModalProps) {\n  console.log(\"BookingModal rendered with isAdminBooking:\", isAdminBooking);\n  const [bookingType, setBookingType] = useState<\"per-person\" | \"full-ground\">(\"per-person\");\n  const [planType, setPlanType] = useState<\"hourly\" | \"monthly\" | \"yearly\">(\"hourly\");\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [startDate, setStartDate] = useState<Date | undefined>(new Date());\n  const [duration, setDuration] = useState(1);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<string>(\"\");\n  const [participantCount, setParticipantCount] = useState(1);\n  const [endDate, setEndDate] = useState<Date | undefined>();\n\n\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { isAuthenticated, user } = useAuth();\n\n  // Calculate total amount by checking each individual time slot separately\n  const calculateTotal = () => {\n    if (!facility || !filteredPlans.length || !selectedTimeSlot || !timeSlots) return 0;\n    \n    // Find the appropriate plan from filtered plans\n    const currentPlan = filteredPlans.find((plan: any) => {\n      const planName = plan.planName.toLowerCase();\n      const bookingTypeName = bookingType === \"per-person\" ? \"person\" : \"court\";\n      return planName.includes(planType.toLowerCase()) && planName.includes(bookingTypeName);\n    });\n    \n    if (!currentPlan) return 0;\n    \n    const basePrice = Number(currentPlan.basePrice);\n    const peakMultiplier = Number(currentPlan.peakHourMultiplier || 1);\n    const weekendMultiplier = Number(currentPlan.weekendMultiplier || 1);\n    const isWeekend = selectedDate ? [0, 6].includes(selectedDate.getDay()) : false;\n    \n    // For hourly plans, calculate each slot individually\n    if (planType === \"hourly\") {\n      let totalAmount = 0;\n      \n      // Get all time slots that will be booked (start time + duration)\n      const startHour = parseInt(selectedTimeSlot.split(':')[0]);\n      \n      for (let i = 0; i < duration; i++) {\n        const slotHour = startHour + i;\n        const slotTimeString = `${String(slotHour).padStart(2, '0')}:00`;\n        \n        // Find the specific slot to check if it's peak hour\n        const currentSlot = timeSlots.find((slot: any) => slot.startTime === slotTimeString);\n        const isSlotPeakHour = currentSlot?.peakHour === true;\n        \n        // Calculate price for this specific slot\n        let slotPrice = basePrice;\n        \n        // Apply peak hour multiplier if this specific slot is peak\n        if (isSlotPeakHour) {\n          slotPrice *= peakMultiplier;\n        }\n        \n        // Apply weekend multiplier\n        if (isWeekend) {\n          slotPrice *= weekendMultiplier;\n        }\n        \n        totalAmount += slotPrice;\n      }\n      \n      // For per-person bookings, multiply total by participant count\n      return bookingType === \"per-person\" ? totalAmount * participantCount : totalAmount;\n    } else {\n      // For monthly/yearly plans, apply multipliers to base amount\n      let finalAmount = basePrice;\n      \n      // Always check for peak hour multiplier when time slot is during peak hours\n      if (selectedTimeSlot && timeSlots) {\n        const currentSlot = timeSlots.find((slot: any) => slot.startTime === selectedTimeSlot);\n        if (currentSlot?.peakHour === true) {\n          finalAmount *= peakMultiplier;\n        }\n      }\n      \n      // Apply weekend multiplier only when plan = \"hourly\" (as per your conditions)\n      // Note: For monthly/yearly plans, weekend multiplier is NOT applied based on the conditions\n      if (isWeekend) {\n        finalAmount *= weekendMultiplier;\n      }\n      \n      // Apply person multiplier only when mode = \"per_person\" (as per your conditions)  \n      return bookingType === \"per-person\" ? finalAmount * participantCount : finalAmount;\n    }\n  };\n\n  // Get detailed pricing breakdown for each slot\n  const getPricingBreakdown = () => {\n    if (!facility || !filteredPlans.length || !selectedTimeSlot || !timeSlots) return null;\n    \n    const currentPlan = filteredPlans.find((plan: any) => {\n      const planName = plan.planName.toLowerCase();\n      const bookingTypeName = bookingType === \"per-person\" ? \"person\" : \"court\";\n      return planName.includes(planType.toLowerCase()) && planName.includes(bookingTypeName);\n    });\n    \n    if (!currentPlan) return null;\n    \n    const basePrice = Number(currentPlan.basePrice);\n    const peakMultiplier = Number(currentPlan.peakHourMultiplier || 1);\n    const weekendMultiplier = Number(currentPlan.weekendMultiplier || 1);\n    const isWeekend = selectedDate ? [0, 6].includes(selectedDate.getDay()) : false;\n    \n    // For hourly plans, break down each slot\n    if (planType === \"hourly\") {\n      const startHour = parseInt(selectedTimeSlot.split(':')[0]);\n      const slots = [];\n      let peakSlots = 0;\n      let nonPeakSlots = 0;\n      \n      for (let i = 0; i < duration; i++) {\n        const slotHour = startHour + i;\n        const slotTimeString = `${String(slotHour).padStart(2, '0')}:00`;\n        const currentSlot = timeSlots.find((slot: any) => slot.startTime === slotTimeString);\n        const isSlotPeakHour = currentSlot?.peakHour === true;\n        \n        if (isSlotPeakHour) {\n          peakSlots++;\n        } else {\n          nonPeakSlots++;\n        }\n        \n        slots.push({\n          time: slotTimeString,\n          isPeak: isSlotPeakHour\n        });\n      }\n      \n      return {\n        basePrice,\n        isWeekend,\n        peakMultiplier,\n        weekendMultiplier,\n        duration,\n        participantCount: bookingType === \"per-person\" ? participantCount : 1,\n        planName: currentPlan.planName,\n        slots,\n        peakSlots,\n        nonPeakSlots\n      };\n    } else {\n      // For monthly/yearly plans, check if selected time slot is peak hour\n      const isPeakHour = selectedTimeSlot && timeSlots ? \n        timeSlots.find((slot: any) => slot.startTime === selectedTimeSlot)?.peakHour === true : false;\n      \n      return {\n        basePrice,\n        isPeakHour,\n        isWeekend,\n        peakMultiplier,\n        weekendMultiplier,\n        duration,\n        participantCount: bookingType === \"per-person\" ? participantCount : 1,\n        planName: currentPlan.planName\n      };\n    }\n  };\n\n  // Get booking options based on ground capabilities from database\n  const sportBookingOptions = {\n    perPerson: facility?.bookingTypes?.perPerson === true,\n    fullGround: facility?.bookingTypes?.fullGround !== false // Default to true if not specified\n  };\n\n  // Time slots query with proper date formatting\n  const { data: timeSlots } = useQuery({\n    queryKey: [\"/api/facilities\", facility?.id, \"slots\", selectedDate?.toISOString().split('T')[0]],\n    queryFn: async () => {\n      // Format date properly to avoid timezone issues\n      const dateStr = selectedDate ? \n        `${selectedDate.getFullYear()}-${String(selectedDate.getMonth() + 1).padStart(2, '0')}-${String(selectedDate.getDate()).padStart(2, '0')}` :\n        new Date().toISOString().split('T')[0];\n      \n      console.log(`Frontend requesting slots for date: ${dateStr}`);\n      const response = await fetch(`/api/facilities/${facility?.id}/slots?date=${dateStr}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch time slots');\n      return response.json();\n    },\n    enabled: !!facility && !!selectedDate,\n  });\n\n  // Get maximum participants allowed for the selected time slot\n  const getMaxParticipantsForSelectedSlot = (): number => {\n    if (!selectedTimeSlot || !timeSlots) {\n      return facility?.capacity || 10;\n    }\n    \n    const selectedSlot = timeSlots.find((slot: any) => slot.startTime === selectedTimeSlot);\n    if (!selectedSlot) {\n      return facility?.capacity || 10;\n    }\n    \n    // For per-person bookings, return the available capacity for that specific slot\n    return Math.max(1, selectedSlot.availableCapacity || 0);\n  };\n\n  // Reset participant count when slot selection changes to ensure valid capacity\n  useEffect(() => {\n    if (selectedTimeSlot && bookingType === \"per-person\" && timeSlots) {\n      const maxAllowed = getMaxParticipantsForSelectedSlot();\n      if (participantCount > maxAllowed) {\n        setParticipantCount(Math.max(1, maxAllowed));\n        toast({\n          title: \"Participant count adjusted\",\n          description: `Reduced to ${maxAllowed} participants based on available capacity.`,\n        });\n      }\n    }\n  }, [selectedTimeSlot, bookingType, participantCount]); // Remove timeSlots from dependency array\n\n  // Force booking type to match ground capabilities when facility changes\n  useEffect(() => {\n    if (facility?.bookingTypes) {\n      // If per-person is not supported but currently selected, switch to full-ground\n      if (bookingType === \"per-person\" && !facility.bookingTypes.perPerson) {\n        if (facility.bookingTypes.fullGround) {\n          setBookingType(\"full-ground\");\n          toast({\n            title: \"Booking type adjusted\",\n            description: \"This facility only supports full ground bookings.\",\n          });\n        }\n      }\n      // If full-ground is not supported but currently selected, switch to per-person\n      else if (bookingType === \"full-ground\" && !facility.bookingTypes.fullGround) {\n        if (facility.bookingTypes.perPerson) {\n          setBookingType(\"per-person\");\n          toast({\n            title: \"Booking type adjusted\", \n            description: \"This facility only supports per-person bookings.\",\n          });\n        }\n      }\n    }\n  }, [facility?.bookingTypes, bookingType]);\n\n  // Filter plans based on booking type (per-person vs full-ground)\n  const filteredPlans = useMemo(() => {\n    const facilityPlans = (facility as any)?.plans;\n    if (!facilityPlans) return [];\n    \n    return facilityPlans.filter((plan: any) => {\n      const planName = plan.planName.toLowerCase();\n      const isPerPersonPlan = planName.includes('per person');\n      const isFullGroundPlan = planName.includes('full court') || planName.includes('full ground');\n      \n      if (bookingType === \"per-person\") {\n        return isPerPersonPlan;\n      } else if (bookingType === \"full-ground\") {\n        return isFullGroundPlan;\n      }\n      \n      return true; // Default case\n    });\n  }, [(facility as any)?.plans, bookingType]);\n\n  // Calculate end date automatically for monthly/yearly plans\n  const calculateEndDate = (startDate: Date | undefined, planType: string): Date | undefined => {\n    if (!startDate) return undefined;\n    \n    const calculatedEndDate = new Date(startDate);\n    \n    if (planType === \"monthly\") {\n      calculatedEndDate.setDate(calculatedEndDate.getDate() + 30);\n    } else if (planType === \"yearly\") {\n      calculatedEndDate.setDate(calculatedEndDate.getDate() + 365);\n    }\n    \n    return calculatedEndDate;\n  };\n\n  // Update end date when start date or plan type changes\n  useEffect(() => {\n    if (planType !== \"hourly\" && startDate) {\n      const calculatedEndDate = calculateEndDate(startDate, planType);\n      setEndDate(calculatedEndDate);\n    } else {\n      setEndDate(undefined);\n    }\n  }, [startDate, planType]);\n\n  // Booking mutations\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      // Always use authenticated booking endpoint\n      return await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n    },\n    onSuccess: () => {\n      // Invalidate booking queries for all users\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/bookings\"] });\n      \n      // Invalidate admin dashboard stats if user is admin\n      if (user?.role === 'admin' || user?.role === 'manager' || isAdminBooking) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      }\n    },\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (paymentData: any) => {\n      return await apiRequest(\"POST\", \"/api/payments\", paymentData);\n    },\n  });\n\n  // Handle regular booking (Pay Later)\n  const handleBooking = () => {\n    if (!facility) return;\n\n    const formatDateLocal = (date: Date) => {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    };\n    \n    const bookingDate = planType === \"hourly\" \n      ? (selectedDate ? formatDateLocal(selectedDate) : formatDateLocal(new Date()))\n      : (startDate ? formatDateLocal(startDate) : formatDateLocal(new Date()));\n    \n    const slots = [{\n      bookingDate,\n      startTime: selectedTimeSlot || \"09:00\",\n      endTime: selectedTimeSlot ? getEndTime(selectedTimeSlot, duration) : \"10:00\",\n      duration: duration * 60,\n      amount: calculateTotal().toString(),\n      status: \"pending\"\n    }];\n\n    const bookingData = {\n      groundId: facility.groundId || facility.id,\n      bookingType,\n      planType,\n      participantCount,\n      totalAmount: calculateTotal(),\n      bookingDate,\n      startTime: selectedTimeSlot || \"09:00\",\n      endTime: selectedTimeSlot ? getEndTime(selectedTimeSlot, duration) : \"10:00\",\n      duration,\n      slots\n    };\n\n    createBookingMutation.mutate(bookingData, {\n      onSuccess: async (response) => {\n        const booking = await response.json();\n        \n        // Booking created successfully - now handle payment logic\n        const bookingId = booking.booking ? booking.booking.id : booking.id;\n        \n        if (isAdminBooking) {\n          // For admin bookings, show success message and handle payment separately\n          toast({\n            title: \"Booking Created Successfully!\",\n            description: `Booking confirmed with ID: ${bookingId}. Now processing payment...`,\n            duration: 3000,\n          });\n          \n          // For admin bookings, redirect to payment page to handle payment details\n          // Payment details including discounts and payment methods will be handled there\n        } else {\n          // For regular users, just confirm booking creation\n          toast({\n            title: \"Booking Created Successfully!\",\n            description: \"Your booking has been confirmed. Please complete payment to secure your slot.\",\n            duration: 5000,\n          });\n        }\n        \n        onClose();\n        // Redirect both admin and regular users to payment page for payment processing\n        setLocation(`/payment/${bookingId}`);\n      }\n    });\n  };\n\n  // Handle Book Now - creates booking with proper validation\n  const handleBookNow = () => {\n    if (!facility) return;\n    \n    // Check authentication before proceeding with booking\n    if (!isAuthenticated && !isAdminBooking) {\n      toast({\n        title: \"Login Required\",\n        description: \"Please login or create an account to complete your booking.\",\n        duration: 5000,\n      });\n      onClose();\n      setLocation('/login');\n      return;\n    }\n\n    // Validate capacity for per-person bookings\n    if (bookingType === \"per-person\" && selectedTimeSlot) {\n      const maxAllowed = getMaxParticipantsForSelectedSlot();\n      if (participantCount > maxAllowed) {\n        toast({\n          title: \"Capacity Exceeded\",\n          description: `Only ${maxAllowed} participants available for ${selectedTimeSlot}. Please reduce the number of participants or select a different time slot.`,\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    const formatDateLocal = (date: Date) => {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const formatted = `${year}-${month}-${day}`;\n      console.log(`Formatting date for booking: ${date} -> ${formatted}`);\n      return formatted;\n    };\n    \n    const bookingDate = planType === \"hourly\" \n      ? (selectedDate ? formatDateLocal(selectedDate) : formatDateLocal(new Date()))\n      : (startDate ? formatDateLocal(startDate) : formatDateLocal(new Date()));\n    \n    // Get the selected plan to determine duration days and end date\n    const selectedPlan = facility?.plans?.find((p: any) => p.planType === planType);\n    const durationDays = selectedPlan?.durationDays || (planType === \"hourly\" ? 1 : planType === \"monthly\" ? 30 : 365);\n    \n    console.log(`Plan calculation: planType=${planType}, selectedPlan=${JSON.stringify(selectedPlan)}, durationDays=${durationDays}`);\n    \n    // Calculate end date for monthly/yearly bookings\n    let calculatedEndDate = null;\n    if (planType !== \"hourly\" && startDate) {\n      calculatedEndDate = new Date(startDate);\n      calculatedEndDate.setDate(calculatedEndDate.getDate() + durationDays - 1); // Subtract 1 as booking includes start date\n    }\n    \n    // Generate slots based on plan duration\n    const slots = [];\n    const startDateObj = planType === \"hourly\" ? \n      (selectedDate || new Date()) : \n      (startDate || new Date());\n    \n    console.log(`Generating slots for ${planType} plan: durationDays=${durationDays}, startDate=${startDateObj.toDateString()}`);\n    \n    for (let i = 0; i < durationDays; i++) {\n      const currentDate = new Date(startDateObj);\n      currentDate.setDate(startDateObj.getDate() + i);\n      \n      const slotData = {\n        bookingDate: formatDateLocal(currentDate),\n        startTime: selectedTimeSlot || \"09:00\",\n        endTime: selectedTimeSlot ? getEndTime(selectedTimeSlot, duration) : \"10:00\",\n        duration: duration * 60,\n        amount: (calculateTotal() / durationDays).toString(), // Divide total amount by duration days\n        status: \"pending\"\n      };\n      \n      slots.push(slotData);\n      \n      // Log first and last few slots to verify generation\n      if (i < 3 || i >= durationDays - 3) {\n        console.log(`Slot ${i + 1}/${durationDays}: ${slotData.bookingDate} at ${slotData.startTime}`);\n      }\n    }\n    \n    console.log(`Generated ${slots.length} slots for ${planType} booking`);\n\n    const bookingData = {\n      groundId: facility.groundId || facility.id, // Use groundId from master tables\n      bookingType,\n      planType,\n      participantCount,\n      totalAmount: calculateTotal(),\n      discountAmount: 0, // Required field for schema validation\n      paidAmount: 0, // Start with 0 as payment is pending\n      paymentMethod: \"pending\", // Default payment method until payment is completed\n      bookingDate,\n      startTime: selectedTimeSlot || \"09:00\", \n      endTime: selectedTimeSlot ? getEndTime(selectedTimeSlot, duration) : \"10:00\",\n      duration,\n      startDate: planType !== \"hourly\" ? (startDate ? formatDateLocal(startDate) : bookingDate) : bookingDate,\n      endDate: planType !== \"hourly\" && calculatedEndDate ? formatDateLocal(calculatedEndDate) : bookingDate,\n      slots\n    };\n\n    createBookingMutation.mutate(bookingData, {\n      onSuccess: async (response) => {\n        const booking = await response.json();\n        \n        // All bookings now redirect to payment page for consistent processing\n        const bookingId = booking.booking ? booking.booking.id : booking.id;\n        \n        // Show appropriate success message based on user type\n        if (isAdminBooking) {\n          toast({\n            title: \"Booking Created!\",\n            description: \"Complete payment on the next screen to confirm booking.\",\n            duration: 3000,\n          });\n        } else {\n          toast({\n            title: \"Booking Created!\", \n            description: \"Complete payment to confirm your booking.\",\n            duration: 3000,\n          });\n        }\n        \n        onClose();\n        \n        // Redirect to payment screen with booking details and parameters\n        setLocation(`/payment/${bookingId}?total=${calculateTotal()}&isAdmin=${isAdminBooking}&module=booking&loginId=${encodeURIComponent(user?.id || '')}`);\n      },\n      onError: (error) => {\n        console.error(\"Booking creation failed:\", error);\n        \n        // Extract the specific error message - apiRequest already parses backend errors\n        let errorMessage = \"Unable to create booking. Please try again.\";\n        \n        if (error instanceof Error) {\n          // The apiRequest function formats errors as \"statusCode: errorMessage\"\n          const fullMessage = error.message;\n          \n          // Extract just the error message part (after the status code)\n          if (fullMessage.includes(': ')) {\n            errorMessage = fullMessage.split(': ').slice(1).join(': ');\n          } else {\n            errorMessage = fullMessage;\n          }\n          \n          // Clean up common backend error message formatting\n          if (errorMessage.startsWith('\"') && errorMessage.endsWith('\"')) {\n            errorMessage = errorMessage.slice(1, -1);\n          }\n          \n          // Parse JSON error messages if they exist\n          try {\n            const parsed = JSON.parse(errorMessage);\n            if (parsed.message) {\n              errorMessage = parsed.message;\n            } else if (parsed.error) {\n              errorMessage = parsed.error;\n            }\n          } catch (e) {\n            // Not JSON, keep the original message\n          }\n        }\n        \n        toast({\n          title: \"Unable to Complete Booking\",\n          description: errorMessage,\n          variant: \"destructive\",\n          duration: 8000, // Show longer so user can read the specific issue\n        });\n      }\n    });\n  };\n\n  const handleClose = () => {\n    onClose();\n    setLocation('/');\n  };\n\n  if (!facility) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-primary\">\n            Book {facility.name}\n          </DialogTitle>\n          <DialogDescription>\n            Complete your booking details below. Choose between immediate payment or pay later option.\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Facility Information */}\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-start space-x-4\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-blue-600 rounded-lg flex items-center justify-center text-white font-bold text-xl\">\n                  {facility.name.charAt(0).toUpperCase()}\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold\">{facility.name}</h3>\n                  <p className=\"text-gray-600 capitalize\">{facility.type} facility</p>\n                  <p className=\"text-sm text-gray-500\">Capacity: {facility.capacity} people</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Left Column */}\n            <div className=\"space-y-6\">\n              {/* Booking Type */}\n              <div>\n                <Label className=\"text-lg font-semibold\">Booking Type</Label>\n                <RadioGroup value={bookingType} onValueChange={(value: any) => setBookingType(value)} className=\"mt-2\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <Label className={`border rounded-lg p-4 transition-colors ${\n                      sportBookingOptions.perPerson \n                        ? 'cursor-pointer hover:border-primary [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50' \n                        : 'cursor-not-allowed opacity-50 bg-gray-100'\n                    }`}>\n                      <RadioGroupItem \n                        value=\"per-person\" \n                        className=\"sr-only\" \n                        disabled={!sportBookingOptions.perPerson}\n                      />\n                      <div className=\"text-center\">\n                        <User className={`h-6 w-6 mx-auto mb-2 ${\n                          sportBookingOptions.perPerson ? 'text-primary' : 'text-gray-400'\n                        }`} />\n                        <div className=\"font-medium\">Per Person</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {sportBookingOptions.perPerson ? 'Pay per participant' : 'Not available for this sport'}\n                        </div>\n                      </div>\n                    </Label>\n                    <Label className={`border rounded-lg p-4 transition-colors ${\n                      sportBookingOptions.fullGround \n                        ? 'cursor-pointer hover:border-primary [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50' \n                        : 'cursor-not-allowed opacity-50 bg-gray-100'\n                    }`}>\n                      <RadioGroupItem \n                        value=\"full-ground\" \n                        className=\"sr-only\" \n                        disabled={!sportBookingOptions.fullGround}\n                      />\n                      <div className=\"text-center\">\n                        <Users className={`h-6 w-6 mx-auto mb-2 ${\n                          sportBookingOptions.fullGround ? 'text-primary' : 'text-gray-400'\n                        }`} />\n                        <div className=\"font-medium\">Full Ground</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {sportBookingOptions.fullGround ? 'Book entire facility' : 'Not available for this sport'}\n                        </div>\n                      </div>\n                    </Label>\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {/* Plan Selection */}\n              <div>\n                <Label className=\"text-lg font-semibold\">Choose Plan</Label>\n                <RadioGroup value={planType} onValueChange={(value: any) => setPlanType(value)} className=\"mt-2\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    {filteredPlans.length > 0 ? (\n                      filteredPlans.map((plan: any) => {\n                        const planTypeKey = plan.planName.toLowerCase().includes('hourly') ? 'hourly' : \n                                          plan.planName.toLowerCase().includes('monthly') ? 'monthly' : 'yearly';\n                        \n                        return (\n                          <Label key={plan.id} className=\"border rounded-lg p-4 cursor-pointer hover:border-primary transition-colors [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50\">\n                            <RadioGroupItem value={planTypeKey} className=\"sr-only\" />\n                            <div className=\"text-center\">\n                              {planTypeKey === 'hourly' && <Clock className=\"h-5 w-5 text-primary mx-auto mb-2\" />}\n                              {planTypeKey === 'monthly' && <CalendarIcon className=\"h-5 w-5 text-primary mx-auto mb-2\" />}\n                              {planTypeKey === 'yearly' && <CalendarIcon className=\"h-5 w-5 text-primary mx-auto mb-2\" />}\n                              <div className=\"font-medium\">{planTypeKey.charAt(0).toUpperCase() + planTypeKey.slice(1)}</div>\n                              <div className=\"text-primary font-semibold\">\n                                ₹{Number(plan.basePrice).toLocaleString()}/{planTypeKey === 'hourly' ? 'hour' : planTypeKey}\n                              </div>\n                              <div className=\"text-sm text-gray-600\">\n                                {planTypeKey === 'hourly' && 'Flexible timing'}\n                                {planTypeKey === 'monthly' && '30-day access'}\n                                {planTypeKey === 'yearly' && '365-day access'}\n                              </div>\n                            </div>\n                          </Label>\n                        );\n                      })\n                    ) : (\n                      <div className=\"col-span-3 text-center text-gray-500 py-8\">\n                        No plans available for {bookingType.replace('-', ' ')} booking\n                      </div>\n                    )}\n                  </div>\n                </RadioGroup>\n              </div>\n\n              {planType === \"hourly\" && (\n                <>\n                  {/* Date Selection */}\n                  <div>\n                    <Label className=\"text-lg font-semibold\">Select Date</Label>\n                    <Calendar\n                      mode=\"single\"\n                      selected={selectedDate}\n                      onSelect={setSelectedDate}\n                      disabled={(date) => date < new Date()}\n                      className=\"rounded-md border w-full mt-2\"\n                    />\n                  </div>\n\n                  {/* Duration and Participant Count */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <Label>Duration (Hours)</Label>\n                      <Select value={duration.toString()} onValueChange={(value) => setDuration(Number(value))}>\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"1\">1 Hour</SelectItem>\n                          <SelectItem value=\"2\">2 Hours</SelectItem>\n                          <SelectItem value=\"3\">3 Hours</SelectItem>\n                          <SelectItem value=\"4\">4 Hours</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n\n                    {bookingType === \"per-person\" && (\n                      <div>\n                        <Label>Participants</Label>\n                        <Input\n                          type=\"number\"\n                          min={1}\n                          max={getMaxParticipantsForSelectedSlot()}\n                          value={participantCount}\n                          onChange={(e) => {\n                            const value = Number(e.target.value);\n                            const maxAllowed = getMaxParticipantsForSelectedSlot();\n                            if (value <= maxAllowed) {\n                              setParticipantCount(value);\n                            } else {\n                              toast({\n                                title: \"Capacity Exceeded\",\n                                description: `Only ${maxAllowed} participants available for the selected time slot.`,\n                                variant: \"destructive\",\n                              });\n                            }\n                          }}\n                          placeholder={`Max ${getMaxParticipantsForSelectedSlot()} people`}\n                        />\n                        <p className=\"text-sm text-gray-500 mt-1\">\n                          {selectedTimeSlot ? (\n                            `Available for ${selectedTimeSlot}: ${getMaxParticipantsForSelectedSlot()} people`\n                          ) : (\n                            `Select a time slot first. Max capacity: ${facility?.capacity || 10} people`\n                          )}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                </>\n              )}\n\n              {/* Start Date for Monthly/Yearly Plans */}\n              {(planType === \"monthly\" || planType === \"yearly\") && (\n                <>\n                  <div>\n                    <Label className=\"text-lg font-semibold\">Plan Start Date</Label>\n                    <Calendar\n                      mode=\"single\"\n                      selected={startDate}\n                      onSelect={setStartDate}\n                      disabled={(date) => date < new Date()}\n                      className=\"rounded-md border w-full mt-2\"\n                    />\n                    <div className=\"mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                      <div className=\"text-sm\">\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-gray-700\">Plan Duration:</span>\n                          <span className=\"text-blue-600 font-semibold\">\n                            {planType === \"monthly\" ? \"30 days\" : \"365 days\"}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center mb-2\">\n                          <span className=\"font-medium text-gray-700\">Start Date:</span>\n                          <span className=\"text-gray-900\">\n                            {startDate ? startDate.toLocaleDateString() : \"Not selected\"}\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium text-gray-700\">End Date:</span>\n                          <span className=\"text-green-600 font-semibold\">\n                            {endDate ? endDate.toLocaleDateString() : \"Select start date\"}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Participant Count for Monthly/Yearly Plans */}\n                  {bookingType === \"per-person\" && (\n                    <div>\n                      <Label>Participants</Label>\n                      <Input\n                        type=\"number\"\n                        min={1}\n                        max={facility?.capacity || 10}\n                        value={participantCount}\n                        onChange={(e) => {\n                          const value = Number(e.target.value);\n                          if (value <= (facility?.capacity || 10)) {\n                            setParticipantCount(value);\n                          } else {\n                            toast({\n                              title: \"Capacity Exceeded\",\n                              description: `Maximum capacity is ${facility?.capacity || 10} people.`,\n                              variant: \"destructive\",\n                            });\n                          }\n                        }}\n                        placeholder={`Max ${facility?.capacity || 10} people`}\n                      />\n                      <p className=\"text-sm text-gray-500 mt-1\">Maximum capacity: {facility?.capacity || 10} people</p>\n                    </div>\n                  )}\n                </>\n              )}\n\n\n            </div>\n\n            {/* Right Column */}\n            <div className=\"space-y-6\">\n              \n\n\n\n              {/* Time Slots */}\n              <div>\n                <Label className=\"text-lg font-semibold\">\n                  {planType === \"hourly\" ? \"Available Time Slots\" : \"Select Your Daily Time Slot\"}\n                </Label>\n                {planType !== \"hourly\" && (\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    This time slot will be reserved for you every day during your {planType} membership\n                  </p>\n                )}\n                <div className=\"grid grid-cols-2 gap-2 mt-2\">\n                  {timeSlots?.map((slot: any) => {\n                    // Get available capacity for color coding\n                    const availableCapacity = slot.availableCapacity || 0;\n                    \n                    // Debug log for troubleshooting colors\n                    console.log(`Slot ${slot.startTime}: availableCapacity=${availableCapacity}, maxCapacity=${slot.maxCapacity}, isAvailable=${slot.isAvailable}`);\n                    \n                    // Determine background color based on absolute availability numbers\n                    let bgColor = \"\";\n                    let textColor = \"\";\n                    let borderColor = \"\";\n                    \n                    if (!slot.isAvailable || availableCapacity === 0) {\n                      // No availability - red\n                      bgColor = selectedTimeSlot === slot.startTime ? \"bg-red-600\" : \"bg-red-100 hover:bg-red-200\";\n                      textColor = selectedTimeSlot === slot.startTime ? \"text-white\" : \"text-red-800\";\n                      borderColor = \"border-red-300\";\n                      console.log(`🔴 Red - Slot ${slot.startTime}: No availability (0 slots)`);\n                    } else if (availableCapacity <= 2) {\n                      // Low availability (1-2 slots remaining) - orange\n                      bgColor = selectedTimeSlot === slot.startTime ? \"bg-orange-600\" : \"bg-orange-100 hover:bg-orange-200\";\n                      textColor = selectedTimeSlot === slot.startTime ? \"text-white\" : \"text-orange-800\";\n                      borderColor = \"border-orange-300\";\n                      console.log(`🟠 Orange - Slot ${slot.startTime}: Low availability (${availableCapacity} slots)`);\n                    } else if (availableCapacity <= 4) {\n                      // Medium availability (3-4 slots remaining) - yellow\n                      bgColor = selectedTimeSlot === slot.startTime ? \"bg-yellow-600\" : \"bg-yellow-100 hover:bg-yellow-200\";\n                      textColor = selectedTimeSlot === slot.startTime ? \"text-white\" : \"text-yellow-800\";\n                      borderColor = \"border-yellow-300\";\n                      console.log(`🟡 Yellow - Slot ${slot.startTime}: Medium availability (${availableCapacity} slots)`);\n                    } else {\n                      // High availability (5+ slots remaining) - green\n                      bgColor = selectedTimeSlot === slot.startTime ? \"bg-green-600\" : \"bg-green-100 hover:bg-green-200\";\n                      textColor = selectedTimeSlot === slot.startTime ? \"text-white\" : \"text-green-800\";\n                      borderColor = \"border-green-300\";\n                      console.log(`🟢 Green - Slot ${slot.startTime}: High availability (${availableCapacity} slots)`);\n                    }\n                    \n                    return (\n                      <Button\n                        key={slot.id}\n                        variant=\"outline\"  \n                        onClick={() => setSelectedTimeSlot(slot.startTime)}\n                        className={`h-16 flex flex-col justify-center transition-colors ${bgColor} ${textColor} ${borderColor}`}\n                        disabled={!slot.isAvailable}\n                      >\n                        <div className=\"text-sm font-medium\">\n                          {slot.startTime?.substring(0, 5)} - {slot.endTime?.substring(0, 5)}\n                        </div>\n                        <div className=\"text-xs opacity-90\">\n                          {slot.isAvailable ? (\n                            slot.supportsPerPerson && slot.maxCapacity > 0 ? (\n                              `Available: ${slot.availableCapacity}/${slot.maxCapacity}`\n                            ) : 'Available'\n                          ) : (\n                            slot.supportsPerPerson ? \n                              `Full (${slot.bookedCount}/${slot.maxCapacity})` : \n                              'Booked'\n                          )}\n                        </div>\n                      </Button>\n                    );\n                  })}\n                </div>\n              </div>\n\n              {/* Booking Summary */}\n              <div>\n                <Label className=\"text-lg font-semibold\">Booking Summary</Label>\n                <Card className=\"mt-2 bg-gray-50 border-gray-200\">\n                  <CardContent className=\"p-4\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Facility:</span>\n                        <span className=\"font-medium\">{facility.name}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Plan:</span>\n                        <span className=\"font-medium capitalize\">{planType}</span>\n                      </div>\n                      <div className=\"flex justify-between text-sm\">\n                        <span>Booking Type:</span>\n                        <span className=\"font-medium capitalize\">{bookingType.replace('-', ' ')}</span>\n                      </div>\n                      {bookingType === \"per-person\" && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Participants:</span>\n                          <span className=\"font-medium\">{participantCount} people</span>\n                        </div>\n                      )}\n                      {planType === \"hourly\" && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Duration:</span>\n                          <span className=\"font-medium\">{duration} hour{duration > 1 ? 's' : ''}</span>\n                        </div>\n                      )}\n                      {selectedDate && planType === \"hourly\" && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Date:</span>\n                          <span className=\"font-medium\">{selectedDate.toLocaleDateString()}</span>\n                        </div>\n                      )}\n                      {startDate && (planType === \"monthly\" || planType === \"yearly\") && (\n                        <>\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Start Date:</span>\n                            <span className=\"font-medium\">{startDate.toLocaleDateString()}</span>\n                          </div>\n                          {endDate && (\n                            <div className=\"flex justify-between text-sm\">\n                              <span>End Date:</span>\n                              <span className=\"font-medium text-green-600\">{endDate.toLocaleDateString()}</span>\n                            </div>\n                          )}\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Duration:</span>\n                            <span className=\"font-medium text-blue-600\">\n                              {planType === \"monthly\" ? \"30 days\" : \"365 days\"}\n                            </span>\n                          </div>\n                        </>\n                      )}\n                      {selectedTimeSlot && (\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Time:</span>\n                          <span className=\"font-medium\">{selectedTimeSlot} - {getEndTime(selectedTimeSlot, duration)}</span>\n                        </div>\n                      )}\n                      <Separator />\n                      \n                      {/* Detailed Pricing Breakdown */}\n                      {(() => {\n                        const breakdown = getPricingBreakdown();\n                        if (breakdown && selectedTimeSlot) {\n                          return (\n                            <>\n                              <div className=\"text-sm font-medium text-gray-700 mb-2\">Price Calculation:</div>\n                              <div className=\"space-y-1 text-sm\">\n                                <div className=\"flex justify-between\">\n                                  <span>Base Price per hour:</span>\n                                  <span>₹{breakdown.basePrice}</span>  \n                                </div>\n                                \n                                {/* Show slot-by-slot breakdown for hourly plans */}\n                                {planType === \"hourly\" && breakdown.slots && (\n                                  <>\n                                    {breakdown.nonPeakSlots > 0 && (\n                                      <div className=\"flex justify-between\">\n                                        <span>Non-peak hours ({breakdown.nonPeakSlots}h):</span>\n                                        <span>₹{(breakdown.basePrice * (breakdown.isWeekend ? breakdown.weekendMultiplier : 1) * breakdown.nonPeakSlots).toFixed(0)}</span>\n                                      </div>\n                                    )}\n                                    {breakdown.peakSlots > 0 && (\n                                      <div className=\"flex justify-between text-orange-600\">\n                                        <span>Peak hours ({breakdown.peakSlots}h) (+{((breakdown.peakMultiplier - 1) * 100).toFixed(0)}%):</span>\n                                        <span>₹{(breakdown.basePrice * breakdown.peakMultiplier * (breakdown.isWeekend ? breakdown.weekendMultiplier : 1) * breakdown.peakSlots).toFixed(0)}</span>\n                                      </div>\n                                    )}\n                                    {breakdown.isWeekend && breakdown.weekendMultiplier > 1 && (\n                                      <div className=\"flex justify-between text-blue-600\">\n                                        <span>Weekend multiplier (+{((breakdown.weekendMultiplier - 1) * 100).toFixed(0)}%):</span>\n                                        <span>Applied above</span>\n                                      </div>\n                                    )}\n                                  </>\n                                )}\n                                \n                                {/* Show old breakdown for monthly/yearly plans */}\n                                {planType !== \"hourly\" && (\n                                  <>\n                                    {breakdown.isPeakHour && breakdown.peakMultiplier > 1 && (\n                                      <div className=\"flex justify-between text-orange-600\">\n                                        <span>Peak Hour (+{((breakdown.peakMultiplier - 1) * 100).toFixed(0)}%):</span>\n                                        <span>₹{(breakdown.basePrice * breakdown.peakMultiplier).toFixed(0)}</span>\n                                      </div>\n                                    )}\n                                    {breakdown.isWeekend && breakdown.weekendMultiplier > 1 && (\n                                      <div className=\"flex justify-between text-blue-600\">\n                                        <span>Weekend (+{((breakdown.weekendMultiplier - 1) * 100).toFixed(0)}%):</span>\n                                        <span>₹{(breakdown.basePrice * (breakdown.isPeakHour ? breakdown.peakMultiplier : 1) * breakdown.weekendMultiplier).toFixed(0)}</span>\n                                      </div>\n                                    )}\n                                  </>\n                                )}\n                                \n                                {breakdown.participantCount > 1 && (\n                                  <div className=\"flex justify-between\">\n                                    <span>× {breakdown.participantCount} participants:</span>\n                                    <span>₹{calculateTotal().toFixed(0)}</span>\n                                  </div>\n                                )}\n                              </div>\n                              <Separator className=\"my-2\" />\n                            </>\n                          );\n                        }\n                        return null;\n                      })()}\n                      \n                      <div className=\"flex justify-between text-lg font-bold\">\n                        <span>Total Amount:</span>\n                        <span className=\"text-primary\">₹{calculateTotal().toLocaleString()}</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button \n              variant=\"outline\" \n              onClick={handleClose}\n              disabled={createBookingMutation.isPending}\n            >\n              Cancel\n            </Button>\n            \n            <Button \n              onClick={handleBookNow} \n              className=\"bg-primary text-white\"\n              disabled={\n                createBookingMutation.isPending || \n                (planType === \"hourly\" && (!selectedDate || !selectedTimeSlot)) ||\n                ((planType === \"monthly\" || planType === \"yearly\") && !startDate) ||\n                (bookingType === \"per-person\" && participantCount > (facility?.capacity || 10))\n              }\n            >\n              {createBookingMutation.isPending ? \"Processing...\" : \"Book Now\"}\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":51099},"client/src/components/FacilityCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, Users, MapPin } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Facility } from \"@shared/schema\";\n\ninterface FacilityCardProps {\n  facility: Facility;\n  onBookNow?: () => void;\n}\n\nconst facilityImages: Record<string, string> = {\n  badminton: \"https://images.unsplash.com/photo-1612872087720-bb876e2e67d1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  soccer: \"https://images.unsplash.com/photo-1574629810360-7efbbe195018?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  basketball: \"https://images.unsplash.com/photo-1546519638-68e109498ffc?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  swimming: \"https://images.unsplash.com/photo-1571902943202-507ec2618e8f?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  cricket: \"https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n  \"multi-purpose\": \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n};\n\nexport default function FacilityCard({ facility, onBookNow }: FacilityCardProps) {\n  const { isAuthenticated } = useAuth();\n\n  const handleBookNow = () => {\n    if (onBookNow) {\n      onBookNow();\n    } else {\n      // Fallback to the old booking page if no callback provided\n      window.location.href = `/booking/${facility.id}`;\n    }\n  };\n\n  const getStatusBadge = () => {\n    if (!facility.isActive) {\n      return <Badge variant=\"destructive\">Closed</Badge>;\n    }\n    \n    // For now, show all active facilities as available\n    // In a real app, this would check current bookings\n    return <Badge className=\"bg-secondary text-white\">Available</Badge>;\n  };\n\n  const formatPrice = (price: string | number) => {\n    return `₹${Number(price).toLocaleString()}`;\n  };\n\n  return (\n    <Card className=\"facility-card-hover cursor-pointer overflow-hidden\">\n      <div className=\"relative\">\n        <img \n          src={facility.imageUrl || facilityImages[facility.type] || facilityImages['multi-purpose']} \n          alt={facility.name}\n          className=\"w-full h-48 object-cover\"\n        />\n        <div className=\"absolute top-4 right-4\">\n          {getStatusBadge()}\n        </div>\n      </div>\n      \n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <h3 className=\"text-xl font-semibold text-gray-900\">{facility.name}</h3>\n        </div>\n        \n        <p className=\"text-gray-600 mb-4 line-clamp-2\">{facility.description}</p>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex items-center text-sm text-gray-500\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            <span>Capacity: {facility.capacity} people</span>\n          </div>\n          <div className=\"flex items-center text-sm text-gray-500\">\n            <Clock className=\"h-4 w-4 mr-2\" />\n            <span>6:00 AM - 10:00 PM</span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-primary font-semibold text-lg\">\n              {formatPrice(facility.hourlyRate)}/hour\n            </span>\n            {facility.monthlyRate && (\n              <span className=\"text-sm text-gray-500\">\n                {formatPrice(facility.monthlyRate)}/month\n              </span>\n            )}\n          </div>\n          \n          <Button \n            onClick={handleBookNow}\n            className=\"btn-sports-primary\"\n            disabled={!facility.isActive}\n          >\n            Book Now\n          </Button>\n        </div>\n        \n        {facility.amenities && Array.isArray(facility.amenities) && facility.amenities.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <div className=\"flex flex-wrap gap-1\">\n              {facility.amenities.slice(0, 3).map((amenity, index) => (\n                <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                  {amenity as string}\n                </Badge>\n              ))}\n              {facility.amenities.length > 3 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{facility.amenities.length - 3} more\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4543},"client/src/components/HeroSection.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { CalendarPlus, Search } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function HeroSection() {\n  const { isAuthenticated } = useAuth();\n\n  const scrollToFacilities = () => {\n    const element = document.querySelector('#facilities');\n    if (element) {\n      element.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  const handleBookNow = () => {\n    // Always redirect to facilities - users can explore before login\n    window.location.href = '/facilities';\n  };\n\n  return (\n    <section id=\"home\" className=\"relative h-screen flex items-center justify-center\">\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\" \n        style={{\n          backgroundImage: \"url('https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080')\"\n        }}\n      />\n      <div className=\"absolute inset-0 bg-black bg-opacity-50\" />\n      \n      <div className=\"relative z-10 text-center text-white max-w-4xl mx-auto px-4\">\n        <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n          Welcome to <span className=\"text-accent\">Aryen Recreation Centre</span>\n        </h1>\n        <p className=\"text-xl md:text-2xl mb-8 text-gray-200\">\n          Book premium sports facilities online. Play badminton, soccer, basketball, swim, and more!\n        </p>\n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n          <Button \n            onClick={handleBookNow}\n            className=\"bg-primary hover:bg-blue-700 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all transform hover:scale-105\"\n            size=\"lg\"\n          >\n            <CalendarPlus className=\"mr-2 h-5 w-5\" />\n            Book a Slot Now\n          </Button>\n          <Button \n            onClick={scrollToFacilities}\n            variant=\"outline\"\n            className=\"bg-transparent border-2 border-white hover:bg-white hover:text-gray-900 text-white px-8 py-4 rounded-lg text-lg font-semibold transition-all\"\n            size=\"lg\"\n          >\n            <Search className=\"mr-2 h-5 w-5\" />\n            Explore Facilities\n          </Button>\n        </div>\n      </div>\n      \n      {/* Floating scroll indicator */}\n      <div className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce\">\n        <button \n          onClick={scrollToFacilities}\n          className=\"text-white hover:text-accent transition-colors\"\n        >\n          <div className=\"w-6 h-10 border-2 border-white rounded-full flex justify-center\">\n            <div className=\"w-1 h-3 bg-white rounded-full mt-2 animate-pulse\" />\n          </div>\n        </button>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2760},"client/src/components/Navbar.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Dumbbell, Menu, User, LogOut } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport default function Navbar() {\n  const { isAuthenticated, user } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigationItems = [\n    { name: \"Home\", href: \"/\" },\n    { name: \"Facilities\", href: \"/facilities\" },\n    { name: \"About\", href: \"#about\" },\n    { name: \"FAQs\", href: \"#faqs\" },\n    { name: \"Contact\", href: \"#contact\" },\n  ];\n\n  const userNavigationItems = isAuthenticated ? [\n    { name: \"Dashboard\", href: \"/\" },\n    { name: \"Facilities\", href: \"/facilities\" },\n    { name: \"My Bookings\", href: \"/profile\" },\n    ...(user?.role === 'admin' || user?.role === 'manager' \n      ? [{ name: \"Management\", href: \"/admin\" }] \n      : []\n    ),\n  ] : navigationItems;\n\n  const scrollToSection = (href: string) => {\n    if (href.startsWith('#')) {\n      const element = document.querySelector(href);\n      if (element) {\n        element.scrollIntoView({ behavior: 'smooth' });\n      }\n    }\n  };\n\n  return (\n    <nav className=\"bg-white shadow-lg sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <Link href=\"/\" className=\"flex items-center\">\n            <Dumbbell className=\"h-8 w-8 text-primary mr-3\" />\n            <span className=\"font-bold text-xl text-gray-900\">Aryen Recreation Centre</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {!isAuthenticated ? (\n              <>\n                {navigationItems.map((item) => (\n                  item.href.startsWith('#') ? (\n                    <button\n                      key={item.name}\n                      onClick={() => scrollToSection(item.href)}\n                      className=\"text-gray-700 hover:text-primary transition-colors\"\n                    >\n                      {item.name}\n                    </button>\n                  ) : (\n                    <Link \n                      key={item.name}\n                      href={item.href}\n                      className=\"text-gray-700 hover:text-primary transition-colors\"\n                    >\n                      {item.name}\n                    </Link>\n                  )\n                ))}\n                <Button asChild className=\"btn-sports-primary\">\n                  <Link href=\"/login\">Login</Link>\n                </Button>\n              </>\n            ) : (\n              <>\n                {userNavigationItems.map((item) => (\n                  <Link \n                    key={item.name}\n                    href={item.href}\n                    className=\"text-gray-700 hover:text-primary transition-colors\"\n                  >\n                    {item.name}\n                  </Link>\n                ))}\n                \n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"relative h-8 w-8 rounded-full\">\n                      <Avatar className=\"h-8 w-8\">\n                        <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.firstName || undefined} />\n                        <AvatarFallback>\n                          {user?.firstName?.[0]?.toUpperCase() || 'U'}\n                        </AvatarFallback>\n                      </Avatar>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent className=\"w-56\" align=\"end\" forceMount>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"flex items-center\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        <span>Profile</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={() => window.location.href = '/api/logout'}>\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Log out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            )}\n          </div>\n\n          {/* Mobile menu button */}\n          <div className=\"md:hidden\">\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\">\n                  <Menu className=\"h-6 w-6\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px]\">\n                <div className=\"flex flex-col space-y-4 mt-4\">\n                  {!isAuthenticated ? (\n                    <>\n                      {navigationItems.map((item) => (\n                        item.href.startsWith('#') ? (\n                          <button\n                            key={item.name}\n                            onClick={() => {\n                              scrollToSection(item.href);\n                              setMobileMenuOpen(false);\n                            }}\n                            className=\"text-left py-2 text-gray-700 hover:text-primary\"\n                          >\n                            {item.name}\n                          </button>\n                        ) : (\n                          <Link \n                            key={item.name}\n                            href={item.href}\n                            onClick={() => setMobileMenuOpen(false)}\n                            className=\"block py-2 text-gray-700 hover:text-primary\"\n                          >\n                            {item.name}\n                          </Link>\n                        )\n                      ))}\n                      <Button asChild className=\"w-full btn-sports-primary mt-4\">\n                        <Link href=\"/login\">Login</Link>\n                      </Button>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"flex items-center space-x-3 pb-4 border-b\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={user?.profileImageUrl || undefined} alt={user?.firstName || undefined} />\n                          <AvatarFallback>\n                            {user?.firstName?.[0]?.toUpperCase() || 'U'}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium\">{user?.firstName} {user?.lastName}</p>\n                          <p className=\"text-sm text-gray-500\">{user?.email}</p>\n                        </div>\n                      </div>\n                      \n                      {userNavigationItems.map((item) => (\n                        <Link \n                          key={item.name}\n                          href={item.href}\n                          onClick={() => setMobileMenuOpen(false)}\n                          className=\"block py-2 text-gray-700 hover:text-primary\"\n                        >\n                          {item.name}\n                        </Link>\n                      ))}\n                      \n                      <Button\n                        variant=\"outline\"\n                        onClick={() => window.location.href = '/api/logout'}\n                        className=\"w-full mt-4\"\n                      >\n                        <LogOut className=\"mr-2 h-4 w-4\" />\n                        Log out\n                      </Button>\n                    </>\n                  )}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8175},"client/src/components/StatsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon: LucideIcon;\n  trend?: {\n    value: number;\n    label: string;\n  };\n  className?: string;\n  iconColor?: string;\n}\n\nexport default function StatsCard({\n  title,\n  value,\n  description,\n  icon: Icon,\n  trend,\n  className,\n  iconColor = \"bg-primary\"\n}: StatsCardProps) {\n  const formatValue = (val: string | number) => {\n    if (typeof val === 'number') {\n      if (val >= 1000000) {\n        return `${(val / 1000000).toFixed(1)}M`;\n      }\n      if (val >= 1000) {\n        return `${(val / 1000).toFixed(1)}K`;\n      }\n      return val.toLocaleString();\n    }\n    return val;\n  };\n\n  return (\n    <Card className={cn(\"hover:shadow-md transition-shadow\", className)}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center\">\n          <div className={cn(\"w-12 h-12 rounded-lg flex items-center justify-center\", iconColor)}>\n            <Icon className=\"h-6 w-6 text-white\" />\n          </div>\n          <div className=\"ml-4 flex-1\">\n            <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n            <p className=\"text-2xl font-bold text-gray-900\">{formatValue(value)}</p>\n            {description && (\n              <p className=\"text-sm text-gray-500 mt-1\">{description}</p>\n            )}\n            {trend && (\n              <div className=\"flex items-center mt-2\">\n                <span \n                  className={cn(\n                    \"text-sm font-medium\",\n                    trend.value > 0 ? \"text-green-600\" : trend.value < 0 ? \"text-red-600\" : \"text-gray-600\"\n                  )}\n                >\n                  {trend.value > 0 && \"+\"}\n                  {trend.value}%\n                </span>\n                <span className=\"text-xs text-gray-500 ml-1\">{trend.label}</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2082},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      try {\n        const response = await fetch(\"/api/auth/user\", {\n          credentials: \"include\",\n        });\n        \n        if (response.status === 401) {\n          return null; // Not authenticated - return null instead of throwing\n        }\n        \n        if (!response.ok) {\n          throw new Error(`${response.status}: ${response.statusText}`);\n        }\n        \n        return await response.json();\n      } catch (error) {\n        console.error(\"Auth check failed:\", error);\n        return null;\n      }\n    },\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: false,\n    staleTime: Infinity,\n  });\n\n  return {\n    user: user || undefined,\n    isLoading,\n    isAuthenticated: !!user,\n    error,\n  };\n}\n","size_bytes":1021},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/booking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/Navbar\";\nimport FacilityCard from \"@/components/FacilityCard\";\nimport BookingModal from \"@/components/BookingModal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ArrowLeft, Calendar, Clock, Users, MapPin } from \"lucide-react\";\nimport { Link } from \"wouter\";\n// Import facility type from API response\n\nexport default function Booking() {\n  const { facilityId } = useParams<{ facilityId?: string }>();\n  const [selectedFacility, setSelectedFacility] = useState<any | null>(null);\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n\n  const { data: facilities, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/facilities\"],\n  });\n\n  const { data: facility, isLoading: facilityLoading } = useQuery<any>({\n    queryKey: [\"/api/facilities\", facilityId],\n    enabled: !!facilityId,\n  });\n\n  // If facilityId is provided and facility is loaded, open booking modal automatically\n  useEffect(() => {\n    if (facility && facilityId && !selectedFacility) {\n      setSelectedFacility(facility);\n      setIsBookingModalOpen(true);\n    }\n  }, [facility, facilityId, selectedFacility]);\n\n  const handleFacilitySelect = (facility: any) => {\n    setSelectedFacility(facility);\n    setIsBookingModalOpen(true);\n  };\n\n  const facilityImages: Record<string, string> = {\n    badminton: \"https://images.unsplash.com/photo-1612872087720-bb876e2e67d1?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    soccer: \"https://images.unsplash.com/photo-1574629810360-7efbbe195018?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    basketball: \"https://images.unsplash.com/photo-1546519638-68e109498ffc?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    swimming: \"https://images.unsplash.com/photo-1571902943202-507ec2618e8f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    cricket: \"https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\",\n    \"multi-purpose\": \"https://images.unsplash.com/photo-1571019613454-1cb2f99b2d8b?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=600\"\n  };\n\n  const getStatusBadge = (facility: any) => {\n    if (!facility.isActive) {\n      return <Badge variant=\"destructive\">Closed</Badge>;\n    }\n    return <Badge className=\"bg-secondary text-white\">Available</Badge>;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"flex items-center mb-8\">\n          <Link href=\"/facilities\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"mr-4\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Facilities\n            </Button>\n          </Link>\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Book a Facility</h1>\n            <p className=\"text-gray-600\">\n              {facilityId ? \"Complete your booking\" : \"Choose a facility to get started\"}\n            </p>\n          </div>\n        </div>\n\n        {/* Specific Facility View */}\n        {facilityId && facility && (\n          <Card className=\"mb-8 overflow-hidden\">\n            <div className=\"md:flex\">\n              <div className=\"md:flex-shrink-0\">\n                <img \n                  className=\"h-48 w-full object-cover md:h-full md:w-48\"\n                  src={facility.imageUrl || facilityImages[facility.type] || facilityImages['multi-purpose']} \n                  alt={facility.name}\n                />\n              </div>\n              <CardContent className=\"p-8 flex-1\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div>\n                    <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{facility.name}</h2>\n                    <p className=\"text-gray-600 mb-4\">{facility.description}</p>\n                  </div>\n                  {getStatusBadge(facility)}\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-5 w-5 text-primary mr-3\" />\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Capacity</p>\n                      <p className=\"font-medium\">{facility.capacity} people</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-5 w-5 text-primary mr-3\" />\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Operating Hours</p>\n                      <p className=\"font-medium\">6:00 AM - 10:00 PM</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center\">\n                    <MapPin className=\"h-5 w-5 text-primary mr-3\" />\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Type</p>\n                      <p className=\"font-medium capitalize\">{facility.type.replace('-', ' ')}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div>\n                      <p className=\"text-sm text-gray-500\">Starting from</p>\n                      <p className=\"text-2xl font-bold text-primary\">\n                        ₹{Number(facility.hourlyRate).toLocaleString()}/hour\n                      </p>\n                    </div>\n                    {facility.monthlyRate && (\n                      <div>\n                        <p className=\"text-sm text-gray-500\">Monthly</p>\n                        <p className=\"text-lg font-semibold text-gray-700\">\n                          ₹{Number(facility.monthlyRate).toLocaleString()}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <Button \n                    onClick={() => handleFacilitySelect(facility)}\n                    className=\"btn-sports-primary\"\n                    disabled={!facility.isActive}\n                  >\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    Book This Facility\n                  </Button>\n                </div>\n\n                {/* Amenities */}\n                {facility.amenities && Array.isArray(facility.amenities) && facility.amenities.length > 0 && (\n                  <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                    <h3 className=\"text-lg font-semibold mb-3\">Amenities</h3>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {facility.amenities.map((amenity: any, index: number) => (\n                        <Badge key={index} variant=\"outline\">\n                          {String(amenity)}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </div>\n          </Card>\n        )}\n\n        {/* All Facilities Grid */}\n        {!facilityId && (\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6\">Choose Your Facility</h2>\n            \n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                    <div className=\"w-full h-48 bg-gray-300\"></div>\n                    <div className=\"p-6\">\n                      <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded mb-4 w-3/4\"></div>\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 bg-gray-300 rounded w-20\"></div>\n                        <div className=\"h-8 bg-gray-300 rounded w-24\"></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : facilities && facilities.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {facilities.map((facility: any) => (\n                  <div key={facility.id} onClick={() => handleFacilitySelect(facility)}>\n                    <FacilityCard facility={facility} />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No facilities available</h3>\n                  <p className=\"text-gray-500\">Please check back later or contact support.</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n\n        {/* Booking Process Info */}\n        <Card className=\"mt-12\">\n          <CardContent className=\"p-8\">\n            <h2 className=\"text-2xl font-bold text-gray-900 mb-6 text-center\">How to Book</h2>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">1</span>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Choose Facility</h3>\n                <p className=\"text-gray-600\">Select your preferred sports facility and check availability</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">2</span>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Pick Date & Time</h3>\n                <p className=\"text-gray-600\">Choose your booking date, time slot, and duration</p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <span className=\"text-2xl font-bold text-white\">3</span>\n                </div>\n                <h3 className=\"text-lg font-semibold mb-2\">Complete Payment</h3>\n                <p className=\"text-gray-600\">Pay securely online and receive instant confirmation</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Booking Modal */}\n      <BookingModal\n        facility={selectedFacility}\n        isOpen={isBookingModalOpen}\n        onClose={() => {\n          console.log(\"Booking page: onClose called - navigating to home\");\n          setIsBookingModalOpen(false);\n          setSelectedFacility(null);\n          // The modal will handle navigation to home screen\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":11518},"client/src/pages/facilities.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navbar from \"@/components/Navbar\";\nimport FacilityCard from \"@/components/FacilityCard\";\nimport BookingModal from \"@/components/BookingModal\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Filter, SortAsc, MapPin } from \"lucide-react\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// Remove unused import - using API response instead\n\nexport default function Facilities() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [filterTypes, setFilterTypes] = useState<string[]>([]);\n  const [priceRange, setPriceRange] = useState<[number, number]>([0, 1000]);\n  const [isBookingOpen, setIsBookingOpen] = useState(false);\n  const [selectedFacility, setSelectedFacility] = useState<any | null>(null);\n\n  const { data: facilities, isLoading } = useQuery<any[]>({\n    queryKey: [\"/api/facilities\"],\n    refetchInterval: 60000, // Real-time updates every minute\n  });\n\n  const facilityTypes = [\n    { value: \"badminton\", label: \"Badminton\" },\n    { value: \"soccer\", label: \"Soccer\" },\n    { value: \"basketball\", label: \"Basketball\" },\n    { value: \"swimming\", label: \"Swimming\" },\n    { value: \"cricket\", label: \"Cricket\" },\n    { value: \"multi-purpose\", label: \"Multi-Purpose\" },\n  ];\n\n  const filteredFacilities = facilities?.filter((facility) => {\n    const matchesSearch = facility.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         facility.description?.toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesType = filterTypes.length === 0 || filterTypes.includes(facility.type);\n    \n    const hourlyRate = Number(facility.hourlyRate);\n    const matchesPrice = hourlyRate >= priceRange[0] && hourlyRate <= priceRange[1];\n    \n    return matchesSearch && matchesType && matchesPrice && facility.isActive;\n  });\n\n  const sortedFacilities = filteredFacilities?.sort((a, b) => {\n    switch (sortBy) {\n      case \"name\":\n        return a.name.localeCompare(b.name);\n      case \"price-low\":\n        return Number(a.hourlyRate) - Number(b.hourlyRate);\n      case \"price-high\":\n        return Number(b.hourlyRate) - Number(a.hourlyRate);\n      case \"capacity\":\n        return b.capacity - a.capacity;\n      default:\n        return 0;\n    }\n  });\n\n  const handleTypeFilter = (type: string, checked: boolean) => {\n    if (checked) {\n      setFilterTypes([...filterTypes, type]);\n    } else {\n      setFilterTypes(filterTypes.filter(t => t !== type));\n    }\n  };\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setFilterTypes([]);\n    setPriceRange([0, 1000]);\n    setSortBy(\"name\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Our Facilities</h1>\n          <p className=\"text-gray-600\">\n            Discover and book from our wide range of premium sports facilities\n          </p>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"mb-8\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              {/* Search */}\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search facilities...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                  />\n                </div>\n              </div>\n\n              {/* Sort */}\n              <div className=\"w-full lg:w-48\">\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger>\n                    <SortAsc className=\"h-4 w-4 mr-2\" />\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                    <SelectItem value=\"price-low\">Price (Low to High)</SelectItem>\n                    <SelectItem value=\"price-high\">Price (High to Low)</SelectItem>\n                    <SelectItem value=\"capacity\">Capacity</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Mobile Filter Button */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"outline\" className=\"lg:hidden\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filters\n                    {filterTypes.length > 0 && (\n                      <Badge variant=\"secondary\" className=\"ml-2\">\n                        {filterTypes.length}\n                      </Badge>\n                    )}\n                  </Button>\n                </SheetTrigger>\n                <SheetContent>\n                  <SheetHeader>\n                    <SheetTitle>Filter Facilities</SheetTitle>\n                    <SheetDescription>\n                      Narrow down your search with these filters\n                    </SheetDescription>\n                  </SheetHeader>\n                  <div className=\"mt-6 space-y-6\">\n                    {/* Type Filter */}\n                    <div>\n                      <h3 className=\"font-medium mb-3\">Facility Type</h3>\n                      <div className=\"space-y-2\">\n                        {facilityTypes.map((type) => (\n                          <div key={type.value} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={`mobile-${type.value}`}\n                              checked={filterTypes.includes(type.value)}\n                              onCheckedChange={(checked) => \n                                handleTypeFilter(type.value, checked as boolean)\n                              }\n                            />\n                            <label htmlFor={`mobile-${type.value}`} className=\"text-sm\">\n                              {type.label}\n                            </label>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n\n                    {/* Price Range */}\n                    <div>\n                      <h3 className=\"font-medium mb-3\">Price Range (per hour)</h3>\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Min\"\n                            value={priceRange[0]}\n                            onChange={(e) => setPriceRange([Number(e.target.value), priceRange[1]])}\n                          />\n                          <span>-</span>\n                          <Input\n                            type=\"number\"\n                            placeholder=\"Max\"\n                            value={priceRange[1]}\n                            onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    <Button onClick={clearFilters} variant=\"outline\" className=\"w-full\">\n                      Clear Filters\n                    </Button>\n                  </div>\n                </SheetContent>\n              </Sheet>\n\n              {/* Desktop Filter Button */}\n              <Button \n                variant=\"outline\" \n                onClick={clearFilters}\n                className=\"hidden lg:inline-flex\"\n                disabled={filterTypes.length === 0 && searchTerm === \"\" && priceRange[0] === 0 && priceRange[1] === 1000}\n              >\n                Clear Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Desktop Filters Sidebar */}\n        <div className=\"hidden lg:grid lg:grid-cols-4 gap-8\">\n          <div className=\"space-y-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Facility Type</h3>\n                <div className=\"space-y-2\">\n                  {facilityTypes.map((type) => (\n                    <div key={type.value} className=\"flex items-center space-x-2\">\n                      <Checkbox\n                        id={type.value}\n                        checked={filterTypes.includes(type.value)}\n                        onCheckedChange={(checked) => \n                          handleTypeFilter(type.value, checked as boolean)\n                        }\n                      />\n                      <label htmlFor={type.value} className=\"text-sm\">\n                        {type.label}\n                      </label>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-4\">Price Range (per hour)</h3>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Min\"\n                      value={priceRange[0]}\n                      onChange={(e) => setPriceRange([Number(e.target.value), priceRange[1]])}\n                    />\n                    <span>-</span>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"Max\"\n                      value={priceRange[1]}\n                      onChange={(e) => setPriceRange([priceRange[0], Number(e.target.value)])}\n                    />\n                  </div>\n                  <p className=\"text-xs text-gray-500\">\n                    Current range: ₹{priceRange[0]} - ₹{priceRange[1]}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Facilities Grid */}\n          <div className=\"lg:col-span-3\">\n            {isLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <div key={i} className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                    <div className=\"w-full h-48 bg-gray-300\"></div>\n                    <div className=\"p-6\">\n                      <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                      <div className=\"h-3 bg-gray-300 rounded mb-4 w-3/4\"></div>\n                      <div className=\"flex justify-between\">\n                        <div className=\"h-4 bg-gray-300 rounded w-20\"></div>\n                        <div className=\"h-8 bg-gray-300 rounded w-24\"></div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : sortedFacilities && sortedFacilities.length > 0 ? (\n              <>\n                <div className=\"flex items-center justify-between mb-6\">\n                  <p className=\"text-gray-600\">\n                    Found {sortedFacilities.length} facilities\n                    {filterTypes.length > 0 && (\n                      <span className=\"ml-2\">\n                        filtered by: {filterTypes.join(\", \")}\n                      </span>\n                    )}\n                  </p>\n                </div>\n                \n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {sortedFacilities.map((facility) => (\n                    <FacilityCard \n                      key={facility.id} \n                      facility={facility} \n                      onBookNow={() => {\n                        setSelectedFacility(facility);\n                        setIsBookingOpen(true);\n                      }}\n                    />\n                  ))}\n                </div>\n              </>\n            ) : (\n              <Card className=\"text-center py-12\">\n                <CardContent>\n                  <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No facilities found</h3>\n                  <p className=\"text-gray-500 mb-4\">\n                    Try adjusting your search criteria or clearing the filters\n                  </p>\n                  <Button onClick={clearFilters} variant=\"outline\">\n                    Clear Filters\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n\n        {/* Mobile Facilities Grid */}\n        <div className=\"lg:hidden\">\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {Array.from({ length: 4 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-48 bg-gray-300\"></div>\n                  <div className=\"p-6\">\n                    <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded mb-4 w-3/4\"></div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-4 bg-gray-300 rounded w-20\"></div>\n                      <div className=\"h-8 bg-gray-300 rounded w-24\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : sortedFacilities && sortedFacilities.length > 0 ? (\n            <>\n              <div className=\"flex items-center justify-between mb-6\">\n                <p className=\"text-gray-600\">\n                  Found {sortedFacilities.length} facilities\n                </p>\n              </div>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                {sortedFacilities.map((facility) => (\n                  <FacilityCard \n                    key={facility.id} \n                    facility={facility} \n                    onBookNow={() => {\n                      setSelectedFacility(facility);\n                      setIsBookingOpen(true);\n                    }}\n                  />\n                ))}\n              </div>\n            </>\n          ) : (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No facilities found</h3>\n                <p className=\"text-gray-500 mb-4\">\n                  Try adjusting your search criteria or clearing the filters\n                </p>\n                <Button onClick={clearFilters} variant=\"outline\">\n                  Clear Filters\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Booking Modal */}\n      {selectedFacility && (\n        <BookingModal \n          isOpen={isBookingOpen}\n          onClose={() => {\n            setIsBookingOpen(false);\n            setSelectedFacility(null);\n          }}\n          facility={selectedFacility}\n          isAdminBooking={false}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":15994},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Navbar from \"@/components/Navbar\";\nimport FacilityCard from \"@/components/FacilityCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Dialog, \n  DialogContent, \n  DialogHeader, \n  DialogTitle, \n  DialogDescription \n} from \"@/components/ui/dialog\";\nimport { \n  AlertDialog, \n  AlertDialogAction, \n  AlertDialogCancel, \n  AlertDialogContent, \n  AlertDialogDescription, \n  AlertDialogFooter, \n  AlertDialogHeader, \n  AlertDialogTitle \n} from \"@/components/ui/alert-dialog\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CalendarDays, Clock, TrendingUp, Users, Eye, Edit, Trash2, MoreHorizontal } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Facility, Booking } from \"@shared/schema\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // State for booking management modals\n  const [selectedBooking, setSelectedBooking] = useState<Booking | null>(null);\n  const [showViewDialog, setShowViewDialog] = useState(false);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n\n  // Redirect to home if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: facilities } = useQuery<Facility[]>({\n    queryKey: [\"/api/facilities\"],\n    enabled: isAuthenticated,\n    refetchInterval: 60000, // Real-time updates every minute\n  });\n\n  // Get popular facilities with real-time updates from master tables\n  const { data: popularFacilitiesData } = useQuery<Facility[]>({\n    queryKey: [\"/api/facilities/popular\"],\n    enabled: isAuthenticated,\n    refetchInterval: 30000, // Real-time updates every 30 seconds\n  });\n\n  const { data: userBookings } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings/user\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const upcomingBookings = userBookings?.filter(booking => {\n    const bookingDate = new Date(booking.bookingDate);\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Reset time to start of day for comparison\n    bookingDate.setHours(0, 0, 0, 0); // Reset time to start of day for comparison\n    \n    return booking.status !== 'cancelled' && bookingDate >= today;\n  }).slice(0, 3) || [];\n\n  // Use master table data or fallback to facilities\n  const popularFacilities = popularFacilitiesData || facilities?.slice(0, 6) || [];\n\n  // Delete booking mutation\n  const deleteBookingMutation = useMutation({\n    mutationFn: async (bookingId: number) => {\n      return await apiRequest(\"DELETE\", `/api/bookings/${bookingId}`);\n    },\n    onSuccess: async (response) => {\n      const result = await response.json();\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings/user\"] });\n      \n      toast({\n        title: \"Booking Cancelled Successfully\",\n        description: `${result.policy}. ${result.refundAmount > 0 ? `Refund: ₹${result.refundAmount.toLocaleString()}` : 'No refund applicable'}`,\n        duration: 8000,\n      });\n      \n      setShowDeleteDialog(false);\n      setSelectedBooking(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Cancellation Failed\",\n        description: error.message || \"Failed to cancel booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle booking actions\n  const handleViewBooking = (booking: Booking) => {\n    setSelectedBooking(booking);\n    setShowViewDialog(true);\n  };\n\n  const handleEditBooking = (booking: Booking) => {\n    setSelectedBooking(booking);\n    setShowEditDialog(true);\n  };\n\n  const handleDeleteBooking = (booking: Booking) => {\n    setSelectedBooking(booking);\n    setShowDeleteDialog(true);\n  };\n\n  // Calculate cancellation charges based on booking timing and payment status\n  const calculateCancellationPolicy = (booking: Booking) => {\n    if (!booking.bookingDate) return { canCancel: false, deduction: 0, policy: \"Cannot determine cancellation policy\" };\n    \n    const bookingDate = new Date(booking.bookingDate);\n    const currentDate = new Date();\n    const hoursUntilBooking = (bookingDate.getTime() - currentDate.getTime()) / (1000 * 60 * 60);\n    \n    // Check if payment is complete\n    const isPaymentComplete = booking.paymentStatus === 'completed' || booking.paidAmount >= booking.totalAmount;\n    \n    if (!isPaymentComplete) {\n      return { \n        canCancel: true, \n        deduction: 0, \n        policy: \"Free cancellation - No payment completed yet\" \n      };\n    }\n    \n    // Cancellation policy for paid bookings\n    if (hoursUntilBooking >= 24) {\n      return { \n        canCancel: true, \n        deduction: 0.1, // 10% cancellation fee\n        policy: \"10% cancellation fee (24+ hours before booking)\" \n      };\n    } else if (hoursUntilBooking >= 12) {\n      return { \n        canCancel: true, \n        deduction: 0.25, // 25% cancellation fee\n        policy: \"25% cancellation fee (12-24 hours before booking)\" \n      };\n    } else if (hoursUntilBooking >= 2) {\n      return { \n        canCancel: true, \n        deduction: 0.5, // 50% cancellation fee\n        policy: \"50% cancellation fee (2-12 hours before booking)\" \n      };\n    } else {\n      return { \n        canCancel: false, \n        deduction: 1, // No refund\n        policy: \"No refund available (less than 2 hours before booking)\" \n      };\n    }\n  };\n\n  const confirmDeleteBooking = () => {\n    if (selectedBooking) {\n      deleteBookingMutation.mutate(selectedBooking.id);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Welcome Section */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n            Welcome back, {user?.firstName}! 👋\n          </h1>\n          <p className=\"text-gray-600\">\n            Ready for your next sports session? Check out <strong>your personal bookings</strong> below or explore our facilities.\n          </p>\n        </div>\n\n        {/* Personal Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                  <CalendarDays className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">My Upcoming Bookings</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {upcomingBookings.length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                  <Clock className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">My Total Bookings</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {userBookings?.length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                  <Users className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Available Facilities</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {facilities?.filter(f => f.isActive).length || 0}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center\">\n                  <TrendingUp className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Member Since</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {user?.createdAt ? new Date(user.createdAt).getFullYear() : '2024'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Upcoming Bookings */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle>My Upcoming Bookings</CardTitle>\n                  <Link href=\"/profile\">\n                    <Button variant=\"outline\" size=\"sm\">View All</Button>\n                  </Link>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {upcomingBookings.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <CalendarDays className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 mb-4\">No upcoming bookings</p>\n                    <Link href=\"/facilities\">\n                      <Button className=\"btn-sports-primary\">Book a Facility</Button>\n                    </Link>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {upcomingBookings.map((booking) => (\n                      <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:shadow-md transition-shadow\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <div>\n                              <p className=\"font-medium\">{booking.facilityName}</p>\n                              <p className=\"text-sm text-gray-600\">\n                                Booking #{booking.id} - {booking.planType.charAt(0).toUpperCase() + booking.planType.slice(1)}\n                              </p>\n                              <p className=\"text-sm text-gray-500\">\n                                {booking.bookingDate ? \n                                  `${new Date(booking.bookingDate).toLocaleDateString()} at ${booking.startTime?.substring(0, 5) || 'TBD'}` :\n                                  'Date TBD'\n                                }\n                              </p>\n                              <p className=\"text-sm text-gray-500\">\n                                {booking.planType === 'hourly' ? \n                                  `Duration: ${booking.duration || 1} hour(s)` :\n                                  `${booking.planType.charAt(0).toUpperCase() + booking.planType.slice(1)} Plan`\n                                }\n                              </p>\n                            </div>\n                            <div className=\"text-right flex items-center gap-3\">\n                              <div>\n                                <p className=\"font-semibold text-primary\">\n                                  ₹{Number(booking.totalAmount).toLocaleString()}\n                                </p>\n                                <Badge variant={\n                                  booking.status === 'confirmed' ? 'default' :\n                                  booking.status === 'pending' ? 'secondary' : 'outline'\n                                }>\n                                  {booking.status}\n                                </Badge>\n                              </div>\n                              \n                              {/* Action Menu */}\n                              <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                  <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                                    <MoreHorizontal className=\"h-4 w-4\" />\n                                  </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\">\n                                  <DropdownMenuItem onClick={() => handleViewBooking(booking)}>\n                                    <Eye className=\"mr-2 h-4 w-4\" />\n                                    View Details\n                                  </DropdownMenuItem>\n                                  <DropdownMenuItem onClick={() => handleEditBooking(booking)}>\n                                    <Edit className=\"mr-2 h-4 w-4\" />\n                                    Edit Booking\n                                  </DropdownMenuItem>\n                                  <DropdownMenuItem \n                                    onClick={() => handleDeleteBooking(booking)}\n                                    className=\"text-red-600\"\n                                  >\n                                    <Trash2 className=\"mr-2 h-4 w-4\" />\n                                    Cancel Booking\n                                  </DropdownMenuItem>\n                                </DropdownMenuContent>\n                              </DropdownMenu>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Link href=\"/facilities\">\n                  <Button className=\"w-full btn-sports-primary\">\n                    <CalendarDays className=\"mr-2 h-4 w-4\" />\n                    Book a Facility\n                  </Button>\n                </Link>\n                <Link href=\"/profile\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Clock className=\"mr-2 h-4 w-4\" />\n                    View Booking History\n                  </Button>\n                </Link>\n                <Link href=\"/dashboard\">\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Users className=\"mr-2 h-4 w-4\" />\n                    My Dashboard\n                  </Button>\n                </Link>\n\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Popular Facilities */}\n        <div className=\"mt-12\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-2xl font-bold text-gray-900\">Popular Facilities</h2>\n            <Link href=\"/facilities\">\n              <Button variant=\"outline\">View All Facilities</Button>\n            </Link>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {popularFacilities.map((facility) => (\n              <FacilityCard key={facility.id} facility={facility} />\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* View Booking Dialog */}\n      <Dialog open={showViewDialog} onOpenChange={setShowViewDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Booking Details</DialogTitle>\n            <DialogDescription>Complete information about your booking</DialogDescription>\n          </DialogHeader>\n          {selectedBooking && (\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Booking ID</p>\n                  <p className=\"text-sm\">#{selectedBooking.id}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Status</p>\n                  <Badge variant={\n                    selectedBooking.status === 'confirmed' ? 'default' :\n                    selectedBooking.status === 'pending' ? 'secondary' : 'outline'\n                  }>\n                    {selectedBooking.status}\n                  </Badge>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Facility</p>\n                <p className=\"text-sm\">{selectedBooking.facilityName}</p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Plan Type</p>\n                <p className=\"text-sm capitalize\">{selectedBooking.planType}</p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Date</p>\n                  <p className=\"text-sm\">\n                    {selectedBooking.bookingDate ? \n                      new Date(selectedBooking.bookingDate).toLocaleDateString() : \n                      'TBD'\n                    }\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Time</p>\n                  <p className=\"text-sm\">\n                    {selectedBooking.startTime?.substring(0, 5) || 'TBD'}\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Participants</p>\n                  <p className=\"text-sm\">{selectedBooking.participantCount} people</p>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-500\">Duration</p>\n                  <p className=\"text-sm\">\n                    {selectedBooking.planType === 'hourly' ? \n                      `${selectedBooking.duration || 1} hour(s)` :\n                      `${selectedBooking.planType} plan`\n                    }\n                  </p>\n                </div>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Total Amount</p>\n                <p className=\"text-lg font-semibold text-primary\">\n                  ₹{Number(selectedBooking.totalAmount).toLocaleString()}\n                </p>\n              </div>\n              \n              <div>\n                <p className=\"text-sm font-medium text-gray-500\">Payment Method</p>\n                <p className=\"text-sm capitalize\">{selectedBooking.paymentMethod || 'Credit Card'}</p>\n              </div>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Booking Dialog */}\n      <Dialog open={showEditDialog} onOpenChange={setShowEditDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Booking</DialogTitle>\n            <DialogDescription>Modify your booking details</DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <p className=\"text-sm text-gray-600\">\n              Booking editing feature is coming soon! For now, please contact our support team \n              to make changes to your booking.\n            </p>\n            <div className=\"flex gap-2\">\n              <Button onClick={() => setShowEditDialog(false)} variant=\"outline\" className=\"flex-1\">\n                Close\n              </Button>\n              <Button className=\"flex-1\">\n                Contact Support\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Booking Confirmation Dialog */}\n      <AlertDialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <AlertDialogContent className=\"max-w-md\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Cancel Booking</AlertDialogTitle>\n            <AlertDialogDescription asChild>\n              <div>\n                <p className=\"mb-4\">Review the cancellation details for your booking:</p>\n                {selectedBooking && (\n                  <div className=\"space-y-4\">\n                    {/* Booking Details */}\n                    <div className=\"p-3 bg-gray-50 rounded-lg\">\n                      <p className=\"text-sm\"><strong>Facility:</strong> {selectedBooking.facilityName}</p>\n                      <p className=\"text-sm\"><strong>Date:</strong> {selectedBooking.bookingDate ? new Date(selectedBooking.bookingDate).toLocaleDateString() : 'TBD'}</p>\n                      <p className=\"text-sm\"><strong>Total Amount:</strong> ₹{Number(selectedBooking.totalAmount).toLocaleString()}</p>\n                      <p className=\"text-sm\"><strong>Payment Status:</strong> \n                        <span className={`ml-1 ${\n                          selectedBooking.paymentStatus === 'completed' || selectedBooking.paidAmount >= selectedBooking.totalAmount\n                            ? 'text-green-600' : 'text-yellow-600'\n                        }`}>\n                          {selectedBooking.paymentStatus === 'completed' || selectedBooking.paidAmount >= selectedBooking.totalAmount\n                            ? 'Paid' : 'Pending'\n                          }\n                        </span>\n                      </p>\n                    </div>\n\n                    {/* Cancellation Policy */}\n                    {(() => {\n                      const policy = calculateCancellationPolicy(selectedBooking);\n                      const refundAmount = selectedBooking.totalAmount * (1 - policy.deduction);\n                      \n                      return (\n                        <div className={`p-3 rounded-lg border ${\n                          policy.canCancel ? 'bg-blue-50 border-blue-200' : 'bg-red-50 border-red-200'\n                        }`}>\n                          <p className=\"text-sm font-medium mb-2\">Cancellation Policy:</p>\n                          <p className=\"text-sm mb-2\">{policy.policy}</p>\n                          \n                          {policy.canCancel && (\n                            <div className=\"text-sm\">\n                              {policy.deduction > 0 ? (\n                                <>\n                                  <p><strong>Cancellation Fee:</strong> ₹{(selectedBooking.totalAmount * policy.deduction).toLocaleString()}</p>\n                                  <p><strong>Refund Amount:</strong> <span className=\"text-green-600 font-medium\">₹{refundAmount.toLocaleString()}</span></p>\n                                </>\n                              ) : (\n                                <p><strong>Full Refund:</strong> <span className=\"text-green-600 font-medium\">₹{selectedBooking.totalAmount.toLocaleString()}</span></p>\n                              )}\n                            </div>\n                          )}\n                          \n                          {!policy.canCancel && (\n                            <p className=\"text-sm text-red-600 font-medium\">\n                              This booking cannot be cancelled at this time.\n                            </p>\n                          )}\n                        </div>\n                      );\n                    })()}\n                  </div>\n                )}\n              </div>\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Keep Booking</AlertDialogCancel>\n            {selectedBooking && calculateCancellationPolicy(selectedBooking).canCancel && (\n              <AlertDialogAction \n                onClick={confirmDeleteBooking}\n                className=\"bg-red-600 hover:bg-red-700\"\n                disabled={deleteBookingMutation.isPending}\n              >\n                {deleteBookingMutation.isPending ? \"Processing...\" : \"Confirm Cancellation\"}\n              </AlertDialogAction>\n            )}\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}\n","size_bytes":25518},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport HeroSection from \"@/components/HeroSection\";\nimport Navbar from \"@/components/Navbar\";\nimport FacilityCard from \"@/components/FacilityCard\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Dumbbell, Users, Award, Clock, MapPin, Phone, Mail, Facebook, Twitter, Instagram, Youtube, HelpCircle, FileText, ChevronDown, ChevronUp, Shield, AlertCircle, RefreshCw, Calendar } from \"lucide-react\";\nimport type { Facility } from \"@shared/schema\";\n\nexport default function Landing() {\n  const { data: facilities, isLoading } = useQuery<Facility[]>({\n    queryKey: [\"/api/facilities\"],\n  });\n\n  const [openFAQ, setOpenFAQ] = useState<number | null>(null);\n\n  const toggleFAQ = (index: number) => {\n    setOpenFAQ(openFAQ === index ? null : index);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      <HeroSection />\n      \n      {/* Facilities Section */}\n      <section id=\"facilities\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              Our Premium Facilities\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              State-of-the-art sports facilities designed for all skill levels. Book your favorite sport and enjoy world-class amenities.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {isLoading ? (\n              // Loading skeleton\n              Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"bg-white rounded-xl shadow-lg overflow-hidden animate-pulse\">\n                  <div className=\"w-full h-48 bg-gray-300\"></div>\n                  <div className=\"p-6\">\n                    <div className=\"h-4 bg-gray-300 rounded mb-2\"></div>\n                    <div className=\"h-3 bg-gray-300 rounded mb-4 w-3/4\"></div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-4 bg-gray-300 rounded w-20\"></div>\n                      <div className=\"h-8 bg-gray-300 rounded w-24\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))\n            ) : facilities && facilities.length > 0 ? (\n              facilities.map((facility) => (\n                <FacilityCard key={facility.id} facility={facility} />\n              ))\n            ) : (\n              <div className=\"col-span-full text-center py-12\">\n                <p className=\"text-gray-500 text-lg\">No facilities available at the moment.</p>\n              </div>\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* About Section */}\n      <section id=\"about\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-6\">\n                About Aryen Recreation Centre\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-6\">\n                Established with a vision to promote sports and fitness in our community, Aryen Recreation Centre \n                offers state-of-the-art facilities for athletes and sports enthusiasts of all levels.\n              </p>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center\">\n                  <Award className=\"h-6 w-6 text-secondary mr-3\" />\n                  <span className=\"text-gray-700\">Professional-grade equipment and facilities</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Users className=\"h-6 w-6 text-secondary mr-3\" />\n                  <span className=\"text-gray-700\">Experienced coaches and trainers available</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-6 w-6 text-secondary mr-3\" />\n                  <span className=\"text-gray-700\">Flexible booking options to suit your schedule</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Dumbbell className=\"h-6 w-6 text-secondary mr-3\" />\n                  <span className=\"text-gray-700\">Clean, safe, and well-maintained environment</span>\n                </div>\n              </div>\n            </div>\n            <div>\n              <img \n                src=\"https://images.unsplash.com/photo-1576013551627-0cc20b96c2a7?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                alt=\"Modern recreation centre building\" \n                className=\"rounded-xl shadow-lg w-full h-auto\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* FAQs and Policy Section */}\n      <section id=\"faqs\" className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-4\">\n              FAQs & Booking Policy\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-2xl mx-auto\">\n              Everything you need to know about booking and using our facilities\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            {/* FAQs Section */}\n            <div>\n              <div className=\"flex items-center mb-6\">\n                <HelpCircle className=\"h-6 w-6 text-primary mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-900\">Frequently Asked Questions</h3>\n              </div>\n\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    question: \"How do I book a facility?\",\n                    answer: \"You can book facilities online through our website or mobile app. Simply select your preferred sport, date, time slot, and complete the payment process. You'll receive instant confirmation via email and SMS.\"\n                  },\n                  {\n                    question: \"What are the operating hours?\",\n                    answer: \"Our facilities are open from 6:00 AM to 10:00 PM, Monday through Sunday. Peak hours (6:00-9:00 PM on weekdays and 8:00 AM-8:00 PM on weekends) have premium pricing.\"\n                  },\n                  {\n                    question: \"What payment methods do you accept?\",\n                    answer: \"We accept all major credit/debit cards, UPI, net banking, and digital wallets. Payment is required at the time of booking to secure your slot.\"\n                  },\n                  {\n                    question: \"Can I modify or cancel my booking?\",\n                    answer: \"Yes, you can modify or cancel bookings up to 4 hours before your scheduled time. Cancellations made 24+ hours in advance receive full refund, 4-24 hours receive 50% refund.\"\n                  },\n                  {\n                    question: \"Do you provide equipment rental?\",\n                    answer: \"Yes, we offer equipment rental for all sports at additional cost. Equipment includes rackets, balls, protective gear, and other sport-specific items. Advance booking recommended.\"\n                  },\n                  {\n                    question: \"Are there membership plans available?\",\n                    answer: \"Yes, we offer monthly and yearly membership plans with discounted rates, priority booking, and additional benefits. Contact us for detailed membership information and pricing.\"\n                  }\n                ].map((faq, index) => (\n                  <Card key={index} className=\"border border-gray-200 hover:border-primary transition-colors\">\n                    <CardContent className=\"p-0\">\n                      <button\n                        onClick={() => toggleFAQ(index)}\n                        className=\"w-full p-4 text-left flex items-center justify-between hover:bg-gray-50 transition-colors\"\n                      >\n                        <span className=\"font-semibold text-gray-900\">{faq.question}</span>\n                        {openFAQ === index ? (\n                          <ChevronUp className=\"h-5 w-5 text-primary\" />\n                        ) : (\n                          <ChevronDown className=\"h-5 w-5 text-gray-400\" />\n                        )}\n                      </button>\n                      {openFAQ === index && (\n                        <div className=\"px-4 pb-4\">\n                          <p className=\"text-gray-600\">{faq.answer}</p>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </div>\n\n            {/* Booking Policy Section */}\n            <div>\n              <div className=\"flex items-center mb-6\">\n                <FileText className=\"h-6 w-6 text-primary mr-3\" />\n                <h3 className=\"text-2xl font-bold text-gray-900\">Booking Policy</h3>\n              </div>\n\n              <div className=\"space-y-6\">\n                {/* Booking Terms */}\n                <Card className=\"border-l-4 border-l-primary\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-3\">\n                      <Calendar className=\"h-5 w-5 text-primary mr-2\" />\n                      <h4 className=\"font-semibold text-gray-900\">Booking Terms</h4>\n                    </div>\n                    <ul className=\"space-y-2 text-gray-600\">\n                      <li>• Advance booking required for all facilities</li>\n                      <li>• Maximum booking duration: 3 hours per session</li>\n                      <li>• Bookings can be made up to 30 days in advance</li>\n                      <li>• Minimum booking duration: 1 hour</li>\n                      <li>• Group bookings (5+ people) get 10% discount</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Cancellation Policy */}\n                <Card className=\"border-l-4 border-l-yellow-500\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-3\">\n                      <RefreshCw className=\"h-5 w-5 text-yellow-500 mr-2\" />\n                      <h4 className=\"font-semibold text-gray-900\">Cancellation Policy</h4>\n                    </div>\n                    <ul className=\"space-y-2 text-gray-600\">\n                      <li>• <strong>24+ hours before:</strong> 100% refund</li>\n                      <li>• <strong>4-24 hours before:</strong> 50% refund</li>\n                      <li>• <strong>Less than 4 hours:</strong> No refund</li>\n                      <li>• Weather cancellations: Full refund or reschedule</li>\n                      <li>• Medical emergencies: Case-by-case review</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Facility Rules */}\n                <Card className=\"border-l-4 border-l-red-500\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-3\">\n                      <Shield className=\"h-5 w-5 text-red-500 mr-2\" />\n                      <h4 className=\"font-semibold text-gray-900\">Facility Rules</h4>\n                    </div>\n                    <ul className=\"space-y-2 text-gray-600\">\n                      <li>• Proper sports attire and footwear mandatory</li>\n                      <li>• No outside food and beverages allowed</li>\n                      <li>• Smoking and alcohol strictly prohibited</li>\n                      <li>• Clean up after use - maintain facility hygiene</li>\n                      <li>• Report any damage or safety concerns immediately</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                {/* Safety Guidelines */}\n                <Card className=\"border-l-4 border-l-green-500\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center mb-3\">\n                      <AlertCircle className=\"h-5 w-5 text-green-500 mr-2\" />\n                      <h4 className=\"font-semibold text-gray-900\">Safety Guidelines</h4>\n                    </div>\n                    <ul className=\"space-y-2 text-gray-600\">\n                      <li>• Warm-up properly before playing</li>\n                      <li>• Follow all safety instructions and signage</li>\n                      <li>• Children under 16 must be supervised</li>\n                      <li>• First aid available at reception</li>\n                      <li>• Emergency contact: +91 98765 43210</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section id=\"contact\" className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n            <div>\n              <h2 className=\"text-3xl md:text-4xl font-bold text-gray-900 mb-6\">\n                Get in Touch\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Have questions about our facilities or need assistance with booking? \n                We're here to help you get started on your fitness journey.\n              </p>\n              \n              <div className=\"space-y-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                    <MapPin className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <h3 className=\"font-semibold text-gray-900\">Address</h3>\n                    <p className=\"text-gray-600\">123 Sports Complex Road, Recreation District, City 560001</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                    <Phone className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <h3 className=\"font-semibold text-gray-900\">Phone</h3>\n                    <p className=\"text-gray-600\">+91 98765 43210</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                    <Mail className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <h3 className=\"font-semibold text-gray-900\">Email</h3>\n                    <p className=\"text-gray-600\">info@aryenrecreation.com</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-red-500 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"h-6 w-6 text-white\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <h3 className=\"font-semibold text-gray-900\">Operating Hours</h3>\n                    <p className=\"text-gray-600\">Mon-Sun: 6:00 AM - 10:00 PM</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-4\">Send us a Message</h3>\n                <form className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Name</label>\n                    <input \n                      type=\"text\" \n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent\" \n                      required \n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Email</label>\n                    <input \n                      type=\"email\" \n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent\" \n                      required \n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone</label>\n                    <input \n                      type=\"tel\" \n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent\" \n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">Message</label>\n                    <textarea \n                      rows={4} \n                      className=\"w-full border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary focus:border-transparent\" \n                      required\n                    ></textarea>\n                  </div>\n                  <Button type=\"submit\" className=\"w-full btn-sports-primary\">\n                    Send Message\n                  </Button>\n                </form>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-white py-12\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center mb-4\">\n                <Dumbbell className=\"h-8 w-8 text-primary mr-3\" />\n                <span className=\"font-bold text-xl\">Aryen Recreation Centre</span>\n              </div>\n              <p className=\"text-gray-400 mb-4\">\n                Your premier destination for sports and fitness. Join our community and achieve your goals.\n              </p>\n              <div className=\"flex space-x-4\">\n                <Facebook className=\"h-5 w-5 text-gray-400 hover:text-primary cursor-pointer transition-colors\" />\n                <Twitter className=\"h-5 w-5 text-gray-400 hover:text-primary cursor-pointer transition-colors\" />\n                <Instagram className=\"h-5 w-5 text-gray-400 hover:text-primary cursor-pointer transition-colors\" />\n                <Youtube className=\"h-5 w-5 text-gray-400 hover:text-primary cursor-pointer transition-colors\" />\n              </div>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Quick Links</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#home\" className=\"hover:text-primary transition-colors\">Home</a></li>\n                <li><a href=\"#facilities\" className=\"hover:text-primary transition-colors\">Facilities</a></li>\n                <li><a href=\"#about\" className=\"hover:text-primary transition-colors\">About Us</a></li>\n                <li><a href=\"#faqs\" className=\"hover:text-primary transition-colors\">FAQs & Policy</a></li>\n                <li><a href=\"#contact\" className=\"hover:text-primary transition-colors\">Contact</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Membership</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Facilities</h3>\n              <ul className=\"space-y-2 text-gray-400\">\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Badminton Courts</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Soccer Turf</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Basketball Court</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Swimming Pool</a></li>\n                <li><a href=\"#\" className=\"hover:text-primary transition-colors\">Cricket Turf</a></li>\n              </ul>\n            </div>\n            \n            <div>\n              <h3 className=\"font-semibold text-lg mb-4\">Contact Info</h3>\n              <div className=\"space-y-3 text-gray-400\">\n                <div className=\"flex items-center\">\n                  <MapPin className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">123 Sports Complex Road, City 560001</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Phone className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">+91 98765 43210</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-4 w-4 mr-2\" />\n                  <span className=\"text-sm\">info@aryenrecreation.com</span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"border-t border-gray-700 mt-8 pt-8 text-center text-gray-400\">\n            <p>&copy; 2024 Aryen Recreation Centre. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":21769},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { \n  User, \n  Shield, \n  UserPlus, \n  KeyRound, \n  Mail,\n  Lock,\n  Phone,\n  Eye,\n  EyeOff,\n  ArrowLeft\n} from \"lucide-react\";\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [showPassword, setShowPassword] = useState(false);\n  const [activeTab, setActiveTab] = useState<'client' | 'admin' | 'signup' | 'forgot'>('client');\n\n  const handleLogin = async (type: 'client' | 'admin', email: string, password: string) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch(`/api/login/${type}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n        },\n        body: new URLSearchParams({ email, password }),\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Login Successful\",\n          description: result.message,\n        });\n        \n        // Invalidate auth query to refresh user data\n        queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n        \n        // Redirect based on user role\n        if (type === 'admin') {\n          setLocation('/admin');\n        } else {\n          setLocation('/');\n        }\n      } else {\n        throw new Error('Invalid credentials');\n      }\n    } catch (error) {\n      toast({\n        title: \"Login Failed\",\n        description: \"Please check your credentials and try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSignUp = async (userData: any) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(userData),\n        credentials: 'include',\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Account Created Successfully\",\n          description: \"You can now login with your credentials.\",\n        });\n        \n        // Switch to client login tab\n        setActiveTab('client');\n      } else {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleForgotPassword = async (email: string) => {\n    setIsLoading(true);\n    try {\n      // Simulate forgot password functionality\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      toast({\n        title: \"Password Reset Email Sent\",\n        description: \"Check your email for password reset instructions.\",\n      });\n      setActiveTab('client');\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send password reset email.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const ClientLoginForm = () => {\n    const [email, setEmail] = useState('client@demo.com');\n    const [password, setPassword] = useState('client123');\n\n    const onSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      handleLogin('client', email, password);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center\">\n            <User className=\"h-6 w-6 text-blue-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold\">Client Login</h3>\n          <p className=\"text-sm text-gray-600\">Access your bookings and profile</p>\n        </div>\n\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <p className=\"text-sm text-blue-800\">\n            <strong>Demo Credentials:</strong><br />\n            Email: client@demo.com<br />\n            Password: client123\n          </p>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"client-email\">Email Address</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"client-email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"Enter your email\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"client-password\">Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"client-password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                placeholder=\"Enter your password\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n              >\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n            {isLoading ? \"Logging in...\" : \"Login to Your Account\"}\n          </Button>\n        </form>\n\n        <div className=\"space-y-3 text-center\">\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('forgot')}\n            className=\"text-sm text-blue-600 hover:text-blue-800 hover:underline\"\n          >\n            Forgot your password?\n          </button>\n          \n          <div className=\"text-sm text-gray-600\">\n            Don't have an account yet?{' '}\n            <button\n              type=\"button\"\n              onClick={() => setActiveTab('signup')}\n              className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline\"\n            >\n              Sign up here\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const AdminLoginForm = () => {\n    const [email, setEmail] = useState('admin@demo.com');\n    const [password, setPassword] = useState('admin123');\n\n    const onSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      handleLogin('admin', email, password);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center\">\n            <Shield className=\"h-6 w-6 text-red-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold\">Admin Login</h3>\n          <p className=\"text-sm text-gray-600\">Administrative access only</p>\n        </div>\n\n        <div className=\"bg-red-50 border border-red-200 p-4 rounded-lg\">\n          <p className=\"text-sm text-red-800\">\n            <strong>Demo Admin Credentials:</strong><br />\n            Email: admin@demo.com<br />\n            Password: admin123\n          </p>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"admin-email\">Admin Email</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"admin-email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"Enter admin email\"\n                required\n              />\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"admin-password\">Admin Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"admin-password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                placeholder=\"Enter admin password\"\n                required\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n              >\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full bg-red-600 hover:bg-red-700\" disabled={isLoading}>\n            {isLoading ? \"Logging in...\" : \"Login as Administrator\"}\n          </Button>\n        </form>\n\n        <div className=\"text-center\">\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('forgot')}\n            className=\"text-sm text-red-600 hover:text-red-800 hover:underline\"\n          >\n            Forgot admin password?\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const SignUpForm = () => {\n    const [firstName, setFirstName] = useState('');\n    const [lastName, setLastName] = useState('');\n    const [email, setEmail] = useState('');\n    const [phone, setPhone] = useState('');\n    const [password, setPassword] = useState('');\n    const [confirmPassword, setConfirmPassword] = useState('');\n\n    const onSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      \n      if (password !== confirmPassword) {\n        toast({\n          title: \"Password Mismatch\",\n          description: \"Passwords do not match. Please try again.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (password.length < 6) {\n        toast({\n          title: \"Password Too Short\",\n          description: \"Password must be at least 6 characters long.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      handleSignUp({\n        firstName,\n        lastName,\n        email,\n        phone,\n        password,\n        role: 'client'\n      });\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('client')}\n            className=\"absolute top-4 left-4 text-gray-500 hover:text-gray-700\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </button>\n          <div className=\"mx-auto w-12 h-12 bg-green-100 rounded-full flex items-center justify-center\">\n            <UserPlus className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold\">Create New Account</h3>\n          <p className=\"text-sm text-gray-600\">Join Aryen Recreation Centre today</p>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"firstName\">First Name</Label>\n              <Input\n                id=\"firstName\"\n                type=\"text\"\n                value={firstName}\n                onChange={(e) => setFirstName(e.target.value)}\n                placeholder=\"John\"\n                required\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"lastName\">Last Name</Label>\n              <Input\n                id=\"lastName\"\n                type=\"text\"\n                value={lastName}\n                onChange={(e) => setLastName(e.target.value)}\n                placeholder=\"Doe\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"signup-email\">Email Address</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"signup-email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"john.doe@example.com\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"phone\">Phone Number</Label>\n            <div className=\"relative\">\n              <Phone className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={phone}\n                onChange={(e) => setPhone(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"+1 (555) 123-4567\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"signup-password\">Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"signup-password\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                className=\"pl-10 pr-10\"\n                placeholder=\"Minimum 6 characters\"\n                required\n                minLength={6}\n              />\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute right-3 top-3 text-gray-400 hover:text-gray-600\"\n              >\n                {showPassword ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              </button>\n            </div>\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n            <div className=\"relative\">\n              <Lock className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"confirmPassword\"\n                type={showPassword ? \"text\" : \"password\"}\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"Confirm your password\"\n                required\n                minLength={6}\n              />\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full bg-green-600 hover:bg-green-700\" disabled={isLoading}>\n            {isLoading ? \"Creating Account...\" : \"Create My Account\"}\n          </Button>\n        </form>\n\n        <div className=\"text-center text-sm text-gray-600\">\n          Already have an account?{' '}\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('client')}\n            className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline\"\n          >\n            Login here\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const ForgotPasswordForm = () => {\n    const [email, setEmail] = useState('');\n\n    const onSubmit = (e: React.FormEvent) => {\n      e.preventDefault();\n      handleForgotPassword(email);\n    };\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center space-y-2\">\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('client')}\n            className=\"absolute top-4 left-4 text-gray-500 hover:text-gray-700\"\n          >\n            <ArrowLeft className=\"h-4 w-4\" />\n          </button>\n          <div className=\"mx-auto w-12 h-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n            <KeyRound className=\"h-6 w-6 text-yellow-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold\">Reset Password</h3>\n          <p className=\"text-sm text-gray-600\">Enter your email to receive reset instructions</p>\n        </div>\n\n        <form onSubmit={onSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"reset-email\">Email Address</Label>\n            <div className=\"relative\">\n              <Mail className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n              <Input\n                id=\"reset-email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                className=\"pl-10\"\n                placeholder=\"Enter your email address\"\n                required\n              />\n            </div>\n          </div>\n\n          <Button type=\"submit\" className=\"w-full bg-yellow-600 hover:bg-yellow-700\" disabled={isLoading}>\n            {isLoading ? \"Sending...\" : \"Send Reset Instructions\"}\n          </Button>\n        </form>\n\n        <div className=\"text-center text-sm text-gray-600\">\n          Remember your password?{' '}\n          <button\n            type=\"button\"\n            onClick={() => setActiveTab('client')}\n            className=\"text-blue-600 hover:text-blue-800 font-medium hover:underline\"\n          >\n            Back to login\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 px-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"shadow-xl border-0\">\n          <CardHeader className=\"text-center pb-2\">\n            <CardTitle className=\"text-2xl font-bold\">Welcome</CardTitle>\n            <CardDescription>\n              Aryen Recreation Centre\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"relative\">\n            {activeTab === 'client' && (\n              <div>\n                <ClientLoginForm />\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"text-center\">\n                    <p className=\"text-sm text-gray-600 mb-2\">Administrative Access</p>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setActiveTab('admin')}\n                      className=\"w-full text-red-600 border-red-200 hover:bg-red-50\"\n                    >\n                      <Shield className=\"h-4 w-4 mr-2\" />\n                      Admin Login\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'admin' && (\n              <div>\n                <AdminLoginForm />\n                <div className=\"mt-6 pt-6 border-t border-gray-200\">\n                  <div className=\"text-center\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setActiveTab('client')}\n                      className=\"w-full\"\n                    >\n                      <User className=\"h-4 w-4 mr-2\" />\n                      Back to Client Login\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {activeTab === 'signup' && <SignUpForm />}\n            {activeTab === 'forgot' && <ForgotPasswordForm />}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":20254},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Navbar from \"@/components/Navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { \n  User, \n  Calendar, \n  Clock, \n  CreditCard, \n  Settings, \n  Bell,\n  Phone,\n  Mail,\n  Edit,\n  Save,\n  X,\n  CheckCircle,\n  XCircle,\n  AlertCircle,\n  RotateCcw\n} from \"lucide-react\";\nimport type { Booking, User as UserType } from \"@shared/schema\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isEditingProfile, setIsEditingProfile] = useState(false);\n  const [profileData, setProfileData] = useState({\n    phone: '',\n    notificationPreferences: {\n      sms: true,\n      email: true,\n      marketing: false,\n    }\n  });\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  const { data: userBookings } = useQuery<Booking[]>({\n    queryKey: [\"/api/bookings/user\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: userProfile } = useQuery<UserType>({\n    queryKey: [\"/api/user/profile\"],\n    enabled: isAuthenticated,\n  });\n\n  // Set initial profile data when user profile is loaded\n  useEffect(() => {\n    if (userProfile) {\n      setProfileData({\n        phone: userProfile.phone || '',\n        notificationPreferences: userProfile.notificationPreferences || {\n          sms: true,\n          email: true,\n          marketing: false,\n        }\n      });\n    }\n  }, [userProfile]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"PATCH\", \"/api/user/profile\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/profile\"] });\n      setIsEditingProfile(false);\n      toast({\n        title: \"Profile Updated\",\n        description: \"Your profile has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Update Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleProfileUpdate = () => {\n    updateProfileMutation.mutate(profileData);\n  };\n\n  const getBookingStatusColor = (status: string) => {\n    switch (status) {\n      case 'confirmed': return 'bg-green-100 text-green-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      case 'cancelled': return 'bg-red-100 text-red-800';\n      case 'completed': return 'bg-blue-100 text-blue-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPaymentStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed': return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'partial': return <AlertCircle className=\"h-4 w-4 text-orange-500\" />;\n      case 'pending': return <Clock className=\"h-4 w-4 text-rose-500\" />;\n      case 'failed': return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      case 'refunded': return <RotateCcw className=\"h-4 w-4 text-gray-500\" />;\n      default: return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  // Filter bookings with proper date-time comparison\n  const now = new Date();\n  const upcomingBookings = userBookings?.filter(booking => {\n    if (booking.status === 'cancelled' || booking.status === 'completed') return false;\n    const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime || '00:00'}`);\n    return bookingDateTime > now;\n  }) || [];\n\n  const pastBookings = userBookings?.filter(booking => {\n    const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime || '00:00'}`);\n    return bookingDateTime < now || booking.status === 'completed' || booking.status === 'cancelled';\n  }) || [];\n\n  const totalBookings = userBookings?.length || 0;\n  const totalSpent = userBookings?.reduce((sum, booking) => sum + Number(booking.totalAmount), 0) || 0;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">My Profile</h1>\n          <p className=\"text-gray-600\">Manage your account and view your booking history</p>\n        </div>\n\n        {/* Quick Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center\">\n                  <Calendar className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{totalBookings}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                  <Clock className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Upcoming</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">{upcomingBookings.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center\">\n                  <CreditCard className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Spent</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">₹{totalSpent.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center\">\n                  <User className=\"h-6 w-6 text-white\" />\n                </div>\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Member Since</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {user?.createdAt ? new Date(user.createdAt).getFullYear() : '2024'}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"bookings\" className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"bookings\">Bookings</TabsTrigger>\n            <TabsTrigger value=\"profile\">Profile Settings</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          </TabsList>\n\n          {/* Bookings Tab */}\n          <TabsContent value=\"bookings\" className=\"space-y-6\">\n            {/* Quick Actions */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Quick Actions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"flex flex-wrap gap-3\">\n                  <Button \n                    onClick={() => window.location.href = '/facilities'} \n                    className=\"btn-sports-primary\"\n                  >\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    New Booking\n                  </Button>\n                  <Button \n                    onClick={() => window.location.href = '/pending-payments'} \n                    variant=\"outline\"\n                    className=\"border-orange-500 text-orange-600 hover:bg-orange-50\"\n                  >\n                    <CreditCard className=\"h-4 w-4 mr-2\" />\n                    Pending Payments\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Upcoming Bookings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"h-5 w-5 mr-2\" />\n                  Upcoming Bookings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {upcomingBookings.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 mb-4\">No upcoming bookings</p>\n                    <Button onClick={() => window.location.href = '/facilities'} className=\"btn-sports-primary\">\n                      Book a Facility\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {upcomingBookings.map((booking) => (\n                      <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-medium\">{booking.facilityName}</h3>\n                            <div className=\"flex items-center space-x-2\">\n                              {getPaymentStatusIcon(booking.paymentStatus)}\n                              <Badge className={getBookingStatusColor(booking.status)}>\n                                {booking.status}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-gray-600\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              {new Date(booking.bookingDate).toLocaleDateString()}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 mr-1\" />\n                              {booking.startTime} - {booking.endTime}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <CreditCard className=\"h-4 w-4 mr-1\" />\n                              ₹{Number(booking.totalAmount).toLocaleString()}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Past Bookings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Calendar className=\"h-5 w-5 mr-2\" />\n                  Booking History\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {pastBookings.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500\">No past bookings</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {pastBookings.slice(0, 10).map((booking) => (\n                      <div key={booking.id} className=\"flex items-center justify-between p-4 border rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h3 className=\"font-medium\">{booking.facilityName}</h3>\n                            <div className=\"flex items-center space-x-2\">\n                              {getPaymentStatusIcon(booking.paymentStatus)}\n                              <Badge className={getBookingStatusColor(booking.status)}>\n                                {booking.status}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-2 text-sm text-gray-600\">\n                            <div className=\"flex items-center\">\n                              <Calendar className=\"h-4 w-4 mr-1\" />\n                              {new Date(booking.bookingDate).toLocaleDateString()}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <Clock className=\"h-4 w-4 mr-1\" />\n                              {booking.startTime} - {booking.endTime}\n                            </div>\n                            <div className=\"flex items-center\">\n                              <CreditCard className=\"h-4 w-4 mr-1\" />\n                              ₹{Number(booking.totalAmount).toLocaleString()}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Profile Settings Tab */}\n          <TabsContent value=\"profile\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center\">\n                    <User className=\"h-5 w-5 mr-2\" />\n                    Profile Information\n                  </CardTitle>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => setIsEditingProfile(!isEditingProfile)}\n                  >\n                    {isEditingProfile ? <X className=\"h-4 w-4 mr-2\" /> : <Edit className=\"h-4 w-4 mr-2\" />}\n                    {isEditingProfile ? 'Cancel' : 'Edit'}\n                  </Button>\n                </div>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label>First Name</Label>\n                    <Input value={user?.firstName || ''} disabled className=\"mt-1\" />\n                  </div>\n                  <div>\n                    <Label>Last Name</Label>\n                    <Input value={user?.lastName || ''} disabled className=\"mt-1\" />\n                  </div>\n                  <div>\n                    <Label>Email</Label>\n                    <Input value={user?.email || ''} disabled className=\"mt-1\" />\n                  </div>\n                  <div>\n                    <Label>Phone Number</Label>\n                    <Input \n                      value={profileData.phone}\n                      onChange={(e) => setProfileData({ ...profileData, phone: e.target.value })}\n                      disabled={!isEditingProfile}\n                      placeholder=\"Enter your phone number\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                </div>\n\n                {isEditingProfile && (\n                  <div className=\"flex gap-4\">\n                    <Button \n                      onClick={handleProfileUpdate}\n                      disabled={updateProfileMutation.isPending}\n                      className=\"btn-sports-primary\"\n                    >\n                      <Save className=\"h-4 w-4 mr-2\" />\n                      {updateProfileMutation.isPending ? 'Saving...' : 'Save Changes'}\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Notifications Tab */}\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"h-5 w-5 mr-2\" />\n                  Notification Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <div className=\"flex items-center\">\n                        <Phone className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <Label className=\"text-base\">SMS Notifications</Label>\n                      </div>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive booking confirmations and reminders via SMS\n                      </p>\n                    </div>\n                    <Switch\n                      checked={profileData.notificationPreferences.sms}\n                      onCheckedChange={(checked) =>\n                        setProfileData({\n                          ...profileData,\n                          notificationPreferences: {\n                            ...profileData.notificationPreferences,\n                            sms: checked,\n                          },\n                        })\n                      }\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <div className=\"flex items-center\">\n                        <Mail className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <Label className=\"text-base\">Email Notifications</Label>\n                      </div>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive booking confirmations and updates via email\n                      </p>\n                    </div>\n                    <Switch\n                      checked={profileData.notificationPreferences.email}\n                      onCheckedChange={(checked) =>\n                        setProfileData({\n                          ...profileData,\n                          notificationPreferences: {\n                            ...profileData.notificationPreferences,\n                            email: checked,\n                          },\n                        })\n                      }\n                    />\n                  </div>\n                  \n                  <Separator />\n                  \n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"space-y-0.5\">\n                      <div className=\"flex items-center\">\n                        <Settings className=\"h-4 w-4 mr-2 text-gray-500\" />\n                        <Label className=\"text-base\">Marketing Communications</Label>\n                      </div>\n                      <p className=\"text-sm text-gray-500\">\n                        Receive promotional offers and facility updates\n                      </p>\n                    </div>\n                    <Switch\n                      checked={profileData.notificationPreferences.marketing}\n                      onCheckedChange={(checked) =>\n                        setProfileData({\n                          ...profileData,\n                          notificationPreferences: {\n                            ...profileData.notificationPreferences,\n                            marketing: checked,\n                          },\n                        })\n                      }\n                    />\n                  </div>\n                </div>\n\n                <div className=\"pt-4\">\n                  <Button \n                    onClick={handleProfileUpdate}\n                    disabled={updateProfileMutation.isPending}\n                    className=\"btn-sports-primary\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    {updateProfileMutation.isPending ? 'Saving...' : 'Save Preferences'}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22066},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/bookings.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { \n  Calendar, \n  Search, \n  Filter,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  Eye,\n  Edit,\n  Clock,\n  IndianRupee,\n  User,\n  MapPin,\n  Building2,\n  Printer,\n  FileText,\n  Download,\n  Users,\n  DollarSign,\n  Bell,\n  ChevronUp,\n  ChevronDown,\n  ChevronsUpDown\n} from \"lucide-react\";\nimport jsPDF from 'jspdf';\nimport 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\n// Enhanced booking interface for master table structure\ninterface BookingMasterView {\n  id: number;\n  bookingId: number;\n  bookingNo: string;\n  userId: string;\n  userName: string;\n  userEmail: string;\n  userPhone?: string;\n  sportId: number;\n  sportName: string;\n  bookingType: string;\n  groundId: number;\n  groundName: string;\n  groundType: string;\n  planId: number;\n  planName: string;\n  planType: string;\n  bookingMode: string;\n  noOfPersons?: number;\n  participantCount?: number;\n  bookingDate: string;\n  startDate: string;\n  endDate: string;\n  startTime: string;\n  endTime: string;\n  duration?: number;\n  totalSlots: number;\n  baseAmount: string;\n  discountAmount: string;\n  totalAmount: string;\n  paidAmount: string;\n  pendingAmount: string;\n  bookingStatus: string;\n  status: string;\n  paymentStatus: string;\n  paymentMethod?: string;\n  createdDate: string;\n  createdAt: string;\n  facilityName?: string;\n  facilityId?: number;\n  notes?: string;\n  slots?: BookingSlotDetail[];\n}\n\ninterface BookingSlotDetail {\n  detailId: number;\n  slotDate: string;\n  slotId: number;\n  slotName: string;\n  startTime: string;\n  endTime: string;\n  slotPrice: string;\n  status: string;\n}\n\nexport default function AdminBookings() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [currentPage, setCurrentPage] = useState(1);\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [sortBy, setSortBy] = useState<string>(\"date_desc\");\n  const [sortDirection, setSortDirection] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [selectedBooking, setSelectedBooking] = useState<BookingMasterView | null>(null);\n  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);\n\n  // Column sorting handler\n  const handleSort = (column: string) => {\n    const currentSortColumn = sortBy.replace('_asc', '').replace('_desc', '');\n    const isCurrentColumn = currentSortColumn === column;\n    const newDirection = isCurrentColumn && sortDirection === 'asc' ? 'desc' : 'asc';\n    const newSortBy = `${column}_${newDirection}`;\n    \n    setSortBy(newSortBy);\n    setSortDirection(newDirection);\n    setCurrentPage(1); // Reset to first page when sorting changes\n  };\n\n  // Get sort icon for column\n  const getSortIcon = (column: string) => {\n    const currentSortColumn = sortBy.replace('_asc', '').replace('_desc', '');\n    if (currentSortColumn !== column) {\n      return <ChevronsUpDown className=\"h-4 w-4 text-gray-400\" />;\n    }\n    return sortDirection === 'asc' ? \n      <ChevronUp className=\"h-4 w-4 text-blue-600\" /> : \n      <ChevronDown className=\"h-4 w-4 text-blue-600\" />;\n  };\n\n  const limit = 20;\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  // Fetch bookings with master table structure\n\n  const { data: bookingsData, isLoading: bookingsLoading } = useQuery<{bookings: BookingMasterView[], total: number}>({\n    queryKey: ['/api/admin/bookings', currentPage, statusFilter, searchTerm, sortBy],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        page: currentPage.toString(),\n        limit: limit.toString(),\n        ...(statusFilter !== 'all' && { status: statusFilter }),\n        ...(searchTerm && { search: searchTerm }),\n        ...(sortBy && { sortBy: sortBy }),\n      });\n\n      const response = await fetch(`/api/admin/bookings?${params.toString()}`);\n      return response.json();\n    },\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  // Fetch supporting data for context\n  const { data: sports } = useQuery({\n    queryKey: [\"/api/admin/sports\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const { data: grounds } = useQuery({\n    queryKey: [\"/api/admin/grounds\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const { data: plans } = useQuery({\n    queryKey: [\"/api/admin/plans\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  // Update booking status mutation\n  const updateBookingStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: number; status: string }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/bookings/${id}`, { bookingStatus: status });\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      toast({\n        title: \"Booking Updated\",\n        description: data?.message || \"The booking status has been updated successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      // Handle specific error cases\n      if (error.status === 400) {\n        toast({\n          title: \"Cannot Update Booking\",\n          description: error.response?.data?.message || error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Cancel expired bookings mutation\n  const cancelExpiredMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/cancel-expired-bookings\");\n    },\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      if (data?.cancelledCount > 0) {\n        toast({\n          title: \"Expired Bookings Cancelled\",\n          description: `Successfully cancelled ${data.cancelledCount} expired pending bookings.`,\n        });\n      } else {\n        toast({\n          title: \"No Expired Bookings\",\n          description: \"No expired pending bookings found to cancel.\",\n        });\n      }\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Send reminders mutation\n  const sendRemindersMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/send-reminders\");\n    },\n    onSuccess: (data: any) => {\n      toast({\n        title: \"Reminders Sent\",\n        description: `${data?.message}. Checked ${data?.totalBookingsChecked} bookings.`,\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      'confirmed': { \n        icon: CheckCircle, \n        className: 'bg-green-100 text-green-800 border-green-300'\n      },\n      'pending': { \n        icon: AlertCircle, \n        className: 'bg-amber-100 text-amber-800 border-amber-300'\n      },\n      'cancelled': { \n        icon: XCircle, \n        className: 'bg-red-100 text-red-800 border-red-300'\n      },\n      'completed': { \n        icon: CheckCircle, \n        className: 'bg-blue-100 text-blue-800 border-blue-300'\n      },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    const Icon = config.icon;\n\n    return (\n      <div className={`flex items-center gap-1 px-2 py-1 rounded-full border text-xs font-medium ${config.className}`}>\n        <Icon className=\"h-3 w-3\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </div>\n    );\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    const statusConfig = {\n      'completed': { \n        className: 'bg-emerald-100 text-emerald-800 border-emerald-300',\n        label: 'Paid'\n      },\n      'partial': { \n        className: 'bg-orange-100 text-orange-800 border-orange-300',\n        label: 'Partial'\n      },\n      'pending': { \n        className: 'bg-rose-100 text-rose-800 border-rose-300',\n        label: 'Unpaid'\n      },\n      'failed': { \n        className: 'bg-red-100 text-red-800 border-red-300',\n        label: 'Failed'\n      },\n      'refunded': { \n        className: 'bg-gray-100 text-gray-800 border-gray-300',\n        label: 'Refunded'\n      },\n    };\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n\n    return (\n      <div className={`px-2 py-1 rounded-full border text-xs font-medium ${config.className}`}>\n        {config.label}\n      </div>\n    );\n  };\n\n  // Helper function to check if booking should be completed\n  const isBookingCompleted = (booking: BookingMasterView) => {\n    const currentDateTime = new Date();\n    const bookingDate = new Date(booking.bookingDate || booking.startDate);\n    \n    // Handle missing endTime gracefully\n    if (!booking.endTime) {\n      // If no end time, just check if booking date is in the past\n      return bookingDate < new Date(currentDateTime.toDateString());\n    }\n    \n    const [endHour, endMinute] = booking.endTime.split(':').map(Number);\n    \n    // Set the booking end time\n    const bookingEndDateTime = new Date(bookingDate);\n    bookingEndDateTime.setHours(endHour, endMinute, 0, 0);\n    \n    // Booking can be marked completed if:\n    // 1. Current time is past the booking end time, OR\n    // 2. Booking date is in the past (for easier manual completion)\n    return currentDateTime > bookingEndDateTime || bookingDate < new Date(currentDateTime.toDateString());\n  };\n\n  const handleViewDetails = async (booking: BookingMasterView) => {\n    try {\n      // Fetch booking slots detail\n      const slotsResponse = await apiRequest(\"GET\", `/api/admin/bookings/${booking.id}/slots`) as BookingSlotDetail[];\n      setSelectedBooking({ ...booking, slots: slotsResponse });\n      setIsDetailsDialogOpen(true);\n    } catch (error) {\n      console.error(\"Error fetching booking details:\", error);\n      setSelectedBooking(booking);\n      setIsDetailsDialogOpen(true);\n    }\n  };\n\n  const totalPages = Math.ceil((bookingsData?.total || 0) / limit);\n\n  // Fetch admin stats for the cards\n  const { data: adminStats } = useQuery({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const allBookingsStats = useMemo(() => {\n    return {\n      total: adminStats?.totalBookings || 0,\n      confirmed: adminStats?.confirmed || 0,\n      pending: adminStats?.pending || 0,\n      completed: adminStats?.completed || 0,\n      cancelled: adminStats?.cancelled || 0,\n    };\n  }, [adminStats]);\n\n  // Export functions\n  const handlePrint = () => {\n    window.print();\n  };\n\n  const handleExportPDF = () => {\n    const doc = new jsPDF();\n    \n    // Add title\n    doc.setFontSize(20);\n    doc.text('Bookings Report', 20, 20);\n    \n    // Add generation date\n    doc.setFontSize(12);\n    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);\n    \n    // Prepare table data\n    const tableData = (bookingsData?.bookings || []).map((booking: BookingMasterView) => [\n      `BK${booking.id.toString().padStart(4, '0')}`,\n      booking.userName || 'N/A',\n      booking.facilityName || booking.groundName || 'N/A',\n      new Date(booking.bookingDate).toLocaleDateString(),\n      `${booking.startTime} - ${booking.endTime}`,\n      (booking.status || booking.bookingStatus).charAt(0).toUpperCase() + (booking.status || booking.bookingStatus).slice(1),\n      `₹${parseFloat(booking.totalAmount || '0').toLocaleString()}`,\n      booking.paymentStatus?.charAt(0).toUpperCase() + booking.paymentStatus?.slice(1) || 'N/A'\n    ]);\n\n    // Add table\n    (doc as any).autoTable({\n      head: [['Booking ID', 'Customer', 'Facility', 'Date', 'Time', 'Status', 'Amount', 'Payment']],\n      body: tableData,\n      startY: 50,\n      styles: { fontSize: 8 },\n      headStyles: { fillColor: [41, 128, 185] }\n    });\n    \n    doc.save('bookings-report.pdf');\n  };\n\n  const handleExportExcel = () => {\n    const excelData = (bookingsData?.bookings || []).map((booking: BookingMasterView) => ({\n      'Booking ID': `BK${booking.id.toString().padStart(4, '0')}`,\n      'Customer Name': booking.userName || 'N/A',\n      'Customer Email': booking.userEmail || 'N/A',\n      'Customer Phone': booking.userPhone || 'N/A',\n      'Facility': booking.facilityName || booking.groundName || 'N/A',\n      'Booking Date': new Date(booking.bookingDate).toLocaleDateString(),\n      'Start Time': booking.startTime,\n      'End Time': booking.endTime,\n      'Duration': booking.duration ? `${booking.duration} min` : 'Standard',\n      'Participants': booking.participantCount || booking.noOfPersons || 1,\n      'Plan Type': booking.planType,\n      'Booking Type': booking.bookingType,\n      'Status': (booking.status || booking.bookingStatus).charAt(0).toUpperCase() + (booking.status || booking.bookingStatus).slice(1),\n      'Payment Status': booking.paymentStatus?.charAt(0).toUpperCase() + booking.paymentStatus?.slice(1) || 'N/A',\n      'Total Amount': parseFloat(booking.totalAmount || '0').toFixed(2),\n      'Paid Amount': parseFloat(booking.paidAmount || '0').toFixed(2),\n      'Discount': parseFloat(booking.discountAmount || '0').toFixed(2),\n      'Payment Method': booking.paymentMethod || 'N/A',\n      'Created Date': new Date(booking.createdAt || booking.createdDate).toLocaleDateString(),\n      'Notes': booking.notes || ''\n    }));\n\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n    const workbook = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Bookings');\n    \n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    saveAs(data, 'bookings-report.xlsx');\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Bookings Management</h1>\n              <p className=\"text-gray-600\">Manage all facility bookings</p>\n            </div>\n            \n            {/* Action Buttons */}\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handlePrint}\n                className=\"flex items-center gap-2\"\n              >\n                <Printer className=\"h-4 w-4\" />\n                Print\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportPDF}\n                className=\"flex items-center gap-2\"\n              >\n                <FileText className=\"h-4 w-4\" />\n                PDF\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleExportExcel}\n                className=\"flex items-center gap-2\"\n              >\n                <Download className=\"h-4 w-4\" />\n                Excel\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => cancelExpiredMutation.mutate()}\n                disabled={cancelExpiredMutation.isPending}\n                className=\"flex items-center gap-2 text-orange-600 hover:text-orange-700\"\n              >\n                <XCircle className=\"h-4 w-4\" />\n                {cancelExpiredMutation.isPending ? 'Cancelling...' : 'Cancel Expired'}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => sendRemindersMutation.mutate()}\n                disabled={sendRemindersMutation.isPending}\n                className=\"flex items-center gap-2 text-blue-600 hover:text-blue-700\"\n              >\n                <Bell className=\"h-4 w-4\" />\n                {sendRemindersMutation.isPending ? 'Sending...' : 'Send Reminders'}\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search by booking number, user name, or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-48\">\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Calendar className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{allBookingsStats.total}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Confirmed</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{allBookingsStats.confirmed}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <AlertCircle className=\"h-8 w-8 text-yellow-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Pending</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{allBookingsStats.pending}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Completed</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{allBookingsStats.completed}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <XCircle className=\"h-8 w-8 text-red-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Cancelled</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{allBookingsStats.cancelled}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Bookings Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Bookings</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {bookingsLoading ? (\n                <div className=\"flex justify-center items-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Booking #</TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-100 select-none\"\n                          onClick={() => handleSort('customer')}\n                        >\n                          <div className=\"flex items-center space-x-1\">\n                            <span>Customer</span>\n                            {getSortIcon('customer')}\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-100 select-none\"\n                          onClick={() => handleSort('sport')}\n                        >\n                          <div className=\"flex items-center space-x-1\">\n                            <span>Sport & Ground</span>\n                            {getSortIcon('sport')}\n                          </div>\n                        </TableHead>\n                        <TableHead>Plan</TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-100 select-none\"\n                          onClick={() => handleSort('date')}\n                        >\n                          <div className=\"flex items-center space-x-1\">\n                            <span>Dates</span>\n                            {getSortIcon('date')}\n                          </div>\n                        </TableHead>\n                        <TableHead \n                          className=\"cursor-pointer hover:bg-gray-100 select-none\"\n                          onClick={() => handleSort('amount')}\n                        >\n                          <div className=\"flex items-center space-x-1\">\n                            <span>Amount</span>\n                            {getSortIcon('amount')}\n                          </div>\n                        </TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Payment</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {bookingsData?.bookings?.map((booking) => (\n                        <TableRow key={booking.id} className=\"hover:bg-gray-50\">\n                          <TableCell className=\"font-mono text-sm\">\n                            BK{booking.id?.toString().padStart(4, '0')}\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{booking.userName}</div>\n                              <div className=\"text-sm text-gray-600\">{booking.userEmail}</div>\n                              {booking.userPhone && (\n                                <div className=\"text-sm text-gray-600\">{booking.userPhone}</div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{booking.facilityName || booking.groundName}</div>\n                              <div className=\"text-sm text-gray-600 flex items-center\">\n                                <Building2 className=\"h-3 w-3 mr-1\" />\n                                Ground {booking.facilityId || booking.groundId}\n                              </div>\n                              <Badge variant=\"outline\" className=\"text-xs mt-1\">\n                                {booking.bookingType}\n                              </Badge>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">{booking.planType}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {booking.duration ? `${booking.duration} min` : 'Standard'}\n                              </div>\n                              {(booking.participantCount || booking.noOfPersons) && (\n                                <div className=\"text-sm text-gray-600\">{booking.participantCount || booking.noOfPersons} persons</div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"text-sm\">{new Date(booking.bookingDate).toLocaleDateString()}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {booking.startTime} - {booking.endTime}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">₹{parseFloat(booking.totalAmount || '0').toLocaleString()}</div>\n                              <div className=\"text-sm text-green-600\">Paid: ₹{parseFloat(booking.paidAmount || '0').toLocaleString()}</div>\n                              {booking.discountAmount && parseFloat(booking.discountAmount) > 0 && (\n                                <div className=\"text-sm text-blue-600\">Discount: ₹{parseFloat(booking.discountAmount).toLocaleString()}</div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getStatusBadge(booking.status || booking.bookingStatus)}\n                          </TableCell>\n                          <TableCell>\n                            {getPaymentStatusBadge(booking.paymentStatus)}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleViewDetails(booking)}\n                              >\n                                <Eye className=\"h-3 w-3\" />\n                              </Button>\n                              {(booking.status || booking.bookingStatus) === 'pending' && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => updateBookingStatusMutation.mutate({ id: booking.id, status: 'confirmed' })}\n                                  className=\"text-green-600 hover:text-green-700\"\n                                  title=\"Approve Booking\"\n                                >\n                                  <CheckCircle className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                              {(booking.status || booking.bookingStatus) === 'confirmed' && booking.paymentStatus === 'completed' && (\n                                <div className=\"text-xs text-green-600 font-medium px-2 py-1 bg-green-50 rounded\">\n                                  ✓ Approved & Paid\n                                </div>\n                              )}\n                              {(booking.status || booking.bookingStatus) === 'confirmed' && isBookingCompleted(booking) && (\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => updateBookingStatusMutation.mutate({ id: booking.id, status: 'completed' })}\n                                  className=\"text-blue-600 hover:text-blue-700\"\n                                  title=\"Mark as Completed\"\n                                >\n                                  <CheckCircle className=\"h-3 w-3\" />\n                                </Button>\n                              )}\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n              \n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex justify-between items-center mt-6\">\n                  <div className=\"text-sm text-gray-600\">\n                    Showing {((currentPage - 1) * limit) + 1} to {Math.min(currentPage * limit, bookingsData?.total || 0)} of {bookingsData?.total || 0} bookings\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage <= 1}\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"px-3 py-2 text-sm\">\n                      {currentPage} of {totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage >= totalPages}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Booking Details Dialog */}\n      <Dialog open={isDetailsDialogOpen} onOpenChange={setIsDetailsDialogOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Booking Details - BK{selectedBooking?.id?.toString().padStart(4, '0')}</DialogTitle>\n            <DialogDescription>\n              Complete booking information and slot details\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedBooking && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Customer Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Name:</span>\n                      <span className=\"font-medium\">{selectedBooking.userName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Email:</span>\n                      <span className=\"font-medium\">{selectedBooking.userEmail}</span>\n                    </div>\n                    {selectedBooking.userPhone && (\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600\">Phone:</span>\n                        <span className=\"font-medium\">{selectedBooking.userPhone}</span>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Facility Information</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Facility:</span>\n                      <span className=\"font-medium\">{selectedBooking.facilityName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Facility ID:</span>\n                      <span className=\"font-medium\">#{selectedBooking.facilityId}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Booking Type:</span>\n                      <Badge variant=\"outline\">{selectedBooking.bookingType}</Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Booking Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Booking Details</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <span className=\"text-gray-600 text-sm\">Plan Type</span>\n                      <div>\n                        <div className=\"font-medium\">{selectedBooking.planType}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          {selectedBooking.duration ? `${selectedBooking.duration} minutes` : 'Standard duration'}\n                        </div>\n                        {selectedBooking.participantCount && (\n                          <div className=\"text-sm text-gray-600\">{selectedBooking.participantCount} participants</div>\n                        )}\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <span className=\"text-gray-600 text-sm\">Schedule</span>\n                      <div>\n                        <div className=\"text-sm\">Date: {new Date(selectedBooking.bookingDate).toLocaleDateString()}</div>\n                        <div className=\"text-sm\">Time: {selectedBooking.startTime} - {selectedBooking.endTime}</div>\n                        <div className=\"text-sm text-gray-600\">\n                          Created: {new Date(selectedBooking.createdAt).toLocaleDateString()}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2\">\n                      <span className=\"text-gray-600 text-sm\">Status</span>\n                      <div className=\"space-y-2\">\n                        {getStatusBadge(selectedBooking.status)}\n                        {getPaymentStatusBadge(selectedBooking.paymentStatus)}\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Summary */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Payment Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Total Amount:</span>\n                      <span className=\"font-semibold\">₹{parseFloat(selectedBooking.totalAmount || '0').toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Paid Amount:</span>\n                      <span className=\"text-green-600\">₹{parseFloat(selectedBooking.paidAmount || '0').toLocaleString()}</span>\n                    </div>\n                    {selectedBooking.discountAmount && parseFloat(selectedBooking.discountAmount) > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Discount:</span>\n                      <span className=\"text-blue-600\">-₹{parseFloat(selectedBooking.discountAmount).toLocaleString()}</span>\n                    </div>\n                    )}\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Payment Method:</span>\n                      <span className=\"font-medium\">{selectedBooking.paymentMethod || 'Not specified'}</span>\n                    </div>\n                    {selectedBooking.notes && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-gray-600\">Notes:</span>\n                      <span className=\"font-medium\">{selectedBooking.notes}</span>\n                    </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Booking Slots */}\n              {selectedBooking.slots && selectedBooking.slots.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">Booked Slots</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {selectedBooking.slots.map((slot: any, index: number) => (\n                        <div key={slot.id || index} className=\"flex justify-between items-center p-3 bg-gray-50 rounded-lg\">\n                          <div>\n                            <div className=\"font-medium\">{new Date(slot.bookingDate).toLocaleDateString()}</div>\n                            <div className=\"text-sm text-gray-600\">{slot.startTime} - {slot.endTime}</div>\n                          </div>\n                          <div className=\"text-right\">\n                            <div className=\"font-medium\">₹{parseFloat(slot.amount || '0').toLocaleString()}</div>\n                            <Badge variant={slot.status === 'active' ? 'default' : 'secondary'} className=\"text-xs\">\n                              {slot.status}\n                            </Badge>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":41599},"client/src/pages/admin/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  CalendarDays, \n  IndianRupee, \n  Users, \n  Building2, \n  TrendingUp,\n  Clock,\n  CheckCircle,\n  AlertCircle,\n  XCircle,\n  Activity,\n  BarChart3,\n  RefreshCw,\n  RotateCcw,\n  Eye\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  todayBookings: number;\n  todayRevenue: number;\n  totalBookings: number;\n  totalRevenue: number;\n  activeUsers: number;\n  activeGrounds: number;\n  liveSessions: number;\n  confirmed: number;\n  pending: number;\n  cancelled: number;\n  completed: number;\n}\n\ninterface BookingData {\n  id: number;\n  userName: string;\n  userEmail: string;\n  userPhone?: string;\n  facilityName: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  totalAmount: string;\n  status: string;\n  paymentStatus: string;\n}\n\ninterface BookingsResponse {\n  bookings: BookingData[];\n  total: number;\n}\n\n// Component for updating past bookings\nfunction UpdatePastBookingsButton() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updatePastBookingsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('POST', '/api/admin/update-past-bookings');\n      return await response.json();\n    },\n    onSuccess: (data: any) => {\n      // Show detailed results based on payment validation\n      if (data.updated > 0 && data.skipped === 0) {\n        toast({\n          title: \"✅ All Bookings Updated\",\n          description: `Successfully completed ${data.updated} past bookings`,\n        });\n      } else if (data.updated > 0 && data.skipped > 0) {\n        toast({\n          title: \"⚠️ Partial Update\",\n          description: `Updated ${data.updated} bookings. ${data.skipped} bookings have outstanding payments`,\n          variant: \"default\",\n        });\n      } else if (data.skipped > 0) {\n        toast({\n          title: \"⚠️ Payment Issues Found\",\n          description: `${data.skipped} bookings have outstanding payments. Please collect payments first`,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"ℹ️ No Updates Needed\",\n          description: \"No past confirmed bookings found to update\",\n        });\n      }\n\n      // Log payment issues for admin review\n      if (data.paymentIssues && data.paymentIssues.length > 0) {\n        console.log(\"Payment issues requiring attention:\", data.paymentIssues);\n      }\n\n      // Refresh dashboard data\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update past bookings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <Button \n      variant=\"secondary\" \n      size=\"sm\" \n      onClick={() => updatePastBookingsMutation.mutate()}\n      disabled={updatePastBookingsMutation.isPending}\n    >\n      <RotateCcw className={`h-4 w-4 mr-2 ${updatePastBookingsMutation.isPending ? 'animate-spin' : ''}`} />\n      Complete Past Bookings\n    </Button>\n  );\n}\n\nexport default function AdminDashboard() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: stats, isLoading: statsLoading, refetch: refetchStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/admin/stats\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n    retry: false,\n  });\n\n  const { data: recentBookings, isLoading: bookingsLoading, refetch: refetchBookings } = useQuery<BookingsResponse>({\n    queryKey: [\"/api/admin/bookings?limit=10\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n    retry: false,\n  });\n\n  if (isLoading || statsLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'confirmed':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Confirmed</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\"><AlertCircle className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'cancelled':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"h-3 w-3 mr-1\" />Cancelled</Badge>;\n      case 'completed':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Completed</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-emerald-100 text-emerald-800 border border-emerald-200\"><CheckCircle className=\"h-3 w-3 mr-1\" />Paid</Badge>;\n      case 'partial':\n        return <Badge className=\"bg-orange-100 text-orange-800 border border-orange-200\"><AlertCircle className=\"h-3 w-3 mr-1\" />Partial</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-rose-100 text-rose-800 border border-rose-200\"><Clock className=\"h-3 w-3 mr-1\" />Unpaid</Badge>;\n      case 'failed':\n        return <Badge className=\"bg-red-100 text-red-800 border border-red-200\"><XCircle className=\"h-3 w-3 mr-1\" />Failed</Badge>;\n      case 'refunded':\n        return <Badge className=\"bg-gray-100 text-gray-800 border border-gray-200\"><RotateCcw className=\"h-3 w-3 mr-1\" />Refunded</Badge>;\n      default:\n        return <Badge variant=\"outline\" className=\"text-gray-600\"><AlertCircle className=\"h-3 w-3 mr-1\" />{status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      \n      <div className=\"flex-1 lg:ml-64 overflow-auto\">\n        <div className=\"p-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Management Dashboard</h1>\n              <p className=\"text-gray-600 mt-1\">\n                Welcome back, {user?.firstName}! Here's the overview for all users and bookings at Aryen Recreation Centre.\n              </p>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => {\n                  refetchStats();\n                  refetchBookings();\n                }}\n                disabled={statsLoading || bookingsLoading}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${(statsLoading || bookingsLoading) ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <AdminSidebar className=\"lg:hidden\" />\n            </div>\n          </div>\n\n          {/* Stats Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            <StatsCard\n              title=\"System: Today's Bookings\"\n              value={stats?.todayBookings || 0}\n              icon={CalendarDays}\n              iconColor=\"bg-blue-500\"\n              description=\"All users' bookings today\"\n            />\n            \n            <StatsCard\n              title=\"System: Today's Revenue\"\n              value={`₹${(stats?.todayRevenue || 0).toLocaleString()}`}\n              icon={IndianRupee}\n              iconColor=\"bg-green-500\"\n              description=\"Total earnings from all users today\"\n            />\n            \n            <StatsCard\n              title=\"Live Sessions\"\n              value={stats?.liveSessions || 0}\n              icon={Activity}\n              iconColor=\"bg-red-500\"\n              description=\"Currently active\"\n            />\n            \n            <StatsCard\n              title=\"Active Users\"\n              value={stats?.activeUsers || 0}\n              icon={Users}\n              iconColor=\"bg-purple-500\"\n              description=\"Registered members\"\n            />\n          </div>\n\n          {/* Secondary Stats */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            <StatsCard\n              title=\"Total Bookings\"\n              value={stats?.totalBookings || 0}\n              icon={BarChart3}\n              iconColor=\"bg-indigo-500\"\n              description=\"All users' bookings (lifetime)\"\n            />\n            \n            <StatsCard\n              title=\"Total Revenue\"\n              value={`₹${(stats?.totalRevenue || 0).toLocaleString()}`}\n              icon={TrendingUp}\n              iconColor=\"bg-amber-500\"\n              description=\"All time earnings\"\n            />\n            \n            <StatsCard\n              title=\"Available Facilities\"\n              value={stats?.activeGrounds || 0}\n              icon={Building2}\n              iconColor=\"bg-teal-500\"\n              description=\"Active facilities\"\n            />\n          </div>\n\n\n\n          {/* Recent Bookings */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <CalendarDays className=\"h-5 w-5 mr-2\" />\n                  Recent Bookings\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <UpdatePastBookingsButton />\n                  <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = '/admin/bookings'}>\n                    <Eye className=\"h-4 w-4 mr-2\" />\n                    View All\n                  </Button>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {bookingsLoading ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 5 }).map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4 animate-pulse\">\n                      <div className=\"w-12 h-12 bg-gray-300 rounded-full\"></div>\n                      <div className=\"flex-1 space-y-2\">\n                        <div className=\"h-4 bg-gray-300 rounded w-3/4\"></div>\n                        <div className=\"h-3 bg-gray-300 rounded w-1/2\"></div>\n                      </div>\n                      <div className=\"h-6 bg-gray-300 rounded w-20\"></div>\n                    </div>\n                  ))}\n                </div>\n              ) : recentBookings?.bookings && recentBookings.bookings.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Customer\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Facility\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Date & Time\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Amount\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                          Payment\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {recentBookings?.bookings?.slice(0, 10).map((booking) => (\n                        <tr key={booking.id} className=\"hover:bg-gray-50\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center text-white font-medium\">\n                                {booking.userName?.charAt(0)?.toUpperCase() || 'U'}\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900\">\n                                  {booking.userName || 'Unknown User'}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {booking.userPhone || booking.userEmail}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">{booking.facilityName}</div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm text-gray-900\">\n                              {new Date(booking.bookingDate).toLocaleDateString()}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">\n                              {booking.startTime} - {booking.endTime}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"text-sm font-medium text-gray-900\">\n                              ₹{Number(booking.totalAmount).toLocaleString()}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getStatusBadge(booking.status)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            {getPaymentStatusBadge(booking.paymentStatus)}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <CalendarDays className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No recent bookings found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16019},"client/src/pages/admin/facilities.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport BookingModal from \"@/components/BookingModal\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { \n  Building2, \n  Plus, \n  Edit, \n  Trash2, \n  Users, \n  Clock,\n  PauseCircle,\n  PlayCircle,\n  MapPin,\n  Settings,\n  TrendingUp,\n  TrendingDown,\n  Star,\n  BarChart3,\n  Calendar,\n  IndianRupee,\n  Activity,\n  Eye,\n  RefreshCw,\n  Award,\n  Target\n} from \"lucide-react\";\n\n// Enhanced facility analytics interface\ninterface FacilityPopularityData {\n  facilityId: number;\n  facilityName: string;\n  facilityType: string;\n  totalBookings: number;\n  totalRevenue: number;\n  avgBookingValue: number;\n  weeklyBookings: number;\n  monthlyBookings: number;\n  popularTimeSlots: string[];\n  occupancyRate: number;\n  customerRating: number;\n  isActive: boolean;\n  lastBookingDate: string;\n  trendDirection: 'up' | 'down' | 'stable';\n  revenueGrowth: number;\n  bookingGrowth: number;\n}\n\n// Legacy facilities interface for backward compatibility\ninterface LegacyFacility {\n  id: number;\n  name: string;\n  type: string;\n  description: string;\n  capacity: number;\n  hourlyRate: number;\n  location: string;\n  amenities: string[];\n  images: string[];\n  isActive: boolean;\n  isPopular: boolean;\n  isPremium: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nexport default function AdminFacilities() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [filterType, setFilterType] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"popularity\");\n  const [viewMode, setViewMode] = useState<'grid' | 'table'>('grid');\n  \n  // Admin booking modal state\n  const [selectedFacilityForBooking, setSelectedFacilityForBooking] = useState<any>(null);\n  const [isAdminBookingModalOpen, setIsAdminBookingModalOpen] = useState(false);\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, user, toast]);\n\n  // Fetch facilities data from master tables integration\n  const { data: facilities, isLoading: facilitiesLoading, refetch: refetchFacilities } = useQuery<any[]>({\n    queryKey: [\"/api/admin/facilities\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n    refetchInterval: 30000, // Real-time updates every 30 seconds\n  });\n\n  // Fetch facility analytics and popularity data\n  const { data: facilityStats, isLoading: statsLoading, refetch: refetchStats } = useQuery({\n    queryKey: [\"/api/admin/facility-stats\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  // Fetch bookings data for analytics\n  const { data: bookingsData, isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/admin/bookings\", { limit: 1000 }],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  // Calculate facility popularity analytics from bookings data\n  const calculateFacilityAnalytics = (): FacilityPopularityData[] => {\n    if (!facilities || !bookingsData || !Array.isArray(bookingsData.bookings)) return [];\n    \n    return facilities.map((facility) => {\n      const facilityBookings = bookingsData.bookings.filter(\n        (booking: any) => booking.facilityId === facility.id || booking.groundId === facility.groundId\n      );\n      \n      const totalBookings = facilityBookings.length;\n      const totalRevenue = facilityBookings.reduce(\n        (sum: number, booking: any) => sum + Number(booking.totalAmount || 0), 0\n      );\n      \n      const now = new Date();\n      const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n      const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n      \n      const weeklyBookings = facilityBookings.filter(\n        (booking: any) => new Date(booking.createdAt) >= weekAgo\n      ).length;\n      \n      const monthlyBookings = facilityBookings.filter(\n        (booking: any) => new Date(booking.createdAt) >= monthAgo\n      ).length;\n      \n      const avgBookingValue = totalBookings > 0 ? totalRevenue / totalBookings : 0;\n      const occupancyRate = Math.min((totalBookings / 100) * 100, 100); // Mock calculation\n      \n      return {\n        facilityId: facility.id,\n        facilityName: facility.name,\n        facilityType: facility.type,\n        totalBookings,\n        totalRevenue,\n        avgBookingValue,\n        weeklyBookings,\n        monthlyBookings,\n        popularTimeSlots: ['09:00-12:00', '18:00-21:00'], // Mock data\n        occupancyRate,\n        customerRating: 4.2 + Math.random() * 0.8, // Mock rating\n        isActive: facility.isActive,\n        lastBookingDate: facilityBookings.length > 0 \n          ? new Date(Math.max(...facilityBookings.map((b: any) => new Date(b.createdAt).getTime()))).toISOString()\n          : '',\n        trendDirection: weeklyBookings > 5 ? 'up' : weeklyBookings < 2 ? 'down' : 'stable',\n        revenueGrowth: Math.random() * 40 - 20, // Mock growth\n        bookingGrowth: Math.random() * 30 - 15, // Mock growth\n      };\n    });\n  };\n\n  const popularityData = calculateFacilityAnalytics();\n\n  // Filter and sort facilities directly from API data\n  const filteredFacilities = facilities\n    ? facilities\n        .filter((facility) => {\n          const matchesType = filterType === \"all\" || facility.type?.toLowerCase().includes(filterType.toLowerCase());\n          return matchesType;\n        })\n        .sort((a, b) => {\n          switch (sortBy) {\n            case 'popularity': return (b.capacity || 0) - (a.capacity || 0);\n            case 'revenue': return (b.hourlyRate || 0) - (a.hourlyRate || 0);\n            case 'rating': return b.name.localeCompare(a.name);\n            case 'occupancy': return (b.capacity || 0) - (a.capacity || 0);\n            default: return b.name.localeCompare(a.name);\n          }\n        })\n    : [];\n\n  const dataLoading = facilitiesLoading || statsLoading || bookingsLoading;\n\n  // Toggle facility status\n  const toggleFacilityStatus = useMutation({\n    mutationFn: async ({ id, isActive }: { id: number; isActive: boolean }) => {\n      return apiRequest(`/api/admin/facilities/${id}`, {\n        method: 'PATCH',\n        body: JSON.stringify({ isActive }),\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Facility status updated successfully\" });\n      refetchFacilities();\n    },\n    onError: () => {\n      toast({ \n        title: \"Error\", \n        description: \"Failed to update facility status\", \n        variant: \"destructive\" \n      });\n    },\n  });\n\n  if (authLoading || dataLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Facilities Management</h1>\n              <p className=\"text-gray-600\">Analytics and management for all facilities (Legacy + Master Tables)</p>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button \n                variant=\"outline\" \n                size=\"sm\" \n                onClick={() => {\n                  refetchFacilities();\n                  refetchStats();\n                }}\n                disabled={dataLoading}\n              >\n                <RefreshCw className={`h-4 w-4 mr-2 ${dataLoading ? 'animate-spin' : ''}`} />\n                Refresh\n              </Button>\n              <Button \n                onClick={() => window.location.href = '/admin/grounds'}\n                variant=\"outline\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Facility\n              </Button>\n            </div>\n          </div>\n\n          {/* Filters and Controls */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <div className=\"flex gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <label className=\"text-sm font-medium\">Filter:</label>\n                <select\n                  value={filterType}\n                  onChange={(e) => setFilterType(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                >\n                  <option value=\"all\">All Types</option>\n                  <option value=\"badminton\">Badminton</option>\n                  <option value=\"football\">Football</option>\n                  <option value=\"basketball\">Basketball</option>\n                  <option value=\"tennis\">Tennis</option>\n                </select>\n              </div>\n              \n              <div className=\"flex items-center gap-2\">\n                <label className=\"text-sm font-medium\">Sort by:</label>\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 rounded-md text-sm\"\n                >\n                  <option value=\"popularity\">Popularity</option>\n                  <option value=\"revenue\">Revenue</option>\n                  <option value=\"rating\">Rating</option>\n                  <option value=\"occupancy\">Occupancy</option>\n                </select>\n              </div>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button\n                variant={viewMode === 'grid' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('grid')}\n              >\n                Grid\n              </Button>\n              <Button\n                variant={viewMode === 'table' ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setViewMode('table')}\n              >\n                Table\n              </Button>\n            </div>\n          </div>\n\n          {/* Summary Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Building2 className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Facilities</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{facilityStats?.totalFacilities || facilities?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <BarChart3 className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {facilityStats?.totalBookings || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <IndianRupee className=\"h-8 w-8 text-purple-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Revenue Collected</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      ₹{facilityStats?.totalRevenue?.toLocaleString() || '0'}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Star className=\"h-8 w-8 text-orange-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Avg Capacity</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {facilityStats?.avgCapacity || \n                        (facilities?.length \n                          ? (facilities.reduce((sum, f) => sum + (f.capacity || 0), 0) / facilities.length).toFixed(0)\n                          : '0'\n                        )\n                      } people\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Facilities Content */}\n          {viewMode === 'grid' ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredFacilities.map((facility) => (\n                <Card key={facility.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"relative\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <Building2 className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        {facility.capacity > 8 && (\n                          <div className=\"absolute -top-1 -right-1 w-4 h-4 bg-yellow-500 rounded-full flex items-center justify-center\">\n                            <Star className=\"h-2 w-2 text-white\" />\n                          </div>\n                        )}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          {facility.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600 capitalize\">{facility.type}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <Switch\n                        checked={facility.isActive}\n                        onCheckedChange={(checked) => \n                          toggleFacilityStatus.mutate({ id: facility.id, isActive: checked })\n                        }\n                      />\n                      {facility.trendDirection === 'up' ? (\n                        <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                      ) : facility.trendDirection === 'down' ? (\n                        <TrendingDown className=\"h-4 w-4 text-red-500\" />\n                      ) : (\n                        <Activity className=\"h-4 w-4 text-gray-400\" />\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      {/* Popularity Metrics */}\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                          <p className=\"text-2xl font-bold text-blue-600\">{facility.capacity || 0}</p>\n                          <p className=\"text-xs text-gray-600\">Capacity</p>\n                        </div>\n                        <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                          <p className=\"text-2xl font-bold text-green-600\">₹{(facility.hourlyRate || 0).toLocaleString()}</p>\n                          <p className=\"text-xs text-gray-600\">Hourly Rate</p>\n                        </div>\n                      </div>\n\n                      {/* Rating and Occupancy */}\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Type:</span>\n                          <span className=\"font-medium capitalize\">{facility.type || 'General'}</span>\n                        </div>\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"text-sm text-gray-600\">Status:</span>\n                          <span className={`font-medium ${facility.isActive ? 'text-green-600' : 'text-red-600'}`}>\n                            {facility.isActive ? 'Active' : 'Inactive'}\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Location and Source */}\n                      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                        <div className=\"text-center\">\n                          <p className=\"font-medium text-blue-600\">{facility.location || 'Not specified'}</p>\n                          <p className=\"text-gray-500\">Location</p>\n                        </div>\n                        <div className=\"text-center\">\n                          <p className={`font-medium ${facility.source === 'master' ? 'text-green-600' : 'text-orange-600'}`}>\n                            {facility.source === 'master' ? 'Master Tables' : 'Legacy System'}\n                          </p>\n                          <p className=\"text-gray-500\">Data Source</p>\n                        </div>\n                      </div>\n\n                      {/* Quick Stats */}\n                      <div className=\"pt-2 border-t space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Amenities:</span>\n                          <span className=\"font-medium\">{facility.amenities?.length || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-gray-600\">Created:</span>\n                          <span className=\"font-medium\">{facility.createdAt ? new Date(facility.createdAt).toLocaleDateString() : 'N/A'}</span>\n                        </div>\n                      </div>\n                      \n                      {/* Action Buttons */}\n                      <div className=\"flex gap-2 mt-4\">\n                        <Button\n                          variant=\"default\"\n                          size=\"sm\"\n                          onClick={() => {\n                            setSelectedFacilityForBooking(facility);\n                            setIsAdminBookingModalOpen(true);\n                          }}\n                          className=\"flex-1 bg-blue-600 hover:bg-blue-700\"\n                        >\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          Book as Admin\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.location.href = `/admin/bookings?facility=${facility.facilityId}`}\n                          className=\"flex-1\"\n                        >\n                          <Eye className=\"h-3 w-3 mr-1\" />\n                          View Bookings\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => window.location.href = `/admin/facilities/${facility.facilityId}/edit`}\n                          className=\"flex-1\"\n                        >\n                          <Edit className=\"h-3 w-3 mr-1\" />\n                          Edit\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card>\n              <CardHeader>\n                <CardTitle>Facilities Performance Table</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left py-3 px-4\">Facility</th>\n                        <th className=\"text-left py-3 px-4\">Type</th>\n                        <th className=\"text-left py-3 px-4\">Capacity</th>\n                        <th className=\"text-left py-3 px-4\">Hourly Rate</th>\n                        <th className=\"text-left py-3 px-4\">Category</th>\n                        <th className=\"text-left py-3 px-4\">Location</th>\n                        <th className=\"text-left py-3 px-4\">Source</th>\n                        <th className=\"text-left py-3 px-4\">Status</th>\n                        <th className=\"text-left py-3 px-4\">Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {filteredFacilities.map((facility) => (\n                        <tr key={facility.id} className=\"border-b hover:bg-gray-50\">\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center gap-3\">\n                              <Building2 className=\"h-5 w-5 text-gray-400\" />\n                              <div>\n                                <p className=\"font-medium\">{facility.name}</p>\n                                <p className=\"text-sm text-gray-500\">ID: {facility.id}</p>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4 capitalize\">{facility.type}</td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-center\">\n                              <p className=\"font-bold text-lg\">{facility.capacity || 0}</p>\n                              <p className=\"text-xs text-gray-500\">Capacity</p>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-center\">\n                              <p className=\"font-bold text-lg text-green-600\">₹{(facility.hourlyRate || 0).toLocaleString()}</p>\n                              <p className=\"text-xs text-gray-500\">Hourly Rate</p>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center gap-1\">\n                              <Building2 className=\"h-4 w-4 text-blue-500\" />\n                              <span className=\"font-medium capitalize\">{facility.type || 'General'}</span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-center\">\n                              <p className=\"font-medium\">{facility.location || 'Not specified'}</p>\n                              <p className=\"text-xs text-gray-500\">Location</p>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center gap-1\">\n                              <span className={`px-2 py-1 rounded text-xs font-medium ${facility.source === 'master' ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'}`}>\n                                {facility.source === 'master' ? 'Master' : 'Legacy'}\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <Switch\n                              checked={facility.isActive}\n                              onCheckedChange={(checked) => \n                                toggleFacilityStatus.mutate({ id: facility.facilityId, isActive: checked })\n                              }\n                            />\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex gap-1\">\n                              <Button \n                                variant=\"default\" \n                                size=\"sm\" \n                                onClick={() => {\n                                  setSelectedFacilityForBooking(facility);\n                                  setIsAdminBookingModalOpen(true);\n                                }}\n                                className=\"bg-blue-600 hover:bg-blue-700\"\n                              >\n                                <Calendar className=\"h-3 w-3\" />\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `/admin/bookings?facility=${facility.facilityId}`}>\n                                <Eye className=\"h-3 w-3\" />\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.href = `/admin/facilities/${facility.facilityId}/edit`}>\n                                <Edit className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {filteredFacilities.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Building2 className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No facilities found</h3>\n                <p className=\"text-gray-600 mb-6\">\n                  {filterType !== \"all\" \n                    ? \"No facilities match your current filter criteria.\" \n                    : \"Create facilities to get started with bookings and analytics.\"\n                  }\n                </p>\n                <div className=\"flex gap-2 justify-center\">\n                  {filterType !== \"all\" && (\n                    <Button variant=\"outline\" onClick={() => setFilterType(\"all\")}>\n                      Clear Filters\n                    </Button>\n                  )}\n                  <Button onClick={() => window.location.href = '/admin/grounds'}>\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add Facility\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Admin Booking Modal */}\n      {selectedFacilityForBooking && (\n        <BookingModal\n          facility={selectedFacilityForBooking}\n          isOpen={isAdminBookingModalOpen}\n          onClose={() => {\n            setIsAdminBookingModalOpen(false);\n            setSelectedFacilityForBooking(null);\n          }}\n          isAdminBooking={true}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":28340},"client/src/pages/admin/users.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { \n  Users,\n  Search, \n  Filter,\n  Shield,\n  User,\n  Mail,\n  Phone,\n  Edit,\n  MoreHorizontal\n} from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\n\n// User interface for admin management\ninterface UserAdmin {\n  id: string;\n  firstName?: string;\n  lastName?: string;\n  email: string;\n  phone?: string;\n  role: string;\n  isActive: boolean;\n  lastLogin?: string;\n  createdAt: string;\n  bookingsCount: number;\n  totalSpent: string;\n}\n\nconst userUpdateSchema = z.object({\n  role: z.enum(['client', 'admin', 'manager']),\n  isActive: z.boolean(),\n});\n\ntype UserUpdateData = z.infer<typeof userUpdateSchema>;\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nexport default function AdminUsers() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [currentPage, setCurrentPage] = useState(1);\n  const [roleFilter, setRoleFilter] = useState<string>(\"all\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<UserAdmin | null>(null);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n\n  const limit = 20;\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!authLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, authLoading, user, toast]);\n\n  // Form for user updates\n  const form = useForm<UserUpdateData>({\n    resolver: zodResolver(userUpdateSchema),\n    defaultValues: {\n      role: 'client',\n      isActive: true,\n    },\n  });\n\n  // Fetch users\n  const userQueryParams = new URLSearchParams({\n    page: currentPage.toString(),\n    limit: limit.toString(),\n    ...(roleFilter !== 'all' && { role: roleFilter }),\n    ...(searchTerm && { search: searchTerm }),\n  });\n\n  const { data: usersData, isLoading: usersLoading } = useQuery<{users: UserAdmin[], total: number}>({\n    queryKey: [`/api/admin/users?${userQueryParams.toString()}`],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: UserUpdateData }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/users/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      setIsEditDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"User Updated\",\n        description: \"The user has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getRoleBadge = (role: string) => {\n    const roleConfig = {\n      'admin': { variant: 'destructive' as const, icon: Shield },\n      'manager': { variant: 'default' as const, icon: Shield },\n      'client': { variant: 'secondary' as const, icon: User },\n    };\n\n    const config = roleConfig[role as keyof typeof roleConfig] || roleConfig.client;\n    const Icon = config.icon;\n\n    return (\n      <Badge variant={config.variant} className=\"flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {role}\n      </Badge>\n    );\n  };\n\n  const handleEditUser = (userData: UserAdmin) => {\n    setSelectedUser(userData);\n    form.reset({\n      role: userData.role as 'client' | 'admin' | 'manager',\n      isActive: userData.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const onSubmit = (data: UserUpdateData) => {\n    if (selectedUser) {\n      updateUserMutation.mutate({ id: selectedUser.id, data });\n    }\n  };\n\n  const totalPages = Math.ceil((usersData?.total || 0) / limit);\n\n  if (authLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Users Management</h1>\n              <p className=\"text-gray-600\">Manage user accounts and permissions</p>\n            </div>\n          </div>\n\n          {/* Filters */}\n          <div className=\"flex gap-4 mb-6\">\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search by name or email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-48\">\n                <SelectValue placeholder=\"Filter by role\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Roles</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"manager\">Manager</SelectItem>\n                <SelectItem value=\"client\">Client</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Stats Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Users className=\"h-8 w-8 text-blue-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Total Users</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{usersData?.total || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-8 w-8 text-red-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Admins</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {(usersData?.users || []).filter(u => u.role === 'admin').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <Shield className=\"h-8 w-8 text-green-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Managers</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {(usersData?.users || []).filter(u => u.role === 'manager').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <User className=\"h-8 w-8 text-purple-600\" />\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-gray-600\">Clients</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">\n                      {(usersData?.users || []).filter(u => u.role === 'client').length}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Users Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>All Users</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {usersLoading ? (\n                <div className=\"flex justify-center items-center py-8\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>User</TableHead>\n                        <TableHead>Contact</TableHead>\n                        <TableHead>Role</TableHead>\n                        <TableHead>Status</TableHead>\n                        <TableHead>Activity</TableHead>\n                        <TableHead>Statistics</TableHead>\n                        <TableHead>Actions</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {(usersData?.users || []).map((userData) => (\n                        <TableRow key={userData.id} className=\"hover:bg-gray-50\">\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">\n                                {userData.firstName && userData.lastName \n                                  ? `${userData.firstName} ${userData.lastName}`\n                                  : userData.email\n                                }\n                              </div>\n                              <div className=\"text-sm text-gray-600\">ID: {userData.id}</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"flex items-center text-sm\">\n                                <Mail className=\"h-3 w-3 mr-1 text-gray-400\" />\n                                {userData.email}\n                              </div>\n                              {userData.phone && (\n                                <div className=\"flex items-center text-sm text-gray-600\">\n                                  <Phone className=\"h-3 w-3 mr-1 text-gray-400\" />\n                                  {userData.phone}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            {getRoleBadge(userData.role)}\n                          </TableCell>\n                          <TableCell>\n                            <Badge variant={userData.isActive ? \"default\" : \"secondary\"}>\n                              {userData.isActive ? \"Active\" : \"Inactive\"}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <div>Joined: {new Date(userData.createdAt).toLocaleDateString()}</div>\n                              {userData.lastLogin && (\n                                <div className=\"text-gray-600\">\n                                  Last login: {new Date(userData.lastLogin).toLocaleDateString()}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <div>{userData.bookingsCount} bookings</div>\n                              <div className=\"text-gray-600\">₹{parseFloat(userData.totalSpent || '0').toLocaleString()} spent</div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleEditUser(userData)}\n                            >\n                              <Edit className=\"h-3 w-3 mr-1\" />\n                              Edit\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      ))}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n              \n              {/* Pagination */}\n              {totalPages > 1 && (\n                <div className=\"flex justify-between items-center mt-6\">\n                  <div className=\"text-sm text-gray-600\">\n                    Showing {((currentPage - 1) * limit) + 1} to {Math.min(currentPage * limit, usersData?.total || 0)} of {usersData?.total || 0} users\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage <= 1}\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"px-3 py-2 text-sm\">\n                      {currentPage} of {totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage >= totalPages}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Edit User Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Edit User</DialogTitle>\n            <DialogDescription>\n              Update user role and status\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedUser && (\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>User:</strong> {selectedUser.firstName && selectedUser.lastName \n                      ? `${selectedUser.firstName} ${selectedUser.lastName}`\n                      : selectedUser.email\n                    }\n                  </p>\n                  <p className=\"text-sm text-gray-600\">\n                    <strong>Email:</strong> {selectedUser.email}\n                  </p>\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"role\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Role</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select a role\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"client\">Client</SelectItem>\n                          <SelectItem value=\"manager\">Manager</SelectItem>\n                          <SelectItem value=\"admin\">Admin</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"isActive\"\n                  render={({ field }) => (\n                    <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                      <div className=\"space-y-0.5\">\n                        <FormLabel className=\"text-base\">Active Status</FormLabel>\n                        <div className=\"text-sm text-gray-600\">\n                          Enable or disable user account\n                        </div>\n                      </div>\n                      <FormControl>\n                        <input\n                          type=\"checkbox\"\n                          checked={field.value}\n                          onChange={field.onChange}\n                          className=\"w-4 h-4 rounded border-gray-300\"\n                        />\n                      </FormControl>\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditDialogOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={updateUserMutation.isPending}>\n                    {updateUserMutation.isPending ? \"Updating...\" : \"Update User\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19108},"client/src/pages/EnhancedBooking.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Calendar } from '@/components/ui/calendar';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Badge } from '@/components/ui/badge';\nimport { CalendarIcon, Clock, Users, DollarSign, CheckCircle, AlertCircle } from 'lucide-react';\nimport { format, addDays } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface TimeSlot {\n  slotId: number;\n  slotName: string;\n  startTime: string;\n  endTime: string;\n  isPeakHour: boolean;\n  slotOrder: number;\n  isActive: boolean;\n}\n\ninterface Ground {\n  id: number;\n  groundName: string;\n  groundCode: string;\n  location?: string;\n  maxCapacity?: number;\n  imageUrl?: string;\n}\n\ninterface Plan {\n  id: number;\n  planName: string;\n  planType: string;\n  bookingType: string;\n  amount: string;\n  peakHourMultiplier: string;\n  weekendMultiplier: string;\n}\n\ninterface PricingDetail {\n  date: string;\n  slotId: number;\n  price: number;\n  isPeakHour: boolean;\n  dayType: string;\n}\n\nexport default function EnhancedBooking() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Form state\n  const [selectedSport, setSelectedSport] = useState<number | null>(null);\n  const [selectedGround, setSelectedGround] = useState<number | null>(null);\n  const [selectedPlan, setSelectedPlan] = useState<number | null>(null);\n  const [bookingMode, setBookingMode] = useState<'per_person' | 'full_ground'>('per_person');\n  const [participantCount, setParticipantCount] = useState(1);\n  const [selectedDate, setSelectedDate] = useState<Date>(new Date());\n  const [endDate, setEndDate] = useState<Date>();\n  const [selectedSlots, setSelectedSlots] = useState<number[]>([]);\n  const [showPricing, setShowPricing] = useState(false);\n\n  // Data queries\n  const { data: sports } = useQuery({\n    queryKey: ['/api/sports'],\n    enabled: true\n  });\n\n  const { data: grounds } = useQuery({\n    queryKey: ['/api/grounds'],\n    enabled: !!selectedSport\n  });\n\n  const { data: plans } = useQuery({\n    queryKey: ['/api/plans'],\n    enabled: !!selectedGround\n  });\n\n  const { data: timeSlots } = useQuery({\n    queryKey: ['/api/time-slots/master'],\n    enabled: true\n  });\n\n  // Availability check mutation\n  const availabilityMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await fetch('/api/bookings/check-availability', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(params)\n      });\n      return response.json();\n    },\n  });\n\n  // Pricing calculation mutation\n  const pricingMutation = useMutation({\n    mutationFn: async (params: any) => {\n      const response = await fetch('/api/bookings/calculate-price', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(params)\n      });\n      return response.json();\n    },\n  });\n\n  // Enhanced booking creation mutation\n  const bookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      const response = await fetch('/api/bookings/enhanced', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(bookingData),\n        credentials: 'include'\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Created\",\n        description: \"Your enhanced booking has been created successfully with dynamic pricing.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings'] });\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const resetForm = () => {\n    setSelectedSport(null);\n    setSelectedGround(null);\n    setSelectedPlan(null);\n    setSelectedSlots([]);\n    setShowPricing(false);\n    setParticipantCount(1);\n  };\n\n  const handleSlotToggle = (slotId: number) => {\n    setSelectedSlots(prev => \n      prev.includes(slotId) \n        ? prev.filter(id => id !== slotId)\n        : [...prev, slotId]\n    );\n  };\n\n  const calculatePricing = async () => {\n    if (!selectedGround || !selectedPlan || !selectedDate || selectedSlots.length === 0) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select ground, plan, date, and time slots\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const params = {\n      groundId: selectedGround,\n      planId: selectedPlan,\n      startDate: format(selectedDate, 'yyyy-MM-dd'),\n      endDate: endDate ? format(endDate, 'yyyy-MM-dd') : undefined,\n      slotIds: selectedSlots,\n      bookingMode,\n      noOfPersons: participantCount\n    };\n\n    try {\n      await pricingMutation.mutateAsync(params);\n      setShowPricing(true);\n    } catch (error) {\n      console.error('Pricing calculation failed:', error);\n    }\n  };\n\n  const checkAvailability = async () => {\n    if (!selectedGround || selectedSlots.length === 0) {\n      return;\n    }\n\n    const params = {\n      groundId: selectedGround,\n      startDate: format(selectedDate, 'yyyy-MM-dd'),\n      endDate: endDate ? format(endDate, 'yyyy-MM-dd') : undefined,\n      slotIds: selectedSlots,\n      bookingMode,\n      noOfPersons: participantCount\n    };\n\n    try {\n      await availabilityMutation.mutateAsync(params);\n    } catch (error) {\n      console.error('Availability check failed:', error);\n    }\n  };\n\n  const handleBookingSubmit = async () => {\n    if (!selectedGround || !selectedPlan || selectedSlots.length === 0) {\n      toast({\n        title: \"Incomplete Form\",\n        description: \"Please fill all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const bookingData = {\n      groundId: selectedGround,\n      planId: selectedPlan,\n      bookingMode,\n      startDate: format(selectedDate, 'yyyy-MM-dd'),\n      endDate: endDate ? format(endDate, 'yyyy-MM-dd') : undefined,\n      slotIds: selectedSlots,\n      participantCount: bookingMode === 'per_person' ? participantCount : undefined,\n      paymentMethod: 'pending',\n      notes: `Enhanced booking for ${selectedSlots.length} slots with dynamic pricing`\n    };\n\n    try {\n      await bookingMutation.mutateAsync(bookingData);\n    } catch (error) {\n      console.error('Booking creation failed:', error);\n    }\n  };\n\n  // Get available grounds based on selected sport\n  // Note: booking mode is now determined by sport.bookingType, not ground-level fields\n  const availableGrounds = Array.isArray(grounds) ? grounds : [];\n\n  // Get available plans based on selected ground and booking mode\n  const availablePlans = Array.isArray(plans) ? plans.filter((plan: Plan) => \n    plan.bookingType === bookingMode\n  ) : [];\n\n  const selectedGroundData = Array.isArray(grounds) ? grounds.find((g: Ground) => g.id === selectedGround) : undefined;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8\">\n      <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Enhanced Booking System\n          </h1>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n            Book sports facilities with dynamic pricing, multi-slot support, and flexible booking modes\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Booking Form */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Sport & Ground Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  Sport & Ground Selection\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Sport</Label>\n                    <Select value={selectedSport?.toString()} onValueChange={(value) => setSelectedSport(parseInt(value))}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select sport\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.isArray(sports) && sports.map((sport: any) => (\n                          <SelectItem key={sport.id} value={sport.id.toString()}>\n                            {sport.sportName}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>Booking Mode</Label>\n                    <Select value={bookingMode} onValueChange={(value: 'per_person' | 'full_ground') => setBookingMode(value)}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"per_person\">Per Person</SelectItem>\n                        <SelectItem value=\"full_ground\">Full Ground</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Ground</Label>\n                  <Select value={selectedGround?.toString()} onValueChange={(value) => setSelectedGround(parseInt(value))}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select ground\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {availableGrounds?.map((ground: Ground) => (\n                        <SelectItem key={ground.id} value={ground.id.toString()}>\n                          {ground.groundName} \n                          {ground.maxCapacity && ` (Capacity: ${ground.maxCapacity})`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {selectedGroundData && (\n                  <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                      <strong>Ground:</strong> {selectedGroundData.groundName}\n                    </p>\n                    {selectedGroundData.location && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        <strong>Location:</strong> {selectedGroundData.location}\n                      </p>\n                    )}\n                    {selectedGroundData.maxCapacity && (\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        <strong>Max Capacity:</strong> {selectedGroundData.maxCapacity} persons\n                      </p>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Date & Time Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CalendarIcon className=\"h-5 w-5\" />\n                  Date & Time Selection\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label>Start Date</Label>\n                    <Popover>\n                      <PopoverTrigger asChild>\n                        <Button variant=\"outline\" className=\"w-full justify-start text-left font-normal\">\n                          {selectedDate ? format(selectedDate, 'PPP') : <span>Pick a date</span>}\n                          <CalendarIcon className=\"ml-auto h-4 w-4\" />\n                        </Button>\n                      </PopoverTrigger>\n                      <PopoverContent className=\"w-auto p-0\">\n                        <Calendar\n                          mode=\"single\"\n                          selected={selectedDate}\n                          onSelect={(date) => date && setSelectedDate(date)}\n                          disabled={(date) => date < new Date()}\n                          initialFocus\n                        />\n                      </PopoverContent>\n                    </Popover>\n                  </div>\n\n                  <div>\n                    <Label>Participants</Label>\n                    <Input\n                      type=\"number\"\n                      min=\"1\"\n                      max={selectedGroundData?.maxCapacity || 50}\n                      value={participantCount}\n                      onChange={(e) => setParticipantCount(parseInt(e.target.value) || 1)}\n                      disabled={bookingMode === 'full_ground'}\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Available Time Slots</Label>\n                  <div className=\"grid grid-cols-3 sm:grid-cols-4 lg:grid-cols-6 gap-2 mt-2\">\n                    {Array.isArray(timeSlots) && timeSlots.map((slot: TimeSlot) => (\n                      <button\n                        key={slot.slotId}\n                        onClick={() => handleSlotToggle(slot.slotId)}\n                        className={cn(\n                          \"p-2 text-xs border rounded-lg transition-colors\",\n                          selectedSlots.includes(slot.slotId)\n                            ? \"bg-blue-500 text-white border-blue-500\"\n                            : \"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700\",\n                          slot.isPeakHour && \"border-orange-300 bg-orange-50 dark:bg-orange-900/20\"\n                        )}\n                      >\n                        <div className=\"text-center\">\n                          <div className=\"font-medium\">{slot.startTime}</div>\n                          {slot.isPeakHour && (\n                            <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                              Peak\n                            </Badge>\n                          )}\n                        </div>\n                      </button>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Plan Selection */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"h-5 w-5\" />\n                  Pricing Plan\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid gap-3\">\n                  {availablePlans?.map((plan: Plan) => (\n                    <div\n                      key={plan.id}\n                      onClick={() => setSelectedPlan(plan.id)}\n                      className={cn(\n                        \"p-4 border rounded-lg cursor-pointer transition-colors\",\n                        selectedPlan === plan.id\n                          ? \"border-blue-500 bg-blue-50 dark:bg-blue-900/20\"\n                          : \"border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700\"\n                      )}\n                    >\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"font-medium\">{plan.planName}</h4>\n                          <p className=\"text-sm text-gray-600 dark:text-gray-400 capitalize\">\n                            {plan.planType} • {plan.bookingType.replace('_', ' ')}\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold text-lg\">₹{plan.amount}</div>\n                          <div className=\"text-xs text-gray-500\">\n                            Peak: {parseFloat(plan.peakHourMultiplier) * 100}% | \n                            Weekend: {parseFloat(plan.weekendMultiplier) * 100}%\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Booking Summary & Actions */}\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Booking Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Mode:</span>\n                    <span className=\"capitalize\">{bookingMode.replace('_', ' ')}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Date:</span>\n                    <span>{selectedDate ? format(selectedDate, 'MMM dd, yyyy') : 'Not selected'}</span>\n                  </div>\n                  <div className=\"flex justify-between text-sm\">\n                    <span>Slots:</span>\n                    <span>{selectedSlots.length} selected</span>\n                  </div>\n                  {bookingMode === 'per_person' && (\n                    <div className=\"flex justify-between text-sm\">\n                      <span>Participants:</span>\n                      <span>{participantCount}</span>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"space-y-3\">\n                  <Button\n                    onClick={calculatePricing}\n                    disabled={!selectedGround || !selectedPlan || selectedSlots.length === 0}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    Calculate Pricing\n                  </Button>\n\n                  <Button\n                    onClick={checkAvailability}\n                    disabled={!selectedGround || selectedSlots.length === 0}\n                    className=\"w-full\"\n                    variant=\"outline\"\n                  >\n                    Check Availability\n                  </Button>\n                </div>\n\n                {/* Availability Status */}\n                {availabilityMutation.data && (\n                  <div className=\"p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-green-800 dark:text-green-200\">\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <span className=\"font-medium\">Available</span>\n                    </div>\n                    <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\n                      All selected slots are available for booking\n                    </p>\n                  </div>\n                )}\n\n                {/* Pricing Details */}\n                {pricingMutation.data && showPricing && (\n                  <div className=\"space-y-3\">\n                    <div className=\"border-t pt-3\">\n                      <h4 className=\"font-medium mb-2\">Pricing Breakdown</h4>\n                      <div className=\"space-y-1 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Base Amount:</span>\n                          <span>₹{pricingMutation.data?.baseAmount || 0}</span>\n                        </div>\n                        <div className=\"flex justify-between font-bold border-t pt-1\">\n                          <span>Total Amount:</span>\n                          <span>₹{pricingMutation.data?.totalAmount || 0}</span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <h5 className=\"text-sm font-medium\">Slot Details:</h5>\n                      {pricingMutation.data?.slotPricing?.slice(0, 3).map((slot: PricingDetail, index: number) => (\n                        <div key={index} className=\"flex justify-between text-xs\">\n                          <span>\n                            Slot {slot.slotId} {slot.isPeakHour && '(Peak)'} {slot.dayType}\n                          </span>\n                          <span>₹{slot.price}</span>\n                        </div>\n                      ))}\n                      {(pricingMutation.data?.slotPricing?.length || 0) > 3 && (\n                        <div className=\"text-xs text-gray-500\">\n                          +{(pricingMutation.data?.slotPricing?.length || 0) - 3} more slots\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <Button\n                  onClick={handleBookingSubmit}\n                  disabled={!selectedGround || !selectedPlan || selectedSlots.length === 0 || bookingMutation.isPending}\n                  className=\"w-full\"\n                >\n                  {bookingMutation.isPending ? 'Creating Booking...' : 'Create Enhanced Booking'}\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Features Info */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-sm\">Enhanced Features</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Dynamic pricing with peak hour rates</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Weekend pricing multipliers</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Multi-slot booking support</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Per-person & full-ground modes</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                  <span>Real-time availability checking</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":23286},"client/src/pages/admin/grounds.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Plus, Pencil, Trash2, MapPin, Users, Image, PauseCircle, PlayCircle } from \"lucide-react\";\nimport { z } from \"zod\";\nimport type { Ground, Sport } from \"@shared/schema\";\nimport { insertGroundSchema } from \"@shared/schema\";\n\n// Form schema for grounds\nconst groundFormSchema = insertGroundSchema.extend({\n  sportId: z.number().min(1, \"Please select a sport\"),\n  groundName: z.string().min(2, \"Ground name must be at least 2 characters\").max(100, \"Ground name must be at most 100 characters\"),\n  groundCode: z.string().min(2, \"Ground code must be at least 2 characters\").max(20, \"Ground code must be at most 20 characters\"),\n  location: z.string().min(2, \"Location must be at least 2 characters\").optional(),\n  facilities: z.string().optional(),\n  maxCapacity: z.number().min(1, \"Capacity must be at least 1\"),\n  imageUrl: z.string().url(\"Must be a valid URL\").optional().or(z.literal(\"\")),\n});\n\ntype GroundFormData = z.infer<typeof groundFormSchema>;\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nexport default function AdminGrounds() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedGround, setSelectedGround] = useState<Ground | null>(null);\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: grounds, isLoading: groundsLoading } = useQuery<Ground[]>({\n    queryKey: [\"/api/admin/grounds\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const { data: sports } = useQuery<Sport[]>({\n    queryKey: [\"/api/admin/sports\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const form = useForm<GroundFormData>({\n    resolver: zodResolver(groundFormSchema),\n    defaultValues: {\n      sportId: 0,\n      groundName: \"\",\n      groundCode: \"\",\n      location: \"\",\n      facilities: \"\",\n      maxCapacity: 1,\n      imageUrl: \"\",\n      isActive: true,\n    },\n  });\n\n  const createGroundMutation = useMutation({\n    mutationFn: async (data: GroundFormData) => {\n      // Check for duplicate ground code\n      const existingGroundWithCode = grounds?.find(g => g.groundCode.toLowerCase() === data.groundCode.toLowerCase());\n      if (existingGroundWithCode) {\n        throw new Error(`Ground code \"${data.groundCode}\" already exists`);\n      }\n      \n      // Check for duplicate ground name\n      const existingGroundWithName = grounds?.find(g => g.groundName.toLowerCase() === data.groundName.toLowerCase());\n      if (existingGroundWithName) {\n        throw new Error(`Ground name \"${data.groundName}\" already exists`);\n      }\n\n      return await apiRequest(\"POST\", \"/api/admin/grounds\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/grounds\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Ground Created\",\n        description: \"The ground has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateGroundMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<GroundFormData> }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/grounds/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/grounds\"] });\n      setIsEditDialogOpen(false);\n      setSelectedGround(null);\n      form.reset();\n      toast({\n        title: \"Ground Updated\",\n        description: \"The ground has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteGroundMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/grounds/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/grounds\"] });\n      toast({\n        title: \"Ground Deleted\",\n        description: \"The ground has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (ground: Ground) => {\n    setSelectedGround(ground);\n    form.reset({\n      sportId: ground.sportId,\n      groundName: ground.groundName,\n      groundCode: ground.groundCode,\n      location: ground.location || \"\",\n      facilities: ground.facilities || \"\",\n      maxCapacity: ground.maxCapacity || 1,\n      imageUrl: ground.imageUrl || \"\",\n      isActive: ground.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (ground: Ground) => {\n    if (window.confirm(`Are you sure you want to delete \"${ground.groundName}\"? This action cannot be undone.`)) {\n      deleteGroundMutation.mutate(ground.id);\n    }\n  };\n\n  const handleToggleActive = (ground: Ground) => {\n    updateGroundMutation.mutate({\n      id: ground.id,\n      data: {\n        sportId: ground.sportId,\n        groundName: ground.groundName,\n        groundCode: ground.groundCode,\n        location: ground.location || undefined,\n        facilities: ground.facilities || undefined,\n        maxCapacity: ground.maxCapacity || 1,\n        imageUrl: ground.imageUrl || undefined,\n        isActive: !ground.isActive,\n      }\n    });\n  };\n\n  const onSubmit = (data: GroundFormData) => {\n    if (selectedGround) {\n      updateGroundMutation.mutate({ id: selectedGround.id, data });\n    } else {\n      createGroundMutation.mutate(data);\n    }\n  };\n\n  const getSportName = (sportId: number) => {\n    return sports?.find(sport => sport.id === sportId)?.sportName || \"Unknown\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const GroundForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"sportId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Sport</FormLabel>\n              <Select value={field.value?.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a sport\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {sports?.filter(sport => sport.isActive).map((sport) => (\n                    <SelectItem key={sport.id} value={sport.id.toString()}>\n                      {sport.sportName} ({sport.sportCode})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"groundName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Ground Name</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., Court A, Field 1\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"groundCode\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Ground Code</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"e.g., BTN-A1, FB-F1\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"location\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Location</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Building/Area location\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"facilities\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Facilities</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"List of available facilities...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"maxCapacity\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Maximum Capacity *</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  placeholder=\"Enter capacity (required)\"\n                  min=\"1\"\n                  value={field.value || \"\"} \n                  onChange={(e) => field.onChange(e.target.value ? parseInt(e.target.value) : 1)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"imageUrl\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Image URL</FormLabel>\n              <FormControl>\n                <Input placeholder=\"https://...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n\n        \n        <FormField\n          control={form.control}\n          name=\"isActive\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n              <div className=\"space-y-0.5\">\n                <FormLabel>Active Status</FormLabel>\n                <div className=\"text-sm text-muted-foreground\">\n                  Enable this ground for bookings\n                </div>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"flex gap-3 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={createGroundMutation.isPending || updateGroundMutation.isPending}\n            className=\"flex-1\"\n          >\n            {selectedGround \n              ? (updateGroundMutation.isPending ? \"Updating...\" : \"Update Ground\")\n              : (createGroundMutation.isPending ? \"Creating...\" : \"Create Ground\")\n            }\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={() => {\n              if (selectedGround) {\n                setIsEditDialogOpen(false);\n                setSelectedGround(null);\n              } else {\n                setIsCreateDialogOpen(false);\n              }\n            }}\n            className=\"flex-1\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Grounds Management</h1>\n              <p className=\"text-gray-600\">Manage physical facilities and courts</p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  form.reset({\n                    sportId: 0,\n                    groundName: \"\",\n                    groundCode: \"\",\n                    location: \"\",\n                    facilities: \"\",\n                    maxCapacity: 1,\n                    imageUrl: \"\",\n                    isActive: true,\n                  });\n                  setSelectedGround(null);\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Ground\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Ground</DialogTitle>\n                  <DialogDescription>\n                    Create a new ground/court for your sports facility.\n                  </DialogDescription>\n                </DialogHeader>\n                <GroundForm />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {groundsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {grounds?.map((ground) => (\n                <Card key={ground.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      {ground.imageUrl ? (\n                        <img \n                          src={ground.imageUrl} \n                          alt={ground.groundName}\n                          className=\"w-10 h-10 object-cover rounded-lg\"\n                        />\n                      ) : (\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <MapPin className=\"h-5 w-5 text-primary\" />\n                        </div>\n                      )}\n                      <div>\n                        <CardTitle className=\"text-lg\">{ground.groundName}</CardTitle>\n                        <CardDescription>{ground.groundCode} • {getSportName(ground.sportId)}</CardDescription>\n                      </div>\n                    </div>\n                    <Badge variant={ground.isActive ? \"default\" : \"secondary\"}>\n                      {ground.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {ground.location && (\n                        <p className=\"text-sm text-gray-600\">📍 {ground.location}</p>\n                      )}\n                      {ground.maxCapacity && (\n                        <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                          <Users className=\"h-3 w-3\" />\n                          Capacity: {ground.maxCapacity} people\n                        </p>\n                      )}\n\n                    </div>\n                    <div className=\"flex gap-2 mt-4\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(ground)}\n                        className=\"flex-1\"\n                      >\n                        <Pencil className=\"h-3 w-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleToggleActive(ground)}\n                        className={ground.isActive ? \"text-orange-600 hover:text-orange-700 hover:bg-orange-50\" : \"text-green-600 hover:text-green-700 hover:bg-green-50\"}\n                      >\n                        {ground.isActive ? <PauseCircle className=\"h-3 w-3\" /> : <PlayCircle className=\"h-3 w-3\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(ground)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {grounds && grounds.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No grounds found</h3>\n                <p className=\"text-gray-600 mb-6\">Get started by adding your first ground.</p>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add First Ground\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Ground</DialogTitle>\n            <DialogDescription>\n              Update the ground information.\n            </DialogDescription>\n          </DialogHeader>\n          <GroundForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":21121},"client/src/pages/admin/plans.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Plus, Pencil, Trash2, CreditCard, Clock, Calendar, Trophy, PauseCircle, PlayCircle } from \"lucide-react\";\nimport { z } from \"zod\";\nimport type { Plan, Ground, Sport } from \"@shared/schema\";\nimport { insertPlanSchema } from \"@shared/schema\";\n\n// Form schema for plans (booking type now handled at sport level)\nconst planFormSchema = insertPlanSchema.extend({\n  groundId: z.number().min(1, \"Please select a ground\"),\n  planName: z.string()\n    .min(1, \"Plan name is required\")\n    .min(2, \"Plan name must be at least 2 characters\")\n    .max(100, \"Plan name must be at most 100 characters\")\n    .trim(),\n  planType: z.enum([\"hourly\", \"monthly\", \"yearly\"], { required_error: \"Please select a plan type\" }),\n  basePrice: z.string()\n    .min(1, \"Base price is required\")\n    .refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Price must be a positive number\"),\n  weekendMultiplier: z.string()\n    .refine((val) => val === \"\" || (!isNaN(Number(val)) && Number(val) > 0), \"Multiplier must be a positive number\")\n    .optional(),\n  peakHourMultiplier: z.string()\n    .refine((val) => val === \"\" || (!isNaN(Number(val)) && Number(val) > 0), \"Multiplier must be a positive number\")\n    .optional(),\n  description: z.string().optional(),\n});\n\ntype PlanFormData = z.infer<typeof planFormSchema>;\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nexport default function AdminPlans() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: plans, isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/admin/plans\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const { data: grounds } = useQuery<Ground[]>({\n    queryKey: [\"/api/admin/grounds\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const { data: sports } = useQuery<Sport[]>({\n    queryKey: [\"/api/admin/sports\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const form = useForm<PlanFormData>({\n    resolver: zodResolver(planFormSchema),\n    defaultValues: {\n      groundId: 0,\n      planName: \"\",\n      planType: \"hourly\",\n      basePrice: \"\",\n      weekendMultiplier: \"1.2\",\n      peakHourMultiplier: \"1.5\",\n      description: \"\",\n      isActive: true,\n    },\n  });\n\n  const createPlanMutation = useMutation({\n    mutationFn: async (data: PlanFormData) => {\n      const planData = {\n        ...data,\n        basePrice: Number(data.basePrice),\n        weekendMultiplier: data.weekendMultiplier ? Number(data.weekendMultiplier) : undefined,\n        peakHourMultiplier: data.peakHourMultiplier ? Number(data.peakHourMultiplier) : undefined,\n      };\n      return await apiRequest(\"POST\", \"/api/admin/plans\", planData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Plan Created\",\n        description: \"The pricing plan has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePlanMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<PlanFormData> }) => {\n      const planData = {\n        ...data,\n        basePrice: data.basePrice ? Number(data.basePrice) : undefined,\n        weekendMultiplier: data.weekendMultiplier ? Number(data.weekendMultiplier) : undefined,\n        peakHourMultiplier: data.peakHourMultiplier ? Number(data.peakHourMultiplier) : undefined,\n      };\n      return await apiRequest(\"PATCH\", `/api/admin/plans/${id}`, planData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      setIsEditDialogOpen(false);\n      setSelectedPlan(null);\n      form.reset();\n      toast({\n        title: \"Plan Updated\",\n        description: \"The pricing plan has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deletePlanMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/plans/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/plans\"] });\n      toast({\n        title: \"Plan Deleted\",\n        description: \"The pricing plan has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (plan: Plan) => {\n    setSelectedPlan(plan);\n    form.reset({\n      groundId: plan.groundId,\n      planName: plan.planName,\n      planType: plan.planType as \"hourly\" | \"monthly\" | \"yearly\",\n      basePrice: plan.basePrice?.toString() || \"\",\n      weekendMultiplier: plan.weekendMultiplier?.toString() || \"\",\n      peakHourMultiplier: plan.peakHourMultiplier?.toString() || \"\",\n      description: plan.description || \"\",\n      isActive: plan.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (plan: Plan) => {\n    if (window.confirm(`Are you sure you want to delete \"${plan.planName}\"? This action cannot be undone.`)) {\n      deletePlanMutation.mutate((plan as any).planId || plan.id);\n    }\n  };\n\n  const handleToggleActive = (plan: Plan) => {\n    updatePlanMutation.mutate({\n      id: (plan as any).planId || plan.id,\n      data: {\n        groundId: plan.groundId,\n        planName: plan.planName,\n        planType: plan.planType as \"hourly\" | \"monthly\" | \"yearly\",\n        basePrice: plan.basePrice?.toString() || \"\",\n        weekendMultiplier: plan.weekendMultiplier?.toString() || \"\",\n        peakHourMultiplier: plan.peakHourMultiplier?.toString() || \"\",\n        description: plan.description || \"\",\n        isActive: !plan.isActive,\n      }\n    });\n  };\n\n  const onSubmit = (data: PlanFormData) => {\n    if (selectedPlan) {\n      updatePlanMutation.mutate({ id: (selectedPlan as any).planId || selectedPlan.id, data });\n    } else {\n      createPlanMutation.mutate(data);\n    }\n  };\n\n  const getGroundInfo = (groundId: number) => {\n    const ground = grounds?.find(g => ((g as any).groundId || g.id) === groundId);\n    const sport = ground ? sports?.find(s => ((s as any).sportId || s.id) === ((ground as any).sportId || ground.sportId)) : null;\n    return {\n      groundName: ground?.groundName || \"Unknown\",\n      sportName: sport?.sportName || \"Unknown\"\n    };\n  };\n\n  const getPlanTypeIcon = (type: string) => {\n    switch (type) {\n      case 'hourly':\n        return <Clock className=\"h-4 w-4\" />;\n      case 'monthly':\n        return <Calendar className=\"h-4 w-4\" />;\n      case 'yearly':\n        return <Trophy className=\"h-4 w-4\" />;\n      default:\n        return <CreditCard className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getPlanTypeBadge = (type: string) => {\n    const colors = {\n      hourly: \"bg-blue-100 text-blue-800\",\n      monthly: \"bg-green-100 text-green-800\",\n      yearly: \"bg-purple-100 text-purple-800\"\n    };\n    return colors[type as keyof typeof colors] || \"bg-gray-100 text-gray-800\";\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const PlanForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"groundId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Ground</FormLabel>\n              <Select value={field.value?.toString()} onValueChange={(value) => field.onChange(parseInt(value))}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a ground\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {grounds?.filter(ground => ground.isActive).map((ground) => {\n                    const sport = sports?.find(s => ((s as any).sportId || s.id) === ((ground as any).sportId || ground.sportId));\n                    const groundId = (ground as any).groundId || ground.id;\n                    return (\n                      <SelectItem key={groundId} value={groundId.toString()}>\n                        {ground.groundName} ({sport?.sportName}) - {ground.groundCode}\n                      </SelectItem>\n                    );\n                  })}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"planName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Plan Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Premium Hourly\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"planType\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Plan Type</FormLabel>\n              <Select value={field.value} onValueChange={field.onChange}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select plan type\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"hourly\">Hourly</SelectItem>\n                  <SelectItem value=\"monthly\">Monthly</SelectItem>\n                  <SelectItem value=\"yearly\">Yearly</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"basePrice\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Base Price (₹)</FormLabel>\n              <FormControl>\n                <Input type=\"number\" step=\"0.01\" placeholder=\"0.00\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"weekendMultiplier\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Weekend Multiplier</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" step=\"0.1\" placeholder=\"1.2\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"peakHourMultiplier\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Peak Hour Multiplier</FormLabel>\n                <FormControl>\n                  <Input type=\"number\" step=\"0.1\" placeholder=\"1.5\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n        \n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea placeholder=\"Plan description and features...\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <FormField\n          control={form.control}\n          name=\"isActive\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n              <div className=\"space-y-0.5\">\n                <FormLabel>Active Status</FormLabel>\n                <div className=\"text-sm text-muted-foreground\">\n                  Enable this plan for bookings\n                </div>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"flex gap-3 pt-4\">\n          <Button \n            type=\"submit\" \n            disabled={createPlanMutation.isPending || updatePlanMutation.isPending}\n            className=\"flex-1\"\n          >\n            {selectedPlan \n              ? (updatePlanMutation.isPending ? \"Updating...\" : \"Update Plan\")\n              : (createPlanMutation.isPending ? \"Creating...\" : \"Create Plan\")\n            }\n          </Button>\n          <Button \n            type=\"button\" \n            variant=\"outline\" \n            onClick={() => {\n              if (selectedPlan) {\n                setIsEditDialogOpen(false);\n                setSelectedPlan(null);\n              } else {\n                setIsCreateDialogOpen(false);\n              }\n            }}\n            className=\"flex-1\"\n          >\n            Cancel\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Plans Management</h1>\n              <p className=\"text-gray-600\">Manage pricing plans for different booking types</p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  form.reset({\n                    groundId: 0,\n                    planName: \"\",\n                    planType: \"hourly\",\n                    basePrice: \"\",\n                    weekendMultiplier: \"\",\n                    peakHourMultiplier: \"\",\n                    description: \"\",\n                    isActive: true,\n                  });\n                  setSelectedPlan(null);\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Plan\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                <DialogHeader>\n                  <DialogTitle>Add New Plan</DialogTitle>\n                  <DialogDescription>\n                    Create a new pricing plan for ground bookings.\n                  </DialogDescription>\n                </DialogHeader>\n                <PlanForm />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {plansLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {plans?.map((plan) => {\n                const { groundName, sportName } = getGroundInfo(plan.groundId);\n                return (\n                  <Card key={plan.id} className=\"hover:shadow-lg transition-shadow\">\n                    <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          {getPlanTypeIcon(plan.planType)}\n                        </div>\n                        <div>\n                          <CardTitle className=\"text-lg\">{plan.planName}</CardTitle>\n                          <CardDescription>{plan.planType} • {groundName}</CardDescription>\n                        </div>\n                      </div>\n                      <Badge variant={plan.isActive ? \"default\" : \"secondary\"}>\n                        {plan.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <Badge className={getPlanTypeBadge(plan.planType)}>\n                            {getPlanTypeIcon(plan.planType)}\n                            <span className=\"ml-1 capitalize\">{plan.planType}</span>\n                          </Badge>\n                          <span className=\"text-lg font-semibold text-primary\">\n                            ₹{plan.basePrice?.toString()}\n                          </span>\n                        </div>\n                        \n                        <div className=\"text-sm text-gray-600\">\n                          <p><strong>Sport:</strong> {sportName}</p>\n                          <p><strong>Ground:</strong> {groundName}</p>\n                          <p><strong>Plan Type:</strong> {plan.planType}</p>\n                        </div>\n                        \n                        {(plan.weekendMultiplier || plan.peakHourMultiplier) && (\n                          <div className=\"text-xs text-gray-500\">\n                            {plan.weekendMultiplier && (\n                              <span>Weekend: {plan.weekendMultiplier}x</span>\n                            )}\n                            {plan.weekendMultiplier && plan.peakHourMultiplier && (\n                              <span> • </span>\n                            )}\n                            {plan.peakHourMultiplier && (\n                              <span>Peak: {plan.peakHourMultiplier}x</span>\n                            )}\n                          </div>\n                        )}\n                        \n                        {plan.description && (\n                          <p className=\"text-sm text-gray-600 line-clamp-2\">\n                            {plan.description}\n                          </p>\n                        )}\n                      </div>\n                      \n                      <div className=\"flex gap-2 mt-4\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(plan)}\n                          className=\"flex-1\"\n                        >\n                          <Pencil className=\"h-3 w-3 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleToggleActive(plan)}\n                          className={plan.isActive ? \"text-orange-600 hover:text-orange-700 hover:bg-orange-50\" : \"text-green-600 hover:text-green-700 hover:bg-green-50\"}\n                        >\n                          {plan.isActive ? <PauseCircle className=\"h-3 w-3\" /> : <PlayCircle className=\"h-3 w-3\" />}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(plan)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n\n          {plans && plans.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No plans found</h3>\n                <p className=\"text-gray-600 mb-6\">Get started by adding your first pricing plan.</p>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add First Plan\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Edit Plan</DialogTitle>\n            <DialogDescription>\n              Update the pricing plan information.\n            </DialogDescription>\n          </DialogHeader>\n          <PlanForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24570},"client/src/pages/admin/sports.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Plus, Pencil, Trash2, Trophy, Image, PauseCircle, PlayCircle } from \"lucide-react\";\nimport { z } from \"zod\";\nimport type { Sport } from \"@shared/schema\";\nimport { insertSportSchema } from \"@shared/schema\";\n\n// Form schema for sports with comprehensive validation\nconst sportFormSchema = insertSportSchema.extend({\n  sportCode: z.string()\n    .min(1, \"Sport code is required\")\n    .min(2, \"Sport code must be at least 2 characters\")\n    .max(10, \"Sport code must be at most 10 characters\")\n    .regex(/^[A-Z0-9]+$/, \"Sport code must contain only uppercase letters and numbers\"),\n  sportName: z.string()\n    .min(1, \"Sport name is required\")\n    .min(2, \"Sport name must be at least 2 characters\")\n    .max(100, \"Sport name must be at most 100 characters\")\n    .trim(),\n  bookingType: z.enum([\"per-person\", \"full-ground\", \"both\"], { required_error: \"Please select a booking type\" }),\n  description: z.string().optional(),\n  imageUrl: z.string().url(\"Must be a valid URL\").optional().or(z.literal(\"\")),\n});\n\ntype SportFormData = z.infer<typeof sportFormSchema>;\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nfunction getBookingTypeDisplay(bookingType: string): string {\n  switch (bookingType) {\n    case \"per-person\": return \"Per Person Only\";\n    case \"full-ground\": return \"Full Ground Only\";\n    case \"both\": return \"Both Options\";\n    default: return \"Full Ground\";\n  }\n}\n\nexport default function AdminSports() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedSport, setSelectedSport] = useState<Sport | null>(null);\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: sports, isLoading: sportsLoading } = useQuery<Sport[]>({\n    queryKey: [\"/api/admin/sports\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const form = useForm<SportFormData>({\n    resolver: zodResolver(sportFormSchema),\n    defaultValues: {\n      sportCode: \"\",\n      sportName: \"\",\n      bookingType: \"full-ground\",\n      description: \"\",\n      imageUrl: \"\",\n      isActive: true,\n    },\n  });\n\n  const createSportMutation = useMutation({\n    mutationFn: async (data: SportFormData) => {\n      return await apiRequest(\"POST\", \"/api/admin/sports\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sports\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Sport Created\",\n        description: \"The sport has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateSportMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: Partial<SportFormData> }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/sports/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sports\"] });\n      setIsEditDialogOpen(false);\n      setSelectedSport(null);\n      form.reset();\n      toast({\n        title: \"Sport Updated\",\n        description: \"The sport has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteSportMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/sports/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/sports\"] });\n      toast({\n        title: \"Sport Deleted\",\n        description: \"The sport has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (sport: Sport) => {\n    setSelectedSport(sport);\n    form.reset({\n      sportCode: sport.sportCode,\n      sportName: sport.sportName,\n      bookingType: sport.bookingType as \"per-person\" | \"full-ground\" | \"both\" || \"full-ground\",\n      description: sport.description || \"\",\n      imageUrl: sport.imageUrl || \"\",\n      isActive: sport.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleToggleActive = (sport: Sport) => {\n    updateSportMutation.mutate({\n      id: sport.id,\n      data: {\n        sportCode: sport.sportCode,\n        sportName: sport.sportName,\n        bookingType: sport.bookingType as \"per-person\" | \"full-ground\" | \"both\",\n        description: sport.description || \"\",\n        imageUrl: sport.imageUrl || \"\",\n        isActive: !sport.isActive,\n      }\n    });\n  };\n\n  const handleDelete = async (sport: Sport) => {\n    if (window.confirm(`Are you sure you want to delete \"${sport.sportName}\"? This action cannot be undone.`)) {\n      deleteSportMutation.mutate(sport.id);\n    }\n  };\n\n  const onSubmit = (data: SportFormData) => {\n    if (selectedSport) {\n      updateSportMutation.mutate({ id: selectedSport.id, data });\n    } else {\n      createSportMutation.mutate(data);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Sports Management</h1>\n              <p className=\"text-gray-600\">Manage sport types and categories</p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  form.reset({\n                    sportCode: \"\",\n                    sportName: \"\",\n                    bookingType: \"full-ground\",\n                    description: \"\",\n                    imageUrl: \"\",\n                    isActive: true,\n                  });\n                  setSelectedSport(null);\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Sport\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Sport</DialogTitle>\n                  <DialogDescription>\n                    Create a new sport type for your facility booking system.\n                  </DialogDescription>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"sportCode\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Sport Code</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., BTN, FB, BB\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"sportName\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Sport Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., Badminton, Football\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"bookingType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Booking Type</FormLabel>\n                          <Select value={field.value} onValueChange={field.onChange}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select booking type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"per-person\">Per Person Only</SelectItem>\n                              <SelectItem value=\"full-ground\">Full Ground Only</SelectItem>\n                              <SelectItem value=\"both\">Both Options</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea placeholder=\"Sport description...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"imageUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Image URL</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"https://...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"isActive\"\n                      render={({ field }) => (\n                        <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                          <div className=\"space-y-0.5\">\n                            <FormLabel>Active Status</FormLabel>\n                            <div className=\"text-sm text-muted-foreground\">\n                              Enable this sport for bookings\n                            </div>\n                          </div>\n                          <FormControl>\n                            <Switch\n                              checked={field.value}\n                              onCheckedChange={field.onChange}\n                            />\n                          </FormControl>\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <div className=\"flex gap-3 pt-4\">\n                      <Button \n                        type=\"submit\" \n                        disabled={createSportMutation.isPending}\n                        className=\"flex-1\"\n                      >\n                        {createSportMutation.isPending ? \"Creating...\" : \"Create Sport\"}\n                      </Button>\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={() => setIsCreateDialogOpen(false)}\n                        className=\"flex-1\"\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {sportsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {sports?.map((sport) => (\n                <Card key={sport.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      {sport.imageUrl ? (\n                        <img \n                          src={sport.imageUrl} \n                          alt={sport.sportName}\n                          className=\"w-10 h-10 object-cover rounded-lg\"\n                        />\n                      ) : (\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <Trophy className=\"h-5 w-5 text-primary\" />\n                        </div>\n                      )}\n                      <div>\n                        <CardTitle className=\"text-lg\">{sport.sportName}</CardTitle>\n                        <CardDescription>{sport.sportCode} • {getBookingTypeDisplay(sport.bookingType || \"full-ground\")}</CardDescription>\n                      </div>\n                    </div>\n                    <Badge variant={sport.isActive ? \"default\" : \"secondary\"}>\n                      {sport.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-sm text-gray-600 mb-4 line-clamp-2\">\n                      {sport.description || \"No description available\"}\n                    </p>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleEdit(sport)}\n                        className=\"flex-1\"\n                      >\n                        <Pencil className=\"h-3 w-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleToggleActive(sport)}\n                        className={sport.isActive ? \"text-orange-600 hover:text-orange-700 hover:bg-orange-50\" : \"text-green-600 hover:text-green-700 hover:bg-green-50\"}\n                      >\n                        {sport.isActive ? <PauseCircle className=\"h-3 w-3\" /> : <PlayCircle className=\"h-3 w-3\" />}\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => handleDelete(sport)}\n                        className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                      >\n                        <Trash2 className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {sports && sports.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Trophy className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No sports found</h3>\n                <p className=\"text-gray-600 mb-6\">Get started by adding your first sport.</p>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add First Sport\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Sport</DialogTitle>\n            <DialogDescription>\n              Update the sport information.\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"sportCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sport Code</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., BTN, FB, BB\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"sportName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Sport Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Badminton, Football\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"bookingType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Booking Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select booking type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"per-person\">Per Person Only</SelectItem>\n                        <SelectItem value=\"full-ground\">Full Ground Only</SelectItem>\n                        <SelectItem value=\"both\">Both Options</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea placeholder=\"Sport description...\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"imageUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Image URL</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"https://...\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel>Active Status</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Enable this sport for bookings\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n              \n              <div className=\"flex gap-3 pt-4\">\n                <Button \n                  type=\"submit\" \n                  disabled={updateSportMutation.isPending}\n                  className=\"flex-1\"\n                >\n                  {updateSportMutation.isPending ? \"Updating...\" : \"Update Sport\"}\n                </Button>\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => {\n                    setIsEditDialogOpen(false);\n                    setSelectedSport(null);\n                  }}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":24360},"client/src/pages/admin/timeslots.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Plus, Pencil, Trash2, Clock, PauseCircle, PlayCircle } from \"lucide-react\";\nimport { z } from \"zod\";\n\n// Time slot interface for master table\ninterface TimeSlotMaster {\n  id: number;\n  slotName: string;\n  startTime: string;\n  endTime: string;\n  isPeakHour: boolean;\n  isActive: boolean;\n  slotOrder?: number;\n  createdAt?: string;\n}\n\n// Form schema for time slots (master table)\nconst timeSlotFormSchema = z.object({\n  slotName: z.string()\n    .min(1, \"Slot name is required\")\n    .min(2, \"Slot name must be at least 2 characters\")\n    .max(50, \"Slot name must be at most 50 characters\"),\n  startTime: z.string()\n    .min(1, \"Start time is required\")\n    .regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, \"Please enter a valid time (HH:MM)\"),\n  endTime: z.string()\n    .min(1, \"End time is required\")\n    .regex(/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/, \"Please enter a valid time (HH:MM)\"),\n  isPeakHour: z.boolean().default(false),\n  slotOrder: z.number().min(1, \"Slot order must be at least 1\").optional(),\n  isActive: z.boolean().default(true),\n});\n\ntype TimeSlotFormData = z.infer<typeof timeSlotFormSchema>;\n\nfunction isUnauthorizedError(error: any): boolean {\n  return error?.status === 401 || error?.message?.includes(\"Unauthorized\");\n}\n\nexport default function AdminTimeSlots() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading, user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [selectedTimeSlot, setSelectedTimeSlot] = useState<TimeSlotMaster | null>(null);\n\n  // Redirect if not authenticated or not admin/manager\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || (user?.role !== 'admin' && user?.role !== 'manager'))) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, user, toast]);\n\n  const { data: timeSlots, isLoading: timeSlotsLoading } = useQuery<TimeSlotMaster[]>({\n    queryKey: [\"/api/admin/timeslots\"],\n    enabled: isAuthenticated && (user?.role === 'admin' || user?.role === 'manager'),\n  });\n\n  const form = useForm<TimeSlotFormData>({\n    resolver: zodResolver(timeSlotFormSchema),\n    defaultValues: {\n      slotName: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      isPeakHour: false,\n      slotOrder: 1,\n      isActive: true,\n    },\n  });\n\n  const createTimeSlotMutation = useMutation({\n    mutationFn: async (data: TimeSlotFormData) => {\n      return await apiRequest(\"POST\", \"/api/admin/timeslots\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/timeslots\"] });\n      setIsCreateDialogOpen(false);\n      form.reset();\n      toast({\n        title: \"Time Slot Created\",\n        description: \"The time slot has been created successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateTimeSlotMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: number; data: TimeSlotFormData }) => {\n      return await apiRequest(\"PATCH\", `/api/admin/timeslots/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/timeslots\"] });\n      setIsEditDialogOpen(false);\n      setSelectedTimeSlot(null);\n      form.reset();\n      toast({\n        title: \"Time Slot Updated\",\n        description: \"The time slot has been updated successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTimeSlotMutation = useMutation({\n    mutationFn: async (id: number) => {\n      return await apiRequest(\"DELETE\", `/api/admin/timeslots/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/timeslots\"] });\n      toast({\n        title: \"Time Slot Deleted\",\n        description: \"The time slot has been deleted successfully.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (timeSlot: TimeSlotMaster) => {\n    setSelectedTimeSlot(timeSlot);\n    form.reset({\n      slotName: timeSlot.slotName,\n      startTime: timeSlot.startTime,\n      endTime: timeSlot.endTime,\n      isPeakHour: timeSlot.isPeakHour,\n      slotOrder: timeSlot.slotOrder || 1,\n      isActive: timeSlot.isActive,\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDelete = async (timeSlot: TimeSlotMaster) => {\n    if (window.confirm(`Are you sure you want to delete \"${timeSlot.slotName}\"? This action cannot be undone.`)) {\n      deleteTimeSlotMutation.mutate(timeSlot.id);\n    }\n  };\n\n  const handleToggleActive = (timeSlot: TimeSlotMaster) => {\n    updateTimeSlotMutation.mutate({\n      id: timeSlot.id,\n      data: {\n        slotName: timeSlot.slotName,\n        startTime: timeSlot.startTime,\n        endTime: timeSlot.endTime,\n        isPeakHour: timeSlot.isPeakHour,\n        slotOrder: timeSlot.slotOrder,\n        isActive: !timeSlot.isActive,\n      }\n    });\n  };\n\n  const handleTogglePeakHour = (timeSlot: TimeSlotMaster) => {\n    updateTimeSlotMutation.mutate({\n      id: timeSlot.id,\n      data: {\n        slotName: timeSlot.slotName,\n        startTime: timeSlot.startTime,\n        endTime: timeSlot.endTime,\n        isPeakHour: !timeSlot.isPeakHour,\n        slotOrder: timeSlot.slotOrder,\n        isActive: timeSlot.isActive,\n      }\n    });\n  };\n\n  const onSubmit = (data: TimeSlotFormData) => {\n    // Validate that start time is before end time\n    const start = new Date(`2000-01-01T${data.startTime}:00`);\n    const end = new Date(`2000-01-01T${data.endTime}:00`);\n    \n    if (start >= end) {\n      toast({\n        title: \"Invalid Time Range\",\n        description: \"Start time must be before end time.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (selectedTimeSlot) {\n      updateTimeSlotMutation.mutate({ id: selectedTimeSlot.id, data });\n    } else {\n      createTimeSlotMutation.mutate(data);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-screen bg-gray-50\">\n        <AdminSidebar />\n        <div className=\"flex-1 lg:ml-64 flex items-center justify-center\">\n          <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  const TimeSlotForm = () => (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"slotName\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Slot Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"e.g., Morning Session\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"startTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Start Time</FormLabel>\n                <FormControl>\n                  <Input type=\"time\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n          \n          <FormField\n            control={form.control}\n            name=\"endTime\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>End Time</FormLabel>\n                <FormControl>\n                  <Input type=\"time\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"slotOrder\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Slot Order</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  step=\"1\" \n                  placeholder=\"Display order (1, 2, 3...)\" \n                  {...field}\n                  onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"isPeakHour\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">Peak Hour</FormLabel>\n                <p className=\"text-sm text-muted-foreground\">\n                  Mark this slot as a peak hour for pricing\n                </p>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"isActive\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n              <div className=\"space-y-0.5\">\n                <FormLabel className=\"text-base\">Active</FormLabel>\n                <p className=\"text-sm text-muted-foreground\">\n                  Enable this time slot for bookings\n                </p>\n              </div>\n              <FormControl>\n                <Switch\n                  checked={field.value}\n                  onCheckedChange={field.onChange}\n                />\n              </FormControl>\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={() => {\n              setIsCreateDialogOpen(false);\n              setIsEditDialogOpen(false);\n              setSelectedTimeSlot(null);\n              form.reset();\n            }}\n          >\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={createTimeSlotMutation.isPending || updateTimeSlotMutation.isPending}>\n            {selectedTimeSlot ? \"Update\" : \"Create\"} Time Slot\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Time Slots Management</h1>\n              <p className=\"text-gray-600\">Manage available booking time slots</p>\n            </div>\n            \n            <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>\n              <DialogTrigger asChild>\n                <Button onClick={() => {\n                  form.reset({\n                    slotName: \"\",\n                    startTime: \"\",\n                    endTime: \"\",\n                    isPeakHour: false,\n                    slotOrder: 1,\n                    isActive: true,\n                  });\n                  setSelectedTimeSlot(null);\n                }}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Time Slot\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Add New Time Slot</DialogTitle>\n                  <DialogDescription>\n                    Create a new time slot for ground bookings.\n                  </DialogDescription>\n                </DialogHeader>\n                <TimeSlotForm />\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          {timeSlotsLoading ? (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {[...Array(6)].map((_, i) => (\n                <Card key={i} className=\"animate-pulse\">\n                  <CardHeader>\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"h-20 bg-gray-200 rounded\"></div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {timeSlots?.map((timeSlot) => (\n                <Card key={timeSlot.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n                    <div className=\"flex items-center gap-3\">\n                      <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                        <Clock className=\"h-5 w-5 text-primary\" />\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">\n                          {timeSlot.slotName}\n                        </CardTitle>\n                        <CardDescription>\n                          {timeSlot.startTime} - {timeSlot.endTime}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Badge variant={timeSlot.isActive ? \"default\" : \"secondary\"}>\n                        {timeSlot.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                      {timeSlot.isPeakHour && (\n                        <Badge variant=\"destructive\">Peak</Badge>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <div className=\"text-sm text-gray-600\">\n                        <strong>Order:</strong> {timeSlot.slotOrder || 'N/A'}\n                      </div>\n                      \n                      <div className=\"flex gap-2 mt-4\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEdit(timeSlot)}\n                          className=\"flex-1\"\n                        >\n                          <Pencil className=\"h-3 w-3 mr-1\" />\n                          Edit\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleTogglePeakHour(timeSlot)}\n                          className={timeSlot.isPeakHour ? \"text-red-600 hover:text-red-700 hover:bg-red-50\" : \"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"}\n                          title=\"Toggle Peak Hour\"\n                        >\n                          {timeSlot.isPeakHour ? \"🔥\" : \"⭐\"}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleToggleActive(timeSlot)}\n                          className={timeSlot.isActive ? \"text-orange-600 hover:text-orange-700 hover:bg-orange-50\" : \"text-green-600 hover:text-green-700 hover:bg-green-50\"}\n                        >\n                          {timeSlot.isActive ? <PauseCircle className=\"h-3 w-3\" /> : <PlayCircle className=\"h-3 w-3\" />}\n                        </Button>\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleDelete(timeSlot)}\n                          className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                        >\n                          <Trash2 className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n\n          {timeSlots && timeSlots.length === 0 && (\n            <Card className=\"text-center py-12\">\n              <CardContent>\n                <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No time slots found</h3>\n                <p className=\"text-gray-600 mb-6\">Get started by adding your first time slot.</p>\n                <Button onClick={() => setIsCreateDialogOpen(true)}>\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add First Time Slot\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      {/* Edit Dialog */}\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Edit Time Slot</DialogTitle>\n            <DialogDescription>\n              Update the time slot information.\n            </DialogDescription>\n          </DialogHeader>\n          <TimeSlotForm />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":19680},"BOOKING_QUEUE_SYSTEM.md":{"content":"# Booking Queue System - Waiting List Implementation\n\n## System Overview\nAdvanced waiting list system for handling conflicting bookings with automatic notifications and priority management.\n\n## Core Features\n\n### **1. Conflict Detection**\n- Automatic detection of slot conflicts (same sport, ground, date, time)\n- Smart capacity checking for per-person vs full-ground bookings\n- Real-time availability validation\n\n### **2. Queue Management**\n- **Priority System**: First-come-first-served (priority 1 = highest)\n- **Status Tracking**: waiting → offered → converted/expired\n- **Auto-Expiry**: Configurable timeout for queue offers\n- **Conflict Linking**: Track which booking blocks the queue request\n\n### **3. Automatic Notifications**\n- **Queue Entry**: \"Added to waiting list for [Facility] on [Date]\"\n- **Slot Available**: \"Booking slot now available! Book within 24 hours\"\n- **Queue Expired**: \"Waiting list request expired for [Facility]\"\n- **Position Updates**: \"Moved to position #2 in waiting list\"\n\n### **4. Admin Controls**\n- **Queue Dashboard**: View all waiting requests\n- **Manual Offers**: Admin can offer slots to queue users\n- **Priority Adjustment**: Change queue order if needed\n- **Batch Processing**: Handle multiple cancellations efficiently\n\n## Database Schema\n\n### **booking_queue Table**\n```sql\n- userId: Who's waiting\n- sportId, groundId: Which facility\n- bookingDate, startTime, endTime: When they want it\n- participantCount: How many people\n- requestedAmount: What they'll pay\n- priority: Queue position (1 = first)\n- status: waiting/offered/expired/converted\n- conflictingBookingId: Which booking blocks them\n- expiresAt: When offer expires\n```\n\n### **Enhanced notifications Table**\n```sql\n- relatedQueueId: Link to queue request\n- type: queue_update for queue notifications\n```\n\n## User Experience Flow\n\n### **For Users Requesting Busy Slots:**\n1. **Try to Book** → Slot unavailable\n2. **Join Queue** → \"Added to waiting list (Position #3)\"\n3. **Get Updates** → \"Moved to position #2\"\n4. **Slot Opens** → \"Slot available! Book now\"\n5. **Quick Book** → 24-hour window to complete booking\n\n### **For Users Canceling:**\n1. **Cancel Booking** → System detects queue\n2. **Auto-Process** → Next user in queue gets notification\n3. **Admin Review** → Optional approval for queue offers\n\n## Business Benefits\n- **Higher Revenue**: Capture demand for busy slots\n- **Better Experience**: Users don't lose out completely\n- **Demand Insights**: See which slots are most wanted\n- **Automatic Management**: Minimal admin overhead\n\n## Implementation Priority\n1. ✅ Database schema (booking_queue table)\n2. 🔄 Conflict detection logic\n3. 🔄 Queue management methods\n4. 🔄 Notification system integration\n5. 🔄 Admin dashboard integration\n6. 🔄 User queue interface","size_bytes":2806},"BOOKING_STATUS_LOGIC.md":{"content":"# Booking Status Logic Definition\n\n## Pending Bookings Definition\n\nA booking is considered \"PENDING\" when it meets this criteria:\n\n### **Payment Status = \"pending\" OR \"partial\"**\n- Confirmed bookings with zero payment (`paidAmount = 0`)\n- Confirmed bookings with partial payment (`paidAmount < totalAmount`)\n- **Business Logic**: Customer needs to complete payment\n\n### **No Approval Delays:**\n- All new bookings are automatically confirmed (`status = \"confirmed\"`)\n- Users can pay immediately without waiting for admin approval\n- Admin reviews bookings retroactively for quality control\n\n### 3. **Future Confirmed Bookings with Payment Issues**\n- `status = \"confirmed\"` AND `bookingDate >= today` AND `paymentStatus != \"completed\"`\n- **Business Logic**: Upcoming bookings that still need payment resolution\n\n## Clear Status Transitions\n\n### Booking Status Flow:\n```\npending → confirmed → completed (or cancelled at any point)\n```\n\n### Payment Status Flow:\n```\npending → partial → completed (or failed/refunded)\n```\n\n## Pending Bookings Query Logic:\n\n```sql\nSELECT * FROM bookings WHERE (\n  -- Only confirmed bookings with outstanding payments (instant booking flow)\n  status = 'confirmed' AND paymentStatus IN ('pending', 'partial')\n);\n```\n\n## Admin Dashboard \"Pending\" Count:\nShould show total count of bookings requiring attention (approval OR payment collection)\n\n## User \"Pending Payments\" Page:\nShould show only confirmed bookings with outstanding payments (`paymentStatus IN ('pending', 'partial')`)\n\n## Business Rules (Instant Booking):\n1. **New Booking**: `status = 'confirmed'`, `paymentStatus = 'pending'` (instant confirmation)\n2. **Payment Received**: `paymentStatus` updates based on amount paid\n3. **Service Delivered**: `status = 'completed'` (only if fully paid)\n4. **Admin Review**: Retroactive oversight, can cancel if needed","size_bytes":1852},"CODEBASE_GUIDE.md":{"content":"# Sports Facility Booking System - Codebase Guide\n\n## Overview\nThis comprehensive guide documents all files in the Aryen Recreation Centre booking system, their purposes, and key implementation details.\n\n---\n\n## 📁 Root Directory Files\n\n### Package Management\n- **`package.json`** - Node.js dependencies and scripts for both frontend/backend\n- **`package-lock.json`** - Locked dependency versions for reproducible builds\n- **`tsconfig.json`** - TypeScript configuration for the entire project\n\n### Build & Development Tools\n- **`vite.config.ts`** - Vite bundler configuration with React and path aliases\n- **`postcss.config.js`** - PostCSS configuration for Tailwind CSS processing\n- **`tailwind.config.ts`** - Tailwind CSS configuration with custom themes and colors\n- **`components.json`** - shadcn/ui component library configuration\n- **`drizzle.config.ts`** - Drizzle ORM configuration for database operations\n\n### Environment & Deployment\n- **`.env.example`** - Template for environment variables (DATABASE_URL, SESSION_SECRET)\n- **`.replit`** - Replit platform configuration for deployment\n- **`.gitignore`** - Git ignore patterns for node_modules, build files, etc.\n\n---\n\n## 📁 Server Directory (`/server`)\n\n### Core Server Files\n- **`index.ts`** - Main Express server entry point\n  - Configures Express app with middleware\n  - Sets up Replit authentication \n  - Integrates Vite development server\n  - Starts HTTP server on port 5000\n\n- **`routes.ts`** - Complete API routing system (1500+ lines)\n  - Authentication routes (`/api/login`, `/api/logout`, `/api/signup`)\n  - User management (`/api/users`, `/api/admin/users`)\n  - Sports master data (`/api/sports`, `/api/admin/sports`)\n  - Grounds management (`/api/grounds`, `/api/admin/grounds`) \n  - Plans and pricing (`/api/plans`, `/api/admin/plans`)\n  - Booking system (`/api/bookings`, `/api/admin/bookings`)\n  - Payment processing (`/api/payments`, `/api/admin/payments`)\n  - Notification system (`/api/notifications`)\n  - Queue management (`/api/queue`)\n  - Analytics and reports (`/api/admin/reports`)\n\n- **`storage.ts`** - Database abstraction layer (1000+ lines)\n  - IStorage interface defining all database operations\n  - DatabaseStorage class implementing PostgreSQL operations\n  - Complete CRUD methods for all entities\n  - Complex queries with joins and aggregations\n  - User statistics and analytics calculations\n\n### Authentication & Database\n- **`replitAuth.ts`** - Replit OpenID Connect authentication setup\n  - OIDC strategy configuration\n  - User profile synchronization\n  - Session management integration\n\n- **`db.ts`** - Database connection configuration\n  - Drizzle ORM setup with PostgreSQL\n  - Connection to Neon database via DATABASE_URL\n\n- **`vite.ts`** - Development server integration\n  - Vite middleware setup for hot reloading\n  - Static file serving for production builds\n  - Frontend/backend unified serving\n\n### Utilities\n- **`seed.ts`** - Database seeding with sample data\n  - Demo users (client and admin accounts)\n  - Sports, grounds, and pricing plans\n\n### Payment & Receipt System\n- **`receipt.ts`** - Comprehensive receipt generation system\n  - ReceiptGenerator class for HTML and PDF receipt creation\n  - Detailed payment breakdown calculations\n  - Professional receipt templates with branding\n  - Financial transparency with discount and balance tracking\n\n- **`notifications.ts`** - Notification and receipt delivery system\n  - Email receipt delivery via SendGrid integration\n  - SMS notifications for payment confirmations\n  - Automated receipt generation and sending\n  - Sample bookings and payments\n  - Time slots and facility configurations\n\n---\n\n## 📁 Client Directory (`/client`)\n\n### Entry Points\n- **`index.html`** - Main HTML template with React app mount point\n- **`src/main.tsx`** - React application bootstrap\n  - Query client setup for TanStack Query\n  - Tooltip provider configuration\n  - Root app component mounting\n\n- **`src/App.tsx`** - Main application router\n  - Wouter-based routing configuration\n  - Authentication-based route protection\n  - Public routes (landing, login, facilities)\n  - Protected user routes (dashboard, bookings, payments)\n  - Admin-only routes (management panels)\n\n### Styling\n- **`src/index.css`** - Global styles and Tailwind CSS imports\n  - CSS custom properties for theming\n  - Global component overrides\n  - Dark mode support variables\n\n---\n\n## 📁 Client Pages (`/client/src/pages`)\n\n### Public Pages\n- **`landing.tsx`** - Homepage for unauthenticated users\n  - Hero section with facility showcase\n  - Featured facilities display\n  - Call-to-action buttons for booking\n\n- **`login.tsx`** - Enhanced authentication interface\n  - Separate client and admin login forms\n  - User registration with validation\n  - Forgot password functionality\n  - Password visibility toggles\n  - Demo credentials display\n\n- **`facilities.tsx`** - Facility browsing and filtering\n  - Grid display of available sports facilities\n  - Search and filter functionality\n  - Capacity and availability indicators\n  - Navigation to booking interface\n\n### User Pages\n- **`home.tsx`** - Main dashboard for authenticated users\n  - Recent bookings overview\n  - Quick booking shortcuts\n  - Notification center\n  - Popular facilities display\n\n- **`booking.tsx`** - Facility booking interface\n  - Calendar-based date selection\n  - Time slot availability display\n  - Participant count selection\n  - Conflict detection and queue options\n\n- **`profile.tsx`** - User account management\n  - Profile information editing\n  - Booking history display\n  - Payment records\n  - Notification preferences\n\n### Payment System\n- **`Payment.tsx`** - Payment processing interface\n- **`PaymentPage.tsx`** - Dedicated payment completion page\n- **`PendingPayments.tsx`** - Outstanding payment management\n\n### Enhanced Features\n- **`EnhancedBooking.tsx`** - Advanced booking interface with queue integration\n- **`BookingQueue.tsx`** - Waiting list management for users\n- **`user/Dashboard.tsx`** - Personal dashboard with notifications and booking management\n\n### Admin Pages (`/client/src/pages/admin`)\n- **`dashboard.tsx`** - Administrative overview with statistics\n- **`sports.tsx`** - Sports master data management\n- **`grounds.tsx`** - Physical facility management  \n- **`plans.tsx`** - Pricing plan configuration\n- **`timeslots.tsx`** - Time slot management\n- **`facilities.tsx`** - Legacy facility management (deprecated)\n- **`bookings.tsx`** - Booking oversight and management\n- **`users.tsx`** - User account administration\n- **`payments.tsx`** - Payment collection and tracking\n- **`reports.tsx`** - Analytics dashboard with export capabilities\n- **`NotificationManagement.tsx`** - System notification controls\n\n### Utility Pages\n- **`not-found.tsx`** - 404 error page\n- **`NotFound.tsx`** - Alternative 404 implementation\n\n---\n\n## 📁 Client Components (`/client/src/components`)\n\n### UI Components (`/client/src/components/ui`)\nComplete shadcn/ui component library (50+ components):\n- **Form controls**: `button.tsx`, `input.tsx`, `label.tsx`, `textarea.tsx`\n- **Layout**: `card.tsx`, `sheet.tsx`, `sidebar.tsx`, `separator.tsx`\n- **Navigation**: `navigation-menu.tsx`, `menubar.tsx`, `breadcrumb.tsx`\n- **Data display**: `table.tsx`, `badge.tsx`, `avatar.tsx`, `calendar.tsx`\n- **Feedback**: `toast.tsx`, `alert.tsx`, `progress.tsx`, `skeleton.tsx`\n- **Overlays**: `dialog.tsx`, `popover.tsx`, `tooltip.tsx`, `drawer.tsx`\n- **Advanced**: `carousel.tsx`, `chart.tsx`, `command.tsx`, `tabs.tsx`\n\n### Custom Components\n- **`AdminSidebar.tsx`** - Administrative navigation sidebar\n  - Role-based menu items\n  - Active route highlighting\n  - Collapsible sections\n\n- **`BookingModal.tsx`** - Booking creation dialog\n  - Form validation and submission\n  - Conflict detection\n  - Queue integration options\n\n- **`FacilityCard.tsx`** - Facility display component\n  - Image and description rendering\n  - Availability status indicators\n  - Quick booking actions\n\n- **`HeroSection.tsx`** - Landing page hero component\n  - Background imagery\n  - Call-to-action elements\n  - Responsive design\n\n- **`Navbar.tsx`** - Main navigation component\n  - Authentication-aware menu items\n  - User profile dropdown\n  - Mobile-responsive design\n\n- **`NotificationCenter.tsx`** - Notification management\n  - Real-time notification display\n  - Mark as read functionality\n  - Notification filtering\n\n- **`PaymentForm.tsx`** - Payment processing form\n  - Multiple payment method support\n  - Validation and error handling\n  - Stripe integration ready\n\n- **`ReceiptModal.tsx`** - Comprehensive receipt display system\n  - Detailed payment breakdown with booking-specific data\n  - Professional receipt formatting with company branding\n  - PDF download and print functionality\n  - Complete financial transparency including discounts and balances\n\n- **`PaymentHistoryModal.tsx`** - Payment history management interface\n  - Complete payment tracking for individual bookings\n  - Comprehensive booking summary with financial totals\n  - Individual receipt access for all past payments\n  - Payment status tracking and transaction details\n  - Seamless integration with receipt generation system\n\n- **`StatsCard.tsx`** - Dashboard statistics display\n  - Metric visualization\n  - Icon and color theming\n  - Responsive layout\n\n---\n\n## 📁 Client Hooks (`/client/src/hooks`)\n\n- **`useAuth.ts`** - Authentication state management\n  - User session tracking\n  - Login/logout functionality\n  - Role-based access control\n\n- **`use-mobile.tsx`** - Responsive design utilities\n  - Mobile device detection\n  - Breakpoint management\n\n- **`use-toast.ts`** - Toast notification system\n  - Success/error message display\n  - Customizable styling\n  - Auto-dismiss functionality\n\n---\n\n## 📁 Client Libraries (`/client/src/lib`)\n\n- **`utils.ts`** - Utility functions\n  - CSS class name merging\n  - Common helper functions\n  - Type utilities\n\n- **`queryClient.ts`** - TanStack Query configuration\n  - API request handling\n  - Cache management\n  - Error handling defaults\n\n- **`authUtils.ts`** - Authentication utilities\n  - Token management\n  - User role checking\n  - Permission validation\n\n- **`exportUtils.ts`** - Data export functionality\n  - PDF generation utilities\n  - Excel export helpers\n  - Print formatting\n\n---\n\n## 📁 Shared Directory (`/shared`)\n\n- **`schema.ts`** - Database schema definitions (1000+ lines)\n  - Drizzle ORM table definitions\n  - TypeScript type exports\n  - Zod validation schemas\n  - Complete data model for:\n    - Users and authentication\n    - Sports master data\n    - Grounds and facilities\n    - Pricing plans\n    - Booking system\n    - Payment tracking\n    - Notification system\n    - Queue management\n    - Time slots and scheduling\n\n---\n\n## 📁 Documentation Files\n\n### Project Documentation\n- **`replit.md`** - Comprehensive project documentation\n  - Architecture overview\n  - System status and recent changes\n  - User preferences and development guidelines\n  - Feature roadmap and technical decisions\n\n### Technical Guides\n- **`BOOKING_QUEUE_SYSTEM.md`** - Queue system implementation\n- **`BOOKING_STATUS_LOGIC.md`** - Booking lifecycle management\n- **`INSTANT_BOOKING_FLOW.md`** - Immediate booking confirmation\n- **`PAYMENT_INTEGRATION.md`** - Payment system architecture\n- **`STRIPE_SETUP_GUIDE.md`** - Payment processor setup\n- **`LOCAL_SETUP.md`** - Development environment setup\n\n### Assets\n- **`attached_assets/`** - Project images and documentation\n- **`cookies.txt`** - Session management reference\n\n---\n\n## 🔧 System Architecture Summary\n\n### Frontend Stack\n- **React 18** with TypeScript for type safety\n- **Wouter** for lightweight client-side routing\n- **TanStack Query** for server state management\n- **Tailwind CSS** with shadcn/ui for consistent design\n- **Vite** for fast development and optimized builds\n\n### Backend Stack\n- **Node.js** with Express.js server framework\n- **TypeScript** throughout for type consistency\n- **Drizzle ORM** with PostgreSQL for data persistence\n- **Replit Auth** with OpenID Connect for authentication\n- **Session-based** authentication with PostgreSQL storage\n\n### Database Design\n- **Master table architecture** (sports_master, grounds_master, plans_master)\n- **Booking system** with slot-based scheduling\n- **Payment tracking** with multiple method support\n- **Notification system** for user communications\n- **Queue management** for conflict resolution\n\n### Key Features\n- **Instant booking confirmation** without approval delays\n- **Capacity-aware scheduling** with overbooking prevention\n- **Real-time availability** with color-coded indicators\n- **Comprehensive admin panel** with analytics and reports\n- **Export capabilities** (PDF, Excel, Print)\n- **Mobile-responsive design** for all devices\n- **Role-based access control** (client, admin, manager)\n\n---\n\n## 📊 File Statistics\n\n- **Total Files**: ~150+ source files\n- **Lines of Code**: ~15,000+ lines\n- **Main Technologies**: React, TypeScript, Express, PostgreSQL, Tailwind CSS\n- **Component Library**: 50+ UI components\n- **API Endpoints**: 60+ REST endpoints\n- **Database Tables**: 15+ normalized tables\n- **Admin Features**: 8 management panels\n- **User Features**: 10+ customer-facing pages\n\nThis codebase represents a production-ready sports facility booking system with comprehensive features for both users and administrators, built with modern web technologies and best practices.","size_bytes":13388},"INSTANT_BOOKING_FLOW.md":{"content":"# Instant Booking Flow - No Approval Delays\n\n## New Booking Flow (Fast & User-Friendly)\n\n### **Instant Confirmation System:**\n1. **User Books Facility** → `status = \"confirmed\"`, `paymentStatus = \"pending\"`\n2. **Booking Immediately Confirmed** → No waiting for admin approval\n3. **User Can Pay Immediately** → Direct payment flow\n4. **Admin Reviews Later** → Optional oversight, no delays\n\n### **Updated Pending Logic:**\n- **\"Pending\" Bookings**: Only confirmed bookings with outstanding payments\n- **Admin Dashboard**: Shows payment collection tasks, not approval bottlenecks\n- **User Experience**: Instant booking confirmation + immediate payment option\n\n### **Business Benefits:**\n✅ **No Booking Delays** - Users get instant confirmation\n✅ **Better Cash Flow** - Immediate payment collection\n✅ **Reduced Admin Workload** - Review exceptions only\n✅ **Higher Conversion** - No approval friction\n\n### **Admin Oversight Options:**\n- **Payment Monitoring**: Track outstanding payments\n- **Booking Review**: Retroactive quality control\n- **Exception Handling**: Cancel problematic bookings if needed\n- **Analytics**: Monitor booking patterns\n\n## Implementation Changes:\n1. **Schema Update**: Default booking status = \"confirmed\" \n2. **Pending Logic**: Only payment-related pending bookings\n3. **User Flow**: Book → Pay → Use (no approval wait)\n4. **Admin Flow**: Monitor → Collect → Review\n\nThis eliminates booking delays while maintaining financial oversight.","size_bytes":1481},"LOCAL_SETUP.md":{"content":"# Local Development Setup Guide\n\nThis guide will help you set up the Aryen Recreation Centre booking system for local development, including the complete payment processing, receipt generation, and payment history features.\n\n## Prerequisites\n\nBefore starting, ensure you have the following installed on your system:\n\n- **Node.js** (version 18 or higher)\n- **npm** (comes with Node.js)\n- **PostgreSQL** (version 12 or higher)\n- **Git** (to clone the repository)\n\n## Key Features Included\n\n- **Complete Booking System**: Step-by-step facility booking with real-time availability\n- **Payment Processing**: Multiple payment methods with partial payment support\n- **Receipt Generation**: Professional PDF and HTML receipts with detailed financial breakdowns\n- **Payment History**: Complete payment tracking with individual receipt access for all bookings\n- **Admin Dashboard**: Comprehensive management interface with analytics and financial reporting\n- **Real-time Notifications**: Booking reminders and payment confirmations\n\n## Step 1: Download and Setup Project\n\n1. **Download the project files** to your local machine\n2. **Open terminal/command prompt** and navigate to the project directory:\n   ```bash\n   cd path/to/your/project\n   ```\n\n3. **Install dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Step 2: Database Setup\n\n### Option A: Local PostgreSQL Database\n\n1. **Install PostgreSQL** if not already installed:\n   - **Windows**: Download from https://www.postgresql.org/download/windows/\n   - **macOS**: `brew install postgresql` (if you have Homebrew)\n   - **Linux**: `sudo apt-get install postgresql postgresql-contrib`\n\n2. **Start PostgreSQL service**:\n   - **Windows**: Use pgAdmin or start via Services\n   - **macOS**: `brew services start postgresql`\n   - **Linux**: `sudo systemctl start postgresql`\n\n3. **Create a database**:\n   ```bash\n   # Connect to PostgreSQL as superuser\n   sudo -u postgres psql\n   \n   # Create database and user\n   CREATE DATABASE aryen_sports_booking;\n   CREATE USER your_username WITH PASSWORD 'your_password';\n   GRANT ALL PRIVILEGES ON DATABASE aryen_sports_booking TO your_username;\n   \\q\n   ```\n\n### Option B: Use Neon Database (Cloud PostgreSQL)\n\n1. **Sign up at** https://neon.tech\n2. **Create a new project** and database\n3. **Copy the connection string** from the dashboard\n\n## Step 3: Environment Configuration\n\n1. **Create a `.env` file** in the project root:\n   ```bash\n   touch .env\n   ```\n\n2. **Add the following environment variables**:\n   ```env\n   # Database Configuration\n   DATABASE_URL=postgresql://your_username:your_password@localhost:5432/aryen_sports_booking\n   \n   # Session Configuration\n   SESSION_SECRET=your-super-secret-session-key-here\n   \n   # Development Environment\n   NODE_ENV=development\n   \n   # Replit Auth Configuration (for local development)\n   REPLIT_DB_URL=memory://\n   \n   # Optional: Receipt Email Delivery (for production)\n   # SENDGRID_API_KEY=your_sendgrid_api_key_here\n   \n   # Optional: Stripe Payment Processing (for production)\n   # STRIPE_SECRET_KEY=sk_test_your_stripe_secret_key\n   # VITE_STRIPE_PUBLIC_KEY=pk_test_your_stripe_public_key\n   ```\n\n   **Important Notes**:\n   - Replace `your_username`, `your_password` with your actual PostgreSQL credentials\n   - If using Neon, replace the entire `DATABASE_URL` with your Neon connection string\n   - Generate a strong, random `SESSION_SECRET` (at least 32 characters)\n\n## Step 4: Database Schema Setup\n\n1. **Push the database schema**:\n   ```bash\n   npm run db:push\n   ```\n\n   This will create all the necessary tables in your database.\n\n2. **Verify the setup** by checking if tables were created:\n   ```bash\n   # Connect to your database\n   psql -d aryen_sports_booking -U your_username\n   \n   # List all tables\n   \\dt\n   \n   # You should see tables like: sports_master, grounds_master, plans_master, bookings, etc.\n   \\q\n   ```\n\n## Step 5: Seed Database with Sample Data\n\n1. **Create a seed script** to populate initial data:\n   ```bash\n   # Connect to database and insert sample data\n   psql -d aryen_sports_booking -U your_username\n   ```\n\n2. **Insert sample sports**:\n   ```sql\n   INSERT INTO sports_master (name, category, description, booking_type, per_person_booking, full_ground_booking, max_advance_days, is_active) VALUES\n   ('Badminton', 'Racquet Sports', 'Indoor badminton courts', 'both', true, true, 30, true),\n   ('Basketball', 'Team Sports', 'Full court basketball', 'full-ground', false, true, 15, true),\n   ('Tennis', 'Racquet Sports', 'Outdoor tennis courts', 'both', true, true, 30, true);\n   ```\n\n3. **Insert sample grounds**:\n   ```sql\n   INSERT INTO grounds_master (sport_id, name, ground_code, location, description, max_capacity, per_person_booking, full_ground_booking, hourly_rate, monthly_rate, yearly_rate, is_active) VALUES\n   (1, 'Badminton Court 1', 'BAD001', 'Indoor Hall A', 'Professional badminton court with wooden flooring', 10, true, true, 200.00, 5000.00, 50000.00, true),\n   (2, 'Basketball Court', 'BAS001', 'Outdoor Court 1', 'Full-size basketball court', 10, false, true, 500.00, 12000.00, 120000.00, true),\n   (3, 'Tennis Court 1', 'TEN001', 'Outdoor Court 2', 'Clay tennis court', 4, true, true, 300.00, 8000.00, 80000.00, true);\n   ```\n\n4. **Insert sample plans**:\n   ```sql\n   INSERT INTO plans_master (ground_id, plan_type, duration_hours, duration_days, price, peak_price, description, is_active) VALUES\n   (1, 'hourly', 1, NULL, 200.00, 250.00, 'Hourly badminton booking', true),\n   (1, 'monthly', NULL, 30, 5000.00, NULL, 'Monthly badminton membership', true),\n   (2, 'hourly', 2, NULL, 500.00, 600.00, '2-hour basketball court booking', true),\n   (3, 'hourly', 1, NULL, 300.00, 350.00, 'Hourly tennis booking', true);\n   ```\n\n5. **Create time slots**:\n   ```sql\n   INSERT INTO time_slots (start_time, end_time, duration, is_peak_hour, day_types, is_active) VALUES\n   ('06:00:00', '07:00:00', 60, false, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('07:00:00', '08:00:00', 60, false, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('08:00:00', '09:00:00', 60, true, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('09:00:00', '10:00:00', 60, true, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('10:00:00', '11:00:00', 60, true, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('18:00:00', '19:00:00', 60, true, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('19:00:00', '20:00:00', 60, true, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true),\n   ('20:00:00', '21:00:00', 60, false, '[\"monday\",\"tuesday\",\"wednesday\",\"thursday\",\"friday\",\"saturday\",\"sunday\"]', true);\n   ```\n\n6. **Exit the database**:\n   ```sql\n   \\q\n   ```\n\n## Step 6: Authentication Setup (Simplified)\n\nSince this was built for Replit's authentication system, for local development:\n\n1. **Create a demo user** in the database:\n   ```sql\n   INSERT INTO users (id, email, username, first_name, last_name, role, is_active) VALUES\n   ('demo-client-001', 'demo@example.com', 'democlient', 'Demo', 'User', 'client', true),\n   ('demo-admin-001', 'admin@example.com', 'demoadmin', 'Admin', 'User', 'admin', true);\n   ```\n\n2. **For local development**, you can modify the authentication to skip Replit auth or implement a simple login form.\n\n## Step 7: Start the Application\n\n1. **Start the development server**:\n   ```bash\n   npm run dev\n   ```\n\n2. **Access the application**:\n   - Frontend: http://localhost:5000\n   - Backend API: http://localhost:5000/api\n\n## Step 8: Verify Installation & Test Features\n\n### Basic Functionality Testing\n1. **Check if the homepage loads** with facilities\n2. **Test facility browsing** without authentication\n3. **Test booking flow** (should require login)\n4. **Check database connections** by viewing facilities and their availability\n\n### Payment & Receipt System Testing\n1. **Complete Booking Flow**:\n   - Navigate to a facility and click \"Book Now\"\n   - Complete the step-by-step booking process\n   - Proceed to payment page\n\n2. **Test Payment Processing**:\n   - Try different payment methods (Credit Card, UPI, Cash for admins)\n   - Test partial payments with custom amounts\n   - Verify discount application functionality\n\n3. **Receipt Generation Verification**:\n   - After payment, verify receipt modal appears with detailed breakdown\n   - Check PDF download functionality\n   - Test HTML receipt preview in new tab\n   - Verify all financial calculations are correct\n\n4. **Payment History Feature**:\n   - Click \"Payment History\" button on payment pages\n   - Verify all payments for a booking are listed\n   - Test individual receipt preview and download for past payments\n   - Check booking summary with accurate totals\n\n### Admin Features Testing\n5. **Admin Dashboard Access**:\n   - Login as admin user (demo-admin-001)\n   - Navigate to admin dashboard\n   - Test payment management with filtering options\n   - Verify financial summaries and statistics\n\n6. **Admin Payment Management**:\n   - View pending payments with proper status indicators\n   - Test payment processing from admin interface\n   - Verify receipt generation works from admin workflows\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **Database connection errors**:\n   - Verify PostgreSQL is running\n   - Check DATABASE_URL in .env file\n   - Ensure database exists and user has permissions\n\n2. **Port already in use**:\n   ```bash\n   # Kill process using port 5000\n   lsof -ti:5000 | xargs kill -9\n   ```\n\n3. **Dependencies issues**:\n   ```bash\n   # Clear npm cache and reinstall\n   npm cache clean --force\n   rm -rf node_modules package-lock.json\n   npm install\n   ```\n\n4. **Database schema issues**:\n   ```bash\n   # Reset and recreate schema\n   npm run db:push\n   ```\n\n5. **Receipt generation errors**:\n   - Verify jsPDF dependency is installed correctly\n   - Check server logs for PDF generation errors\n   - Ensure all receipt data fields are properly populated\n\n6. **Payment history not loading**:\n   - Check database for payment records\n   - Verify API endpoint `/api/bookings/:id/payment-history` is accessible\n   - Check browser console for JavaScript errors\n\n7. **SendGrid email warnings** (normal for local development):\n   ```\n   SENDGRID_API_KEY not configured - email features will be disabled\n   ```\n   - This is expected in local development\n   - Receipt emails will use mock functionality\n   - For production, configure SENDGRID_API_KEY in environment\n\n## Development Commands\n\n- `npm run dev` - Start development server with hot reload\n- `npm run build` - Build for production deployment\n- `npm run db:push` - Push database schema changes to database\n- `npm run db:studio` - Open Drizzle Studio (database GUI)\n- `npm run db:generate` - Generate database migration files\n- `npm install <package>` - Install new dependencies\n\n## Project Structure\n\n```\n├── client/              # React frontend\n├── server/              # Express backend\n├── shared/              # Shared types and schemas\n├── .env                 # Environment variables\n├── package.json         # Dependencies and scripts\n├── drizzle.config.ts    # Database configuration\n└── LOCAL_SETUP.md       # This setup guide\n```\n\n## Key Features Overview\n\n### Payment Processing System\n- **Multiple Payment Methods**: Credit/Debit Cards, UPI, Cash (admin only)\n- **Partial Payments**: Allow custom payment amounts with balance tracking\n- **Discount System**: Apply discounts with proper financial calculations\n- **Payment Status Tracking**: Real-time status updates (pending, completed, partial, failed)\n\n### Receipt Generation System\n- **Professional Receipts**: Branded PDF and HTML receipts with company details\n- **Detailed Financial Breakdown**: Shows total booking amount, discounts, previous payments, current payment, and remaining balance\n- **Booking-Specific Data**: Each receipt contains complete booking context and payment history\n- **Multi-Format Support**: PDF download, HTML preview, and print functionality\n\n### Payment History Feature\n- **Complete Payment Tracking**: View all payments made for any booking\n- **Individual Receipt Access**: Preview and download receipts for any past payment\n- **Financial Transparency**: Real-time balance calculations and payment summaries\n- **Admin Oversight**: Comprehensive payment management for administrators\n\n### Admin Dashboard Features\n- **Payment Management**: Comprehensive interface for managing all payments\n- **Financial Reporting**: Revenue tracking, outstanding amounts, and payment analytics\n- **Booking Oversight**: Complete booking management with payment integration\n- **User Management**: Admin controls for user accounts and permissions\n\n## Production Configuration\n\n### Required Environment Variables for Full Functionality\n```env\n# Required for production\nDATABASE_URL=your_production_database_url\nSESSION_SECRET=your_strong_session_secret\n\n# Optional but recommended for production\nSENDGRID_API_KEY=your_sendgrid_api_key_for_email_receipts\nSTRIPE_SECRET_KEY=sk_live_your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=pk_live_your_stripe_public_key\n```\n\n### Production Deployment Checklist\n- [ ] Configure production database with proper security\n- [ ] Set strong session secrets and environment variables\n- [ ] Configure SendGrid for email receipt delivery\n- [ ] Set up Stripe for secure payment processing\n- [ ] Enable HTTPS for secure authentication and payments\n- [ ] Configure proper backup and monitoring systems\n\n## Next Steps\n\nAfter successful setup:\n1. **Test All Features**: Complete the verification steps above to ensure everything works\n2. **Customize Data**: Add your actual sports facilities, pricing plans, and time slots\n3. **Configure Authentication**: Set up proper user authentication for your environment\n4. **Payment Integration**: Configure Stripe for live payment processing\n5. **Email Setup**: Configure SendGrid for receipt email delivery\n6. **Deploy**: Deploy to your preferred hosting platform with production configuration\n\nFor any issues, check the console logs and database connection first. The system includes comprehensive error handling and logging to help diagnose problems.","size_bytes":14323},"PAYMENT_INTEGRATION.md":{"content":"# Secure Payment Integration Guide\n\n## Overview\n\nThis guide covers integrating secure payment processing for your sports facility booking system using Stripe, which provides bank-grade security and encryption for handling payments.\n\n## Why Stripe for Payment Security?\n\n✅ **PCI DSS Level 1 Compliant** - Highest level of payment security certification\n✅ **Bank-grade encryption** - All data encrypted with AES-256\n✅ **No sensitive data storage** - Payment details never touch your servers\n✅ **Fraud detection** - Built-in machine learning fraud prevention\n✅ **Global compliance** - Meets international banking regulations\n✅ **Real bank account support** - Direct bank transfers, not just cards\n\n## Security Architecture\n\n```\nUser Browser → Stripe Secure Form → Stripe Servers → Your Backend\n     ↓                                      ↓\nYour Database (No card data)     ←     Encrypted Tokens Only\n```\n\n**Key Security Features:**\n- Payment details are tokenized by Stripe before reaching your servers\n- Your database never stores actual card/bank account numbers\n- All communication uses HTTPS/TLS encryption\n- Stripe handles all PCI compliance requirements\n\n## Step 1: Stripe Account Setup\n\n### Create Stripe Account\n1. Go to https://stripe.com and create an account\n2. Complete business verification (required for bank payments)\n3. Enable your preferred payment methods:\n   - **Credit/Debit Cards** (Visa, Mastercard, etc.)\n   - **Bank Transfers** (ACH in US, SEPA in Europe)\n   - **Digital Wallets** (Apple Pay, Google Pay)\n   - **Local Payment Methods** (UPI, Net Banking for India)\n\n### Get API Keys\n1. Go to https://dashboard.stripe.com/apikeys\n2. Copy your keys:\n   - **Publishable Key** (starts with `pk_`) - Safe for frontend\n   - **Secret Key** (starts with `sk_`) - Keep secret on backend only\n\n## Step 2: Environment Configuration\n\nAdd to your `.env` file:\n```env\n# Stripe Configuration\nSTRIPE_SECRET_KEY=sk_test_your_secret_key_here\nVITE_STRIPE_PUBLIC_KEY=pk_test_your_publishable_key_here\n\n# For production, use live keys:\n# STRIPE_SECRET_KEY=sk_live_your_live_secret_key\n# VITE_STRIPE_PUBLIC_KEY=pk_live_your_live_publishable_key\n```\n\n## Step 3: Install Stripe Dependencies\n\n```bash\nnpm install stripe @stripe/stripe-js @stripe/react-stripe-js\n```\n\n## Step 4: Backend Payment Processing\n\n### Update server/routes.ts\n\nAdd secure payment intent creation:\n\n```typescript\nimport Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\n// Create payment intent for booking\napp.post(\"/api/create-payment-intent\", isAuthenticated, async (req, res) => {\n  try {\n    const { bookingId, amount, currency = \"inr\" } = req.body;\n    \n    // Validate booking belongs to user\n    const booking = await storage.getBookingDetails(bookingId);\n    if (!booking || booking.userId !== req.user.id) {\n      return res.status(403).json({ message: \"Unauthorized booking access\" });\n    }\n    \n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount * 100), // Convert to smallest currency unit\n      currency: currency,\n      metadata: {\n        bookingId: bookingId.toString(),\n        userId: req.user.id,\n        facilityName: booking.facilityName\n      },\n      payment_method_types: ['card', 'us_bank_account'], // Enable bank accounts\n    });\n    \n    res.json({ \n      clientSecret: paymentIntent.client_secret,\n      paymentIntentId: paymentIntent.id\n    });\n  } catch (error: any) {\n    console.error(\"Error creating payment intent:\", error);\n    res.status(500).json({ \n      message: \"Error creating payment intent: \" + error.message \n    });\n  }\n});\n\n// Webhook for payment confirmation (most secure)\napp.post(\"/api/stripe-webhook\", express.raw({type: 'application/json'}), async (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;\n  \n  let event;\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig!, webhookSecret!);\n  } catch (err: any) {\n    console.error('Webhook signature verification failed:', err.message);\n    return res.status(400).send(`Webhook Error: ${err.message}`);\n  }\n  \n  if (event.type === 'payment_intent.succeeded') {\n    const paymentIntent = event.data.object;\n    const bookingId = parseInt(paymentIntent.metadata.bookingId);\n    \n    // Update booking payment status\n    await storage.updateBookingPaymentStatus(bookingId, 'paid', paymentIntent.id);\n    console.log('Payment confirmed for booking:', bookingId);\n  }\n  \n  res.json({received: true});\n});\n```\n\n## Step 5: Frontend Payment Component\n\n### Create client/src/components/PaymentForm.tsx\n\n```typescript\nimport { useState } from 'react';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Button } from '@/components/ui/button';\nimport { useToast } from '@/hooks/use-toast';\n\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface PaymentFormProps {\n  bookingId: number;\n  amount: number;\n  onSuccess: () => void;\n}\n\nconst CheckoutForm = ({ bookingId, amount, onSuccess }: PaymentFormProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) return;\n    \n    setIsProcessing(true);\n    \n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/booking-success`,\n        },\n      });\n      \n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Payment Successful\",\n          description: \"Your booking has been confirmed!\",\n        });\n        onSuccess();\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full\"\n      >\n        {isProcessing ? 'Processing...' : `Pay ₹${amount}`}\n      </Button>\n    </form>\n  );\n};\n\nexport const PaymentForm = (props: PaymentFormProps) => {\n  const [clientSecret, setClientSecret] = useState<string>('');\n  \n  useEffect(() => {\n    // Create payment intent\n    fetch('/api/create-payment-intent', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        bookingId: props.bookingId,\n        amount: props.amount\n      })\n    })\n    .then(res => res.json())\n    .then(data => setClientSecret(data.clientSecret));\n  }, [props.bookingId, props.amount]);\n\n  if (!clientSecret) {\n    return <div>Loading payment form...</div>;\n  }\n\n  return (\n    <Elements stripe={stripePromise} options={{ clientSecret }}>\n      <CheckoutForm {...props} />\n    </Elements>\n  );\n};\n```\n\n## Step 6: Bank Account Integration\n\n### Enable ACH/Bank Transfers\n\n```typescript\n// In your payment intent creation\nconst paymentIntent = await stripe.paymentIntents.create({\n  amount: Math.round(amount * 100),\n  currency: \"usd\", // or \"inr\" for India\n  payment_method_types: [\n    'card',\n    'us_bank_account', // For US bank accounts\n    'sepa_debit',      // For European bank accounts\n    'bacs_debit'       // For UK bank accounts\n  ],\n  payment_method_options: {\n    us_bank_account: {\n      verification_method: 'instant' // Instant verification\n    }\n  }\n});\n```\n\n### Indian Banking Integration (UPI, Net Banking)\n\n```typescript\n// For Indian market\npayment_method_types: [\n  'card',\n  'upi',           // UPI payments\n  'netbanking',    // Net banking\n  'wallet'         // Digital wallets\n]\n```\n\n## Step 7: Security Best Practices\n\n### Backend Security\n```typescript\n// Rate limiting for payment endpoints\nimport rateLimit from 'express-rate-limit';\n\nconst paymentLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 payment attempts per windowMs\n  message: 'Too many payment attempts, please try again later'\n});\n\napp.use('/api/create-payment-intent', paymentLimiter);\n```\n\n### Environment Security\n```env\n# Production environment variables\nNODE_ENV=production\nSTRIPE_SECRET_KEY=sk_live_... # Live secret key\nSTRIPE_WEBHOOK_SECRET=whsec_... # Webhook signing secret\nDATABASE_URL=postgres://... # Encrypted connection\nSESSION_SECRET=... # Strong random secret\n```\n\n### HTTPS Enforcement\n```typescript\n// In production, enforce HTTPS\nif (process.env.NODE_ENV === 'production') {\n  app.use((req, res, next) => {\n    if (req.header('x-forwarded-proto') !== 'https') {\n      res.redirect(`https://${req.header('host')}${req.url}`);\n    } else {\n      next();\n    }\n  });\n}\n```\n\n## Step 8: Webhook Security\n\n### Setup Webhook Endpoint\n1. Go to Stripe Dashboard → Webhooks\n2. Add endpoint: `https://yourdomain.com/api/stripe-webhook`\n3. Select events: `payment_intent.succeeded`, `payment_intent.payment_failed`\n4. Copy webhook signing secret\n\n### Secure Webhook Verification\n```typescript\n// Verify webhook authenticity\nconst sig = req.headers['stripe-signature'];\nconst event = stripe.webhooks.constructEvent(req.body, sig, webhookSecret);\n```\n\n## Step 9: Testing\n\n### Test Mode\n- Use test API keys (pk_test_, sk_test_)\n- Test card numbers:\n  - Success: `4242 4242 4242 4242`\n  - Decline: `4000 0000 0000 0002`\n  - Bank account: Use Stripe's test routing numbers\n\n### Test Bank Accounts\n```\nRouting number: 110000000\nAccount number: 000123456789\nAccount type: Checking\n```\n\n## Step 10: Production Deployment\n\n### Before Going Live\n1. ✅ Complete Stripe account verification\n2. ✅ Switch to live API keys\n3. ✅ Enable HTTPS on your domain\n4. ✅ Set up webhook endpoints\n5. ✅ Test with small real transactions\n6. ✅ Configure proper error handling\n7. ✅ Set up monitoring and alerts\n\n### Production Checklist\n- [ ] Live Stripe keys configured\n- [ ] Webhook endpoints verified\n- [ ] HTTPS certificate installed\n- [ ] Database backups enabled\n- [ ] Error monitoring setup\n- [ ] Payment confirmation emails\n- [ ] Refund handling process\n- [ ] Customer support process\n\n## Security Guarantees\n\nWhen properly implemented, this setup provides:\n\n🔒 **End-to-end encryption** - All payment data encrypted in transit\n🔒 **No sensitive data storage** - Your servers never see card/bank details\n🔒 **PCI compliance** - Stripe handles all compliance requirements\n🔒 **Fraud protection** - Machine learning fraud detection\n🔒 **Webhook security** - Cryptographically signed webhooks\n🔒 **Regulatory compliance** - Meets banking regulations globally\n\n## Cost Structure\n\n**Stripe Fees:**\n- Cards: 2.9% + 30¢ per transaction\n- ACH/Bank transfers: 0.8% (capped at $5)\n- International: Additional 1.5%\n\n## Support and Monitoring\n\n- Stripe Dashboard for transaction monitoring\n- Real-time fraud alerts\n- Automatic retry for failed payments\n- Detailed analytics and reporting\n- 24/7 technical support\n\nThis implementation ensures your payment processing is as secure as major banks and e-commerce platforms while remaining compliant with all financial regulations.","size_bytes":11655},"STRIPE_SETUP_GUIDE.md":{"content":"# Quick Stripe Payment Setup Guide\n\n## When You're Ready to Enable Payments\n\n### Step 1: Get Stripe Account\n1. Create account at https://stripe.com\n2. Complete business verification\n3. Get your API keys from https://dashboard.stripe.com/apikeys\n\n### Step 2: Add Environment Variables\nAdd to your `.env` file:\n```env\nSTRIPE_SECRET_KEY=sk_test_your_secret_key_here\nVITE_STRIPE_PUBLIC_KEY=pk_test_your_publishable_key_here\nSTRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret_here\n```\n\n### Step 3: Install Stripe Dependencies\n```bash\nnpm install stripe @stripe/stripe-js @stripe/react-stripe-js\n```\n\n### Step 4: Uncomment Payment Code\n1. **Backend**: Uncomment Stripe import and routes in `server/routes.ts`\n2. **Frontend**: Uncomment PaymentForm component in `client/src/components/PaymentForm.tsx`\n3. **Pages**: Uncomment PaymentPage in `client/src/pages/PaymentPage.tsx`\n\n### Step 5: Add Payment Route\nAdd to `client/src/App.tsx`:\n```typescript\n<Route path=\"/payment/:bookingId\" component={PaymentPage} />\n```\n\n### Step 6: Test with Test Data\nUse these test card numbers:\n- **Success**: 4242 4242 4242 4242\n- **Decline**: 4000 0000 0000 0002\n- **3D Secure**: 4000 0000 0000 3220\n\n### Step 7: Setup Webhooks (Production)\n1. Add endpoint: `https://yourdomain.com/api/stripe-webhook`\n2. Select events: `payment_intent.succeeded`, `payment_intent.payment_failed`\n3. Copy webhook signing secret to `STRIPE_WEBHOOK_SECRET`\n\n## Security Features Included\n\n✅ **PCI DSS Level 1 Compliance** - Highest security standard\n✅ **End-to-end Encryption** - Data encrypted in transit and at rest  \n✅ **No Sensitive Data Storage** - Card details never touch your servers\n✅ **Webhook Verification** - Cryptographically signed confirmations\n✅ **Fraud Detection** - Machine learning fraud prevention\n✅ **Multiple Payment Methods** - Cards, UPI, bank transfers, wallets\n\n## Payment Methods Supported\n\n- **Credit/Debit Cards** (Visa, Mastercard, American Express)\n- **UPI Payments** (Google Pay, PhonePe, Paytm - India)\n- **Net Banking** (All major Indian banks)\n- **Digital Wallets** (Apple Pay, Google Pay)\n- **Bank Transfers** (ACH for US, SEPA for Europe)\n\n## Cost Structure\n\n- **Cards**: 2.9% + ₹2 per transaction\n- **UPI**: 2% (no fixed fee)\n- **Net Banking**: 2.5% + ₹3 per transaction\n- **International**: Additional 1.5%\n\n## Production Checklist\n\nBefore going live:\n- [ ] Switch to live Stripe keys (sk_live_, pk_live_)\n- [ ] Enable HTTPS on your domain\n- [ ] Setup webhook endpoints\n- [ ] Test with small real transactions\n- [ ] Configure error monitoring\n- [ ] Setup customer support for payment issues\n\nThe payment system is designed for maximum security and compliance with global banking standards.","size_bytes":2699},"client/src/components/NotificationCenter.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { \n  Bell, \n  Check, \n  Clock, \n  Calendar, \n  CreditCard, \n  Info,\n  X,\n  AlertCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface Notification {\n  id: number;\n  type: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  createdAt: string;\n  metadata?: any;\n  relatedBookingId?: number;\n}\n\nexport default function NotificationCenter() {\n  const [filter, setFilter] = useState<string>(\"all\");\n  const queryClient = useQueryClient();\n\n  // Fetch notifications\n  const { data: notifications, isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n  });\n\n  // Mark notification as read mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: number) => {\n      return await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'booking_confirmation':\n      case 'booking_reminder':\n        return <Calendar className=\"h-4 w-4\" />;\n      case 'payment_reminder':\n        return <CreditCard className=\"h-4 w-4\" />;\n      case 'booking_cancelled':\n        return <X className=\"h-4 w-4\" />;\n      case 'queue_update':\n        return <Clock className=\"h-4 w-4\" />;\n      default:\n        return <Bell className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getNotificationBadge = (type: string) => {\n    const config = {\n      'booking_confirmation': { variant: 'default' as const, color: 'text-green-600' },\n      'booking_reminder': { variant: 'secondary' as const, color: 'text-blue-600' },\n      'payment_reminder': { variant: 'destructive' as const, color: 'text-orange-600' },\n      'booking_cancelled': { variant: 'destructive' as const, color: 'text-red-600' },\n      'queue_update': { variant: 'outline' as const, color: 'text-purple-600' },\n    };\n\n    const typeConfig = config[type as keyof typeof config] || config.booking_confirmation;\n    \n    return (\n      <Badge variant={typeConfig.variant} className=\"text-xs\">\n        <span className={typeConfig.color}>\n          {type.replace('_', ' ').toUpperCase()}\n        </span>\n      </Badge>\n    );\n  };\n\n  const filteredNotifications = notifications?.filter(notification => {\n    if (filter === \"all\") return true;\n    if (filter === \"unread\") return !notification.isRead;\n    return notification.type === filter;\n  }) || [];\n\n  const unreadCount = notifications?.filter(n => !n.isRead).length || 0;\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Notifications\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"ml-2\">\n                {unreadCount}\n              </Badge>\n            )}\n          </CardTitle>\n          \n          {/* Filter buttons */}\n          <div className=\"flex gap-2\">\n            <Button\n              variant={filter === \"all\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(\"all\")}\n            >\n              All\n            </Button>\n            <Button\n              variant={filter === \"unread\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(\"unread\")}\n            >\n              Unread ({unreadCount})\n            </Button>\n            <Button\n              variant={filter === \"booking_reminder\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(\"booking_reminder\")}\n            >\n              Reminders\n            </Button>\n            <Button\n              variant={filter === \"payment_reminder\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilter(\"payment_reminder\")}\n            >\n              Payments\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        ) : filteredNotifications.length === 0 ? (\n          <div className=\"text-center py-8 text-gray-500\">\n            <Bell className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n            <p>No notifications found</p>\n          </div>\n        ) : (\n          <ScrollArea className=\"h-96\">\n            <div className=\"space-y-4\">\n              {filteredNotifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-4 border rounded-lg transition-colors ${\n                    notification.isRead \n                      ? 'bg-gray-50 border-gray-200' \n                      : 'bg-blue-50 border-blue-200'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start gap-3 flex-1\">\n                      <div className={`mt-1 ${notification.isRead ? 'text-gray-400' : 'text-blue-600'}`}>\n                        {getNotificationIcon(notification.type)}\n                      </div>\n                      \n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <h4 className={`font-medium ${notification.isRead ? 'text-gray-700' : 'text-gray-900'}`}>\n                            {notification.title}\n                          </h4>\n                          {getNotificationBadge(notification.type)}\n                        </div>\n                        \n                        <p className={`text-sm ${notification.isRead ? 'text-gray-600' : 'text-gray-800'}`}>\n                          {notification.message}\n                        </p>\n                        \n                        <div className=\"flex items-center gap-4 mt-2 text-xs text-gray-500\">\n                          <span>{format(new Date(notification.createdAt), 'MMM dd, yyyy h:mm a')}</span>\n                          {notification.relatedBookingId && (\n                            <span>Booking #{notification.relatedBookingId}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 ml-4\">\n                      {!notification.isRead && (\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => markAsReadMutation.mutate(notification.id)}\n                          disabled={markAsReadMutation.isPending}\n                        >\n                          <Check className=\"h-3 w-3\" />\n                          Mark Read\n                        </Button>\n                      )}\n                      \n                      {notification.isRead && (\n                        <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </ScrollArea>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7807},"client/src/components/PaymentForm.tsx":{"content":"// PAYMENT INTEGRATION - CURRENTLY COMMENTED OUT\n// Uncomment and configure when ready to enable payments\n\n/*\nimport { useState, useEffect } from 'react';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { useToast } from '@/hooks/use-toast';\nimport { Loader2 } from 'lucide-react';\n\n// Load Stripe with your publishable key\n// Make sure to add VITE_STRIPE_PUBLIC_KEY to your .env file\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY || '');\n\ninterface PaymentFormProps {\n  bookingId: number;\n  amount: number;\n  currency?: string;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\n// Main payment form component that handles Stripe payment processing\nconst CheckoutForm = ({ bookingId, amount, currency = 'inr', onSuccess, onCancel }: PaymentFormProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!stripe || !elements) {\n      toast({\n        title: \"Payment Error\",\n        description: \"Payment system not ready. Please try again.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setIsProcessing(true);\n    \n    try {\n      // Confirm payment with Stripe\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/booking-success?booking=${bookingId}`,\n        },\n        redirect: 'if_required', // Stay on page if possible\n      });\n      \n      if (error) {\n        // Payment failed\n        console.error('Payment failed:', error);\n        toast({\n          title: \"Payment Failed\",\n          description: error.message || \"Payment could not be processed\",\n          variant: \"destructive\",\n        });\n      } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n        // Payment succeeded\n        toast({\n          title: \"Payment Successful\",\n          description: \"Your booking has been confirmed!\",\n        });\n        onSuccess();\n      }\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred during payment\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Secure Payment</CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          Amount: {currency.toUpperCase()} {amount.toLocaleString()}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Stripe Payment Element - handles all payment methods */}\n          <PaymentElement \n            options={{\n              layout: 'tabs',\n              paymentMethodOrder: ['card', 'apple_pay', 'google_pay']\n            }}\n          />\n          \n          <div className=\"flex gap-3\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onCancel}\n              disabled={isProcessing}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              disabled={!stripe || isProcessing}\n              className=\"flex-1\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                `Pay ${currency.toUpperCase()} ${amount.toLocaleString()}`\n              )}\n            </Button>\n          </div>\n        </form>\n        \n        {/* Security badges */}\n        <div className=\"mt-4 pt-4 border-t\">\n          <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n            <span>🔒 Secured by Stripe</span>\n            <span>🛡️ PCI Compliant</span>\n            <span>🔐 256-bit SSL</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\n// Wrapper component that creates payment intent and provides Stripe context\nexport const PaymentForm = (props: PaymentFormProps) => {\n  const [clientSecret, setClientSecret] = useState<string>('');\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n\n  useEffect(() => {\n    // Create payment intent when component mounts\n    const createPaymentIntent = async () => {\n      try {\n        const response = await fetch('/api/create-payment-intent', {\n          method: 'POST',\n          headers: { \n            'Content-Type': 'application/json',\n            // Add CSRF token if you're using one\n          },\n          credentials: 'include', // Include cookies for authentication\n          body: JSON.stringify({\n            bookingId: props.bookingId,\n            amount: props.amount,\n            currency: props.currency || 'inr'\n          })\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        \n        if (data.clientSecret) {\n          setClientSecret(data.clientSecret);\n        } else {\n          throw new Error('No client secret received');\n        }\n      } catch (err) {\n        console.error('Error creating payment intent:', err);\n        setError(err instanceof Error ? err.message : 'Failed to initialize payment');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    createPaymentIntent();\n  }, [props.bookingId, props.amount, props.currency]);\n\n  if (loading) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"flex items-center justify-center p-8\">\n          <Loader2 className=\"h-8 w-8 animate-spin\" />\n          <span className=\"ml-2\">Loading payment form...</span>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-red-600 mb-4\">Error loading payment form</p>\n          <p className=\"text-sm text-gray-600 mb-4\">{error}</p>\n          <Button onClick={() => window.location.reload()}>\n            Try Again\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!clientSecret) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center\">\n          <p className=\"text-red-600\">Payment initialization failed</p>\n          <Button onClick={() => window.location.reload()} className=\"mt-4\">\n            Retry\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Stripe Elements options for enhanced security and UX\n  const stripeOptions = {\n    clientSecret,\n    appearance: {\n      theme: 'stripe' as const,\n      variables: {\n        colorPrimary: '#0570de',\n        colorBackground: '#ffffff',\n        colorText: '#30313d',\n        colorDanger: '#df1b41',\n        fontFamily: 'Ideal Sans, system-ui, sans-serif',\n        spacingUnit: '2px',\n        borderRadius: '4px',\n      },\n    },\n    loader: 'auto' as const,\n  };\n\n  return (\n    <Elements stripe={stripePromise} options={stripeOptions}>\n      <CheckoutForm {...props} />\n    </Elements>\n  );\n};\n\n// Export types for use in other components\nexport type { PaymentFormProps };\n*/\n\n// PLACEHOLDER COMPONENT - Remove when enabling payments\nexport const PaymentForm = () => {\n  return (\n    <div className=\"w-full max-w-md mx-auto p-4 border rounded-lg bg-gray-50\">\n      <h3 className=\"font-semibold mb-2\">Payment Integration</h3>\n      <p className=\"text-sm text-gray-600\">\n        Payment processing is ready to be enabled with Stripe integration.\n        Uncomment the code above and configure your Stripe keys.\n      </p>\n    </div>\n  );\n};","size_bytes":8199},"client/src/lib/exportUtils.ts":{"content":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\n// PDF Export Functions\nexport const exportRevenueToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  // Add title\n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  // Add date\n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  // Prepare table data\n  const tableData = data.map(row => [\n    row.period_label || row.period,\n    row.transaction_count || '0',\n    `₹${Number(row.total_revenue || 0).toLocaleString()}`,\n    `₹${Number(row.avg_transaction_value || 0).toLocaleString()}`\n  ]);\n  \n  // Add table\n  autoTable(doc, {\n    head: [['Period', 'Transactions', 'Total Revenue', 'Avg Value']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 10 },\n    headStyles: { fillColor: [41, 128, 185] }\n  });\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportRevenueBysportToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  const tableData = data.map(row => [\n    row.sport_name,\n    row.booking_count || '0',\n    `₹${Number(row.total_revenue || 0).toLocaleString()}`,\n    `₹${Number(row.avg_booking_value || 0).toLocaleString()}`\n  ]);\n  \n  autoTable(doc, {\n    head: [['Sport', 'Bookings', 'Total Revenue', 'Avg Booking Value']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 10 },\n    headStyles: { fillColor: [41, 128, 185] }\n  });\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportFacilityUsageToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  const tableData = data.map(row => [\n    row.sport_name,\n    row.ground_name || 'N/A',\n    row.booking_count || '0',\n    row.total_participants || '0',\n    `${Number(row.utilization_rate || 0).toFixed(1)}%`\n  ]);\n  \n  autoTable(doc, {\n    head: [['Sport', 'Ground', 'Bookings', 'Participants', 'Utilization']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 10 },\n    headStyles: { fillColor: [41, 128, 185] }\n  });\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportMemberBookingsToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  const tableData = data.map(row => [\n    row.user_id,\n    row.username || 'N/A',\n    row.total_bookings || '0',\n    row.favorite_sport || 'N/A',\n    `₹${Number(row.total_spent || 0).toLocaleString()}`\n  ]);\n  \n  autoTable(doc, {\n    head: [['User ID', 'Username', 'Total Bookings', 'Favorite Sport', 'Total Spent']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 10 },\n    headStyles: { fillColor: [41, 128, 185] }\n  });\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportMemberPaymentsToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  const tableData = data.map(row => [\n    row.user_id,\n    row.username || 'N/A',\n    row.cash_payments || '₹0',\n    row.upi_payments || '₹0',\n    row.card_payments || '₹0',\n    `₹${Number(row.total_payments || 0).toLocaleString()}`\n  ]);\n  \n  autoTable(doc, {\n    head: [['User ID', 'Username', 'Cash', 'UPI', 'Card', 'Total']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 10 },\n    headStyles: { fillColor: [41, 128, 185] }\n  });\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\n// Excel Export Functions\nexport const exportRevenueToExcel = (data: any[], title: string) => {\n  const worksheet = XLSX.utils.json_to_sheet(\n    data.map(row => ({\n      'Period': row.period_label || row.period,\n      'Transactions': row.transaction_count || 0,\n      'Total Revenue': `₹${Number(row.total_revenue || 0).toLocaleString()}`,\n      'Average Value': `₹${Number(row.avg_transaction_value || 0).toLocaleString()}`\n    }))\n  );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Revenue Report');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\nexport const exportRevenueBySportToExcel = (data: any[], title: string) => {\n  const worksheet = XLSX.utils.json_to_sheet(\n    data.map(row => ({\n      'Sport': row.sport_name,\n      'Bookings': row.booking_count || 0,\n      'Total Revenue': `₹${Number(row.total_revenue || 0).toLocaleString()}`,\n      'Average Booking Value': `₹${Number(row.avg_booking_value || 0).toLocaleString()}`\n    }))\n  );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Revenue by Sport');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\nexport const exportFacilityUsageToExcel = (data: any[], title: string) => {\n  const worksheet = XLSX.utils.json_to_sheet(\n    data.map(row => ({\n      'Sport': row.sport_name,\n      'Ground': row.ground_name || 'N/A',\n      'Bookings': row.booking_count || 0,\n      'Participants': row.total_participants || 0,\n      'Utilization Rate': `${Number(row.utilization_rate || 0).toFixed(1)}%`\n    }))\n  );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Facility Usage');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\nexport const exportMemberBookingsToExcel = (data: any[], title: string) => {\n  const worksheet = XLSX.utils.json_to_sheet(\n    data.map(row => ({\n      'User ID': row.user_id,\n      'Username': row.username || 'N/A',\n      'Total Bookings': row.total_bookings || 0,\n      'Favorite Sport': row.favorite_sport || 'N/A',\n      'Total Spent': `₹${Number(row.total_spent || 0).toLocaleString()}`\n    }))\n  );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Member Bookings');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\nexport const exportMemberPaymentsToExcel = (data: any[], title: string) => {\n  const worksheet = XLSX.utils.json_to_sheet(\n    data.map(row => ({\n      'User ID': row.user_id,\n      'Username': row.username || 'N/A',\n      'Cash Payments': row.cash_payments || '₹0',\n      'UPI Payments': row.upi_payments || '₹0',\n      'Card Payments': row.card_payments || '₹0',\n      'Total Payments': `₹${Number(row.total_payments || 0).toLocaleString()}`\n    }))\n  );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Member Payments');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\n// Coupon Usage Export Functions\nexport const exportCouponUsageToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  if (data.length === 0) {\n    doc.text('No coupon usage data available for the selected period.', 20, 50);\n  } else {\n    const tableData = data.map(row => [\n      row.coupon_code,\n      row.discount_type || 'N/A',\n      row.discount_value || '0',\n      row.usage_count || '0',\n      `₹${Number(row.total_discount_amount || 0).toLocaleString()}`\n    ]);\n    \n    autoTable(doc, {\n      head: [['Coupon Code', 'Type', 'Value', 'Usage Count', 'Total Discount']],\n      body: tableData,\n      startY: 40,\n      styles: { fontSize: 10 },\n      headStyles: { fillColor: [41, 128, 185] }\n    });\n  }\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportCouponUsageToExcel = (data: any[], title: string) => {\n  const worksheet = data.length === 0 \n    ? XLSX.utils.json_to_sheet([{ 'Message': 'No coupon usage data available for the selected period.' }])\n    : XLSX.utils.json_to_sheet(\n        data.map(row => ({\n          'Coupon Code': row.coupon_code,\n          'Discount Type': row.discount_type || 'N/A',\n          'Discount Value': row.discount_value || '0',\n          'Usage Count': row.usage_count || '0',\n          'Total Discount Amount': `₹${Number(row.total_discount_amount || 0).toLocaleString()}`\n        }))\n      );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Coupon Usage');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\n// Payment Export Functions\nexport const exportPaymentsToPDF = (data: any[], title: string) => {\n  const doc = new jsPDF();\n  \n  doc.setFontSize(20);\n  doc.text(title, 20, 20);\n  \n  doc.setFontSize(10);\n  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 30);\n  \n  if (data.length === 0) {\n    doc.text('No payment data available for the selected period.', 20, 50);\n  } else {\n    const tableData = data.map(row => [\n      `#${row.id}`,\n      row.userName || 'N/A',\n      `₹${Number(row.amount).toLocaleString()}`,\n      row.paymentMethod || 'N/A',\n      row.status,\n      row.discountAmount ? `₹${Number(row.discountAmount).toLocaleString()}` : '₹0',\n      new Date(row.createdAt).toLocaleDateString()\n    ]);\n    \n    autoTable(doc, {\n      head: [['Payment ID', 'User', 'Amount', 'Method', 'Status', 'Discount', 'Date']],\n      body: tableData,\n      startY: 40,\n      styles: { fontSize: 8 },\n      headStyles: { fillColor: [41, 128, 185] },\n      columnStyles: {\n        0: { cellWidth: 20 },\n        1: { cellWidth: 30 },\n        2: { cellWidth: 25 },\n        3: { cellWidth: 25 },\n        4: { cellWidth: 20 },\n        5: { cellWidth: 25 },\n        6: { cellWidth: 25 }\n      }\n    });\n  }\n  \n  doc.save(`${title.toLowerCase().replace(/\\s+/g, '-')}.pdf`);\n};\n\nexport const exportPaymentsToExcel = (data: any[], title: string) => {\n  const worksheet = data.length === 0 \n    ? XLSX.utils.json_to_sheet([{ 'Message': 'No payment data available for the selected period.' }])\n    : XLSX.utils.json_to_sheet(\n        data.map(row => ({\n          'Payment ID': `#${row.id}`,\n          'Booking ID': `#${row.bookingId}`,\n          'User Name': row.userName || 'N/A',\n          'User Email': row.userEmail || 'N/A',\n          'Amount': `₹${Number(row.amount).toLocaleString()}`,\n          'Payment Method': row.paymentMethod || 'N/A',\n          'Transaction ID': row.transactionId || 'N/A',\n          'Status': row.status,\n          'Discount Amount': row.discountAmount ? `₹${Number(row.discountAmount).toLocaleString()}` : '₹0',\n          'Discount Reason': row.discountReason || 'N/A',\n          'Processed Date': row.processedAt ? new Date(row.processedAt).toLocaleDateString() : 'N/A',\n          'Created Date': new Date(row.createdAt).toLocaleDateString(),\n          'Start Date': row.startDate ? new Date(row.startDate).toLocaleDateString() : 'N/A',\n          'End Date': row.endDate ? new Date(row.endDate).toLocaleDateString() : 'N/A'\n        }))\n      );\n  \n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Payments');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(blob, `${title.toLowerCase().replace(/\\s+/g, '-')}.xlsx`);\n};\n\nexport const printPayments = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 12px; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        .status-completed { color: #28a745; font-weight: bold; }\n        .status-pending { color: #ffc107; font-weight: bold; }\n        .status-partial { color: #17a2b8; font-weight: bold; }\n        .status-failed { color: #dc3545; font-weight: bold; }\n        @media print { \n          body { margin: 0; } \n          .no-print { display: none; }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <div class=\"date\">Generated on: ${new Date().toLocaleDateString()}</div>\n      </div>\n      \n      ${data.length === 0 ? '<p>No payment data available for the selected period.</p>' : `\n      <table>\n        <thead>\n          <tr>\n            <th>Payment ID</th>\n            <th>Booking ID</th>\n            <th>User</th>\n            <th>Amount</th>\n            <th>Method</th>\n            <th>Status</th>\n            <th>Discount</th>\n            <th>Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>#${row.id}</td>\n              <td>#${row.bookingId}</td>\n              <td>${row.userName || 'N/A'}</td>\n              <td class=\"amount\">₹${Number(row.amount).toLocaleString()}</td>\n              <td>${row.paymentMethod || 'N/A'}</td>\n              <td class=\"status-${row.status}\">${row.status}</td>\n              <td>${row.discountAmount ? `₹${Number(row.discountAmount).toLocaleString()}` : '₹0'}</td>\n              <td>${new Date(row.createdAt).toLocaleDateString()}</td>\n            </tr>\n          `).join('')}\n        </tbody>\n      </table>\n      `}\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  setTimeout(() => {\n    printWindow.print();\n    printWindow.close();\n  }, 250);\n};\n\n// Print Functions\nexport const printRevenue = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        @media print { \n          body { margin: 0; } \n          .no-print { display: none; }\n        }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Period</th>\n            <th>Transactions</th>\n            <th>Total Revenue</th>\n            <th>Average Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>${row.period_label || row.period}</td>\n              <td>${row.transaction_count || \"0\"}</td>\n              <td class=\"amount\">₹${Number(row.total_revenue || 0).toLocaleString()}</td>\n              <td class=\"amount\">₹${Number(row.avg_transaction_value || 0).toLocaleString()}</td>\n            </tr>\n          `).join(\"\")}\n        </tbody>\n      </table>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n\nexport const printRevenueBySport = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        @media print { body { margin: 0; } }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Sport</th>\n            <th>Bookings</th>\n            <th>Total Revenue</th>\n            <th>Average Booking Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>${row.sport_name}</td>\n              <td>${row.booking_count || \"0\"}</td>\n              <td class=\"amount\">₹${Number(row.total_revenue || 0).toLocaleString()}</td>\n              <td class=\"amount\">₹${Number(row.avg_booking_value || 0).toLocaleString()}</td>\n            </tr>\n          `).join(\"\")}\n        </tbody>\n      </table>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n\nexport const printFacilityUsage = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .utilization { font-weight: bold; }\n        @media print { body { margin: 0; } }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>Sport</th>\n            <th>Ground</th>\n            <th>Bookings</th>\n            <th>Participants</th>\n            <th>Utilization</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>${row.sport_name}</td>\n              <td>${row.ground_name || \"N/A\"}</td>\n              <td>${row.booking_count || \"0\"}</td>\n              <td>${row.total_participants || \"0\"}</td>\n              <td class=\"utilization\">${Number(row.utilization_rate || 0).toFixed(1)}%</td>\n            </tr>\n          `).join(\"\")}\n        </tbody>\n      </table>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n\nexport const printMemberBookings = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        @media print { body { margin: 0; } }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>User ID</th>\n            <th>Username</th>\n            <th>Total Bookings</th>\n            <th>Favorite Sport</th>\n            <th>Total Spent</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>${row.user_id}</td>\n              <td>${row.username || \"N/A\"}</td>\n              <td>${row.total_bookings || \"0\"}</td>\n              <td>${row.favorite_sport || \"N/A\"}</td>\n              <td class=\"amount\">₹${Number(row.total_spent || 0).toLocaleString()}</td>\n            </tr>\n          `).join(\"\")}\n        </tbody>\n      </table>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n\nexport const printMemberPayments = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        @media print { body { margin: 0; } }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      <table>\n        <thead>\n          <tr>\n            <th>User ID</th>\n            <th>Username</th>\n            <th>Cash</th>\n            <th>UPI</th>\n            <th>Card</th>\n            <th>Total</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${data.map(row => `\n            <tr>\n              <td>${row.user_id}</td>\n              <td>${row.username || \"N/A\"}</td>\n              <td>${row.cash_payments || \"₹0\"}</td>\n              <td>${row.upi_payments || \"₹0\"}</td>\n              <td>${row.card_payments || \"₹0\"}</td>\n              <td class=\"amount\">₹${Number(row.total_payments || 0).toLocaleString()}</td>\n            </tr>\n          `).join(\"\")}\n        </tbody>\n      </table>\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n\nexport const printCouponUsage = (data: any[], title: string) => {\n  const printWindow = window.open(\"\", \"_blank\");\n  if (!printWindow) return;\n  \n  const html = `\n    <!DOCTYPE html>\n    <html>\n    <head>\n      <title>${title}</title>\n      <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        h1 { color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px; }\n        .header { margin-bottom: 20px; }\n        .date { color: #666; font-size: 14px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 12px; text-align: left; }\n        th { background-color: #f8f9fa; font-weight: bold; }\n        .amount { color: #28a745; font-weight: bold; }\n        .no-data { text-align: center; padding: 40px; color: #666; }\n        @media print { body { margin: 0; } }\n      </style>\n    </head>\n    <body>\n      <div class=\"header\">\n        <h1>${title}</h1>\n        <p class=\"date\">Generated on: ${new Date().toLocaleDateString()}</p>\n      </div>\n      ${data.length === 0 ? \n        \"<div class=\\\"no-data\\\">No coupon usage data available for the selected period.</div>\" :\n        `<table>\n          <thead>\n            <tr>\n              <th>Coupon Code</th>\n              <th>Type</th>\n              <th>Value</th>\n              <th>Usage Count</th>\n              <th>Total Discount</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${data.map(row => `\n              <tr>\n                <td>${row.coupon_code}</td>\n                <td>${row.discount_type || \"N/A\"}</td>\n                <td>${row.discount_value || \"0\"}</td>\n                <td>${row.usage_count || \"0\"}</td>\n                <td class=\"amount\">₹${Number(row.total_discount_amount || 0).toLocaleString()}</td>\n              </tr>\n            `).join(\"\")}\n          </tbody>\n        </table>`\n      }\n    </body>\n    </html>\n  `;\n  \n  printWindow.document.write(html);\n  printWindow.document.close();\n  printWindow.focus();\n  printWindow.print();\n};\n","size_bytes":26604},"client/src/pages/BookingQueue.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { toast } from '@/hooks/use-toast';\nimport { ClockIcon, MapPinIcon, UsersIcon, IndianRupeeIcon, XIcon, CheckIcon } from 'lucide-react';\n\ninterface QueueRequest {\n  id: number;\n  userId: string;\n  sportId: number;\n  groundId: number;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  participantCount: number;\n  bookingType: string;\n  planType: string;\n  requestedAmount: string;\n  priority: number;\n  status: 'waiting' | 'offered' | 'expired' | 'converted';\n  createdAt: string;\n  expiresAt?: string;\n  facilityName: string;\n  sportName: string;\n  groundName: string;\n}\n\nexport default function BookingQueue() {\n  const queryClient = useQueryClient();\n\n  const { data: queueRequests, isLoading } = useQuery({\n    queryKey: ['/api/queue/user'],\n    queryFn: async () => {\n      const response = await fetch('/api/queue/user');\n      if (!response.ok) throw new Error('Failed to fetch queue requests');\n      return response.json() as QueueRequest[];\n    }\n  });\n\n  const convertQueueToBookingMutation = useMutation({\n    mutationFn: async (queueId: number) => {\n      const response = await fetch(`/api/queue/${queueId}/book`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' }\n      });\n      if (!response.ok) throw new Error('Failed to convert queue to booking');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Booking Confirmed!',\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/queue/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/bookings/user'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Booking Failed',\n        description: error instanceof Error ? error.message : 'Failed to confirm booking',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const removeFromQueueMutation = useMutation({\n    mutationFn: async (queueId: number) => {\n      const response = await fetch(`/api/queue/${queueId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) throw new Error('Failed to remove from queue');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: 'Removed from Queue',\n        description: data.message,\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/queue/user'] });\n    },\n    onError: (error) => {\n      toast({\n        title: 'Error',\n        description: error instanceof Error ? error.message : 'Failed to remove from queue',\n        variant: 'destructive',\n      });\n    }\n  });\n\n  const getStatusBadge = (status: string, priority?: number) => {\n    switch (status) {\n      case 'waiting':\n        return <Badge variant=\"secondary\">Waiting (#{priority})</Badge>;\n      case 'offered':\n        return <Badge variant=\"default\" className=\"bg-green-500 hover:bg-green-600\">Slot Available!</Badge>;\n      case 'expired':\n        return <Badge variant=\"destructive\">Expired</Badge>;\n      case 'converted':\n        return <Badge variant=\"default\" className=\"bg-blue-500 hover:bg-blue-600\">Booked</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  const getTimeRemaining = (expiresAt?: string) => {\n    if (!expiresAt) return null;\n    \n    const now = new Date();\n    const expires = new Date(expiresAt);\n    const diff = expires.getTime() - now.getTime();\n    \n    if (diff <= 0) return 'Expired';\n    \n    const hours = Math.floor(diff / (1000 * 60 * 60));\n    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n    \n    return `${hours}h ${minutes}m remaining`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">Waiting List</h1>\n        <div className=\"space-y-4\">\n          {[1, 2, 3].map((i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-4 bg-gray-200 rounded w-1/4 mb-4\"></div>\n                <div className=\"space-y-2\">\n                  <div className=\"h-3 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  if (!queueRequests || queueRequests.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8\">Waiting List</h1>\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <ClockIcon className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Waiting List Requests</h3>\n            <p className=\"text-gray-500\">\n              You're not currently on any waiting lists. When you try to book a busy slot, \n              you'll be added to the waiting list and notified when it becomes available.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Waiting List</h1>\n          <p className=\"text-gray-600 mt-2\">\n            Track your waiting list requests and book available slots\n          </p>\n        </div>\n        <Badge variant=\"outline\" className=\"text-sm\">\n          {queueRequests.length} Active Request{queueRequests.length !== 1 ? 's' : ''}\n        </Badge>\n      </div>\n\n      <div className=\"space-y-6\">\n        {queueRequests.map((request) => (\n          <Card key={request.id} className=\"overflow-hidden\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <CardTitle className=\"text-xl\">{request.facilityName}</CardTitle>\n                  <CardDescription className=\"text-base mt-1\">\n                    {request.sportName} • {request.groundName}\n                  </CardDescription>\n                </div>\n                <div className=\"text-right\">\n                  {getStatusBadge(request.status, request.priority)}\n                  {request.status === 'offered' && request.expiresAt && (\n                    <p className=\"text-sm text-orange-600 mt-1 font-medium\">\n                      {getTimeRemaining(request.expiresAt)}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardHeader>\n\n            <CardContent className=\"pt-0\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <div className=\"flex items-center space-x-2\">\n                  <ClockIcon className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700\">\n                    {new Date(request.bookingDate).toLocaleDateString('en-IN', {\n                      weekday: 'short',\n                      month: 'short',\n                      day: 'numeric'\n                    })}\n                  </span>\n                </div>\n                \n                <div className=\"flex items-center space-x-2\">\n                  <MapPinIcon className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700\">\n                    {request.startTime} - {request.endTime}\n                  </span>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <UsersIcon className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-sm text-gray-700\">\n                    {request.participantCount} participant{request.participantCount !== 1 ? 's' : ''}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-2\">\n                  <IndianRupeeIcon className=\"h-4 w-4 text-gray-500\" />\n                  <span className=\"text-lg font-semibold\">₹{request.requestedAmount}</span>\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {request.planType} • {request.bookingType}\n                  </Badge>\n                </div>\n\n                <div className=\"flex space-x-2\">\n                  {request.status === 'offered' && (\n                    <Button\n                      onClick={() => convertQueueToBookingMutation.mutate(request.id)}\n                      disabled={convertQueueToBookingMutation.isPending}\n                      className=\"bg-green-600 hover:bg-green-700\"\n                    >\n                      <CheckIcon className=\"h-4 w-4 mr-2\" />\n                      Book Now\n                    </Button>\n                  )}\n                  \n                  {['waiting', 'offered'].includes(request.status) && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => removeFromQueueMutation.mutate(request.id)}\n                      disabled={removeFromQueueMutation.isPending}\n                    >\n                      <XIcon className=\"h-4 w-4 mr-2\" />\n                      Remove\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              {request.status === 'waiting' && (\n                <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Position #{request.priority}</strong> in the waiting list. \n                    You'll be notified when a slot becomes available.\n                  </p>\n                </div>\n              )}\n\n              {request.status === 'offered' && (\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                  <p className=\"text-sm text-green-800\">\n                    <strong>Great news!</strong> A slot is now available. Click \"Book Now\" to confirm your booking.\n                    {request.expiresAt && (\n                      <span className=\"block mt-1 font-medium\">\n                        Offer expires in {getTimeRemaining(request.expiresAt)}\n                      </span>\n                    )}\n                  </p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":10749},"client/src/pages/NotFound.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ArrowLeft, Home, Shield } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function NotFound() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n            <span className=\"text-2xl font-bold text-red-600\">404</span>\n          </div>\n          <CardTitle className=\"text-xl font-semibold\">Page Not Found</CardTitle>\n          <p className=\"text-gray-600 mt-2\">\n            The page you're looking for doesn't exist or you don't have permission to access it.\n          </p>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col gap-3\">\n            <Link href=\"/\">\n              <Button className=\"w-full\" variant=\"default\">\n                <Home className=\"h-4 w-4 mr-2\" />\n                Go Home\n              </Button>\n            </Link>\n            \n            {user?.role === 'admin' && (\n              <Link href=\"/admin\">\n                <Button className=\"w-full\" variant=\"outline\">\n                  <Shield className=\"h-4 w-4 mr-2\" />\n                  Admin Dashboard\n                </Button>\n              </Link>\n            )}\n            \n            <Button \n              className=\"w-full\" \n              variant=\"ghost\"\n              onClick={() => window.history.back()}\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Go Back\n            </Button>\n          </div>\n          \n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1912},"client/src/pages/Payment.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navbar from \"@/components/Navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ArrowLeft, CreditCard, Shield, Lock, CheckCircle, Clock, AlertCircle, Receipt, History } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { ReceiptModal } from \"@/components/ReceiptModal\";\nimport { PaymentHistoryModal } from \"@/components/PaymentHistoryModal\";\n\ninterface PaymentData {\n  bookingId: number;\n  amount: string;\n  paymentMethod: string;\n  discountAmount?: string;\n  discountReason?: string;\n}\n\ninterface BookingDetails {\n  id: number;\n  facilityName: string;\n  facilityType: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  participants: number;\n  participantCount: number;\n  totalAmount: number;\n  paidAmount: number;\n  discountAmount: number;\n  paymentStatus: string;\n  bookingType: string;\n  planType: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  user: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nexport default function Payment() {\n  const { bookingId } = useParams<{ bookingId?: string }>();\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Get URL parameters for payment configuration\n  const urlParams = new URLSearchParams(window.location.search);\n  const totalFromUrl = parseFloat(urlParams.get('total') || '0');\n  const discountFromUrl = parseFloat(urlParams.get('discount') || '0');\n  const discountReasonFromUrl = decodeURIComponent(urlParams.get('discountReason') || '');\n  const isAdminBooking = urlParams.get('isAdmin') === 'true';\n  const callingModule = urlParams.get('module') || 'booking'; // booking, pending-payment, etc.\n  const loginId = user?.id || 'unknown';\n\n  // Debug URL parameters\n  console.log('Payment page debug:', {\n    userRole: user?.role,\n    isAdminBooking,\n    callingModule,\n    urlParams: Object.fromEntries(urlParams),\n  });\n\n  const [paymentMethod, setPaymentMethod] = useState<\"credit_card\" | \"upi\" | \"cash\">(\"credit_card\");\n  const [cardNumber, setCardNumber] = useState(\"\");\n  const [expiryDate, setExpiryDate] = useState(\"\");\n  const [cvv, setCvv] = useState(\"\");\n  const [cardName, setCardName] = useState(\"\");\n  const [upiId, setUpiId] = useState(\"\");\n  const [processing, setProcessing] = useState(false);\n  \n  // Payment calculation states\n  const [discountAmount, setDiscountAmount] = useState(discountFromUrl);\n  const [discountReason, setDiscountReason] = useState(discountReasonFromUrl);\n  const [paidAmount, setPaidAmount] = useState(0);\n  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);\n  \n  // Receipt states\n  const [showReceiptModal, setShowReceiptModal] = useState(false);\n  const [lastPaymentId, setLastPaymentId] = useState<number | null>(null);\n  const [receiptData, setReceiptData] = useState<any>(null);\n\n  // Fetch booking details\n  const { data: booking, isLoading: bookingLoading, error: bookingError } = useQuery<BookingDetails>({\n    queryKey: [\"/api/bookings\", bookingId],\n    queryFn: async () => {\n      const response = await fetch(`/api/bookings/${bookingId}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch booking details');\n      }\n      return response.json();\n    },\n    enabled: !!bookingId && isAuthenticated,\n  });\n\n  // Set initial payment configuration based on calling module and user role\n  useEffect(() => {\n    const isAdmin = user?.role === 'admin' || isAdminBooking;\n    if (!isAdmin) {\n      // For regular users, set paid amount to total amount minus any discount\n      setPaidAmount((totalFromUrl || booking?.totalAmount || 0) - discountAmount);\n    } else {\n      // For admin users, check if coming from pending payment module\n      if (callingModule === 'pending-payment' && booking) {\n        // Show pending/due amount for pending payments\n        const totalPaid = Number(booking.paidAmount || 0);\n        const pendingAmount = booking.totalAmount - totalPaid - discountAmount;\n        setPaidAmount(Math.max(0, pendingAmount));\n      } else {\n        // Regular booking flow - show full amount\n        setPaidAmount((totalFromUrl || booking?.totalAmount || 0) - discountAmount);\n      }\n    }\n  }, [booking?.totalAmount, totalFromUrl, discountAmount, user?.role, isAdminBooking, callingModule]);\n\n  // Process payment mutation\n  const processPaymentMutation = useMutation({\n    mutationFn: async (paymentData: PaymentData) => {\n      setProcessing(true);\n      \n      // Simulate payment processing delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      return await apiRequest(\"POST\", \"/api/payments\", paymentData);\n    },\n    onSuccess: async (response) => {\n      const payment = await response.json();\n      const balanceRemaining = Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount - paidAmount);\n      \n      // Store payment ID for receipt generation\n      setLastPaymentId(payment.id);\n      \n      // Generate receipt data for immediate display\n      if (booking) {\n        setReceiptData({\n          receiptId: `RCP-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`,\n          bookingId: booking.id,\n          paymentId: payment.id,\n          customerName: `${booking.firstName || booking.user?.firstName || ''} ${booking.lastName || booking.user?.lastName || ''}`.trim(),\n          customerEmail: booking.email || booking.user?.email || '',\n          customerPhone: booking.phone || '',\n          facilityName: booking.facilityName || 'Sports Facility',\n          sportName: booking.facilityType || 'Sport',\n          bookingDate: booking.bookingDate,\n          startTime: booking.startTime,\n          endTime: booking.endTime,\n          participants: booking.participantCount || booking.participants || 1,\n          totalAmount: booking.totalAmount,\n          paidAmount: paidAmount,\n          discountAmount: discountAmount,\n          paymentMethod: paymentMethod,\n          transactionId: payment.transactionId || `${paymentMethod.toUpperCase()}-${Date.now()}`,\n          paymentDate: new Date().toISOString(),\n          balanceAmount: balanceRemaining,\n          paymentStatus: payment.status || 'completed'\n        });\n      }\n      \n      toast({\n        title: \"Payment Successful!\",\n        description: balanceRemaining > 0 \n          ? `Payment of ₹${paidAmount.toLocaleString()} processed. Balance: ₹${balanceRemaining.toLocaleString()}`\n          : `Full payment of ₹${paidAmount.toLocaleString()} completed successfully.`,\n        duration: 5000,\n      });\n\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/payments\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/bookings\"] });\n      \n      // Invalidate admin dashboard stats if user is admin or if this is an admin booking\n      if (user?.role === 'admin' || user?.role === 'manager' || isAdminBooking) {\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/stats\"] });\n        queryClient.invalidateQueries({ queryKey: [\"/api/admin/bookings\"] });\n      }\n\n      // Show receipt modal instead of redirecting immediately\n      setTimeout(() => {\n        setShowReceiptModal(true);\n      }, 1000);\n      \n      // Redirect to appropriate page after showing receipt\n      setTimeout(() => {\n        if (user?.role === 'admin' && callingModule === 'booking') {\n          // Admin from booking module - return to admin dashboard\n          setLocation('/admin/dashboard');\n        } else if (user?.role === 'admin' || user?.role === 'manager') {\n          // Admin from other modules - go to admin bookings\n          setLocation('/admin/bookings');\n        } else {\n          // Regular user - go to profile bookings\n          setLocation('/profile?tab=bookings');\n        }\n      }, 15000); // Give more time to view receipt\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message || \"Payment processing failed. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setProcessing(false);\n    },\n  });\n\n  const handlePayment = async () => {\n    if (!booking) return;\n\n    // Validate paid amount\n    if (paidAmount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid amount to pay.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const maxPayable = Math.max(0, (totalFromUrl || booking.totalAmount) - discountAmount);\n    if (paidAmount > maxPayable) {\n      toast({\n        title: \"Amount Exceeds Balance\",\n        description: `Maximum payable amount is ₹${maxPayable.toLocaleString()}.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate payment method specific fields\n    if (paymentMethod === \"credit_card\") {\n      if (!cardNumber || !expiryDate || !cvv || !cardName) {\n        toast({\n          title: \"Invalid Card Details\",\n          description: \"Please fill in all card details.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n\n    if (paymentMethod === \"upi\" && !upiId) {\n      toast({\n        title: \"Invalid UPI ID\",\n        description: \"Please enter a valid UPI ID.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const paymentData: PaymentData = {\n      bookingId: booking.id,\n      amount: paidAmount.toString(),\n      paymentMethod,\n      discountAmount: discountAmount.toString(),\n      discountReason: discountReason,\n    };\n\n    processPaymentMutation.mutate(paymentData);\n  };\n\n  const formatCardNumber = (value: string) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    const matches = v.match(/\\d{4,16}/g);\n    const match = matches && matches[0] || '';\n    const parts = [];\n    for (let i = 0, len = match.length; i < len; i += 4) {\n      parts.push(match.substring(i, i + 4));\n    }\n    if (parts.length) {\n      return parts.join(' ');\n    } else {\n      return v;\n    }\n  };\n\n  const formatExpiryDate = (value: string) => {\n    const v = value.replace(/\\s+/g, '').replace(/[^0-9]/gi, '');\n    if (v.length >= 2) {\n      return v.substring(0, 2) + '/' + v.substring(2, 4);\n    }\n    return v;\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"p-8\">\n              <AlertCircle className=\"h-12 w-12 text-orange-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Authentication Required</h2>\n              <p className=\"text-gray-600 mb-4\">Please log in to access the payment page.</p>\n              <Button onClick={() => window.location.href = \"/api/login\"}>\n                Log In\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (bookingLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">Loading payment details...</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (bookingError || (!bookingLoading && !booking)) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                <h2 className=\"text-xl font-semibold mb-2\">Error Loading Booking</h2>\n                <p className=\"text-gray-600 mb-4\">\n                  {bookingError instanceof Error ? bookingError.message : \"The booking you're trying to pay for could not be found.\"}\n                </p>\n                <p className=\"text-sm text-gray-500 mb-4\">\n                  Booking ID: {bookingId || \"Not provided\"}\n                </p>\n                <div className=\"flex gap-2 justify-center\">\n                  <Button onClick={() => window.location.reload()} variant=\"outline\">\n                    Try Again\n                  </Button>\n                  <Link href=\"/\">\n                    <Button>\n                      <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                      Back to Home\n                    </Button>\n                  </Link>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"flex items-center gap-4\">\n              <Link href=\"/profile?tab=bookings\">\n                <Button variant=\"outline\" size=\"sm\">\n                  <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                  Back\n                </Button>\n              </Link>\n              <div>\n                <h1 className=\"text-2xl font-bold\">Complete Payment</h1>\n                <p className=\"text-gray-600\">Booking ID: #{booking?.id}</p>\n              </div>\n            </div>\n            \n            {/* Payment History Button - Always show for debugging */}\n            <div className=\"flex items-center gap-2\">\n              {booking ? (\n                <PaymentHistoryModal bookingId={booking.id} />\n              ) : (\n                <div className=\"text-sm text-red-500\">\n                  Payment History (booking data loading...)\n                </div>\n              )}\n            </div>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Booking Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  Booking Summary\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Facility:</span>\n                  <span className=\"font-medium\">{booking?.facilityName}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Date:</span>\n                  <span className=\"font-medium\">{new Date(booking?.bookingDate || '').toLocaleDateString()}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Time:</span>\n                  <span className=\"font-medium\">{booking?.startTime} - {booking?.endTime}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Duration:</span>\n                  <span className=\"font-medium\">{booking?.duration} hours</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Participants:</span>\n                  <span className=\"font-medium\">{booking?.participants || booking?.participantCount}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Plan Type:</span>\n                  <Badge variant=\"outline\">{booking?.planType}</Badge>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-gray-600\">Status:</span>\n                  <Badge variant={booking?.paymentStatus === 'paid' ? 'default' : 'secondary'}>\n                    {booking?.paymentStatus}\n                  </Badge>\n                </div>\n                \n                <Separator />\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-600\">Total Amount:</span>\n                    <span className=\"font-medium\">₹{(totalFromUrl || booking?.totalAmount || 0).toLocaleString()}</span>\n                  </div>\n                  \n                  {discountAmount > 0 && (\n                    <>\n                      <div className=\"flex justify-between text-green-600\">\n                        <span>Discount Applied:</span>\n                        <span className=\"font-medium\">-₹{discountAmount.toLocaleString()}</span>\n                      </div>\n                      {discountReason && (\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-gray-600\">Discount Reason:</span>\n                          <span className=\"font-medium text-sm\">{discountReason}</span>\n                        </div>\n                      )}\n                    </>\n                  )}\n                  \n                  <Separator />\n                  \n                  <div className=\"flex justify-between items-center text-lg font-semibold\">\n                    <span>Amount to be Paid:</span>\n                    <span className=\"text-primary\">₹{Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount).toLocaleString()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Form */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lock className=\"h-5 w-5 text-green-500\" />\n                  Secure Payment\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Payment Method Selection */}\n                <div>\n                  <Label className=\"text-base font-medium\">Payment Method</Label>\n                  <RadioGroup value={paymentMethod} onValueChange={(value: any) => setPaymentMethod(value)} className=\"mt-3\">\n                    <div className=\"space-y-3\">\n                      <Label className=\"flex items-center space-x-3 border rounded-lg p-4 cursor-pointer hover:border-primary [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50\">\n                        <RadioGroupItem value=\"credit_card\" />\n                        <CreditCard className=\"h-5 w-5\" />\n                        <div>\n                          <div className=\"font-medium\">Credit/Debit Card</div>\n                          <div className=\"text-sm text-gray-500\">Visa, Mastercard, RuPay</div>\n                        </div>\n                      </Label>\n                      \n                      <Label className=\"flex items-center space-x-3 border rounded-lg p-4 cursor-pointer hover:border-primary [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50\">\n                        <RadioGroupItem value=\"upi\" />\n                        <span className=\"text-xl\">💳</span>\n                        <div>\n                          <div className=\"font-medium\">UPI</div>\n                          <div className=\"text-sm text-gray-500\">Pay using UPI ID</div>\n                        </div>\n                      </Label>\n\n                      {/* Cash option only for admin users */}\n                      {(user?.role === 'admin' || user?.role === 'manager') && (\n                        <Label className=\"flex items-center space-x-3 border rounded-lg p-4 cursor-pointer hover:border-primary [&:has([data-state=checked])]:border-primary [&:has([data-state=checked])]:bg-blue-50\">\n                          <RadioGroupItem value=\"cash\" />\n                          <span className=\"text-xl\">💵</span>\n                          <div>\n                            <div className=\"font-medium\">Cash</div>\n                            <div className=\"text-sm text-gray-500\">Admin Only</div>\n                          </div>\n                        </Label>\n                      )}\n                    </div>\n                  </RadioGroup>\n                </div>\n\n                {/* Admin-only Partial Payment Section - Show for admin/manager users */}\n                {(user?.role === 'admin' || user?.role === 'manager') && (\n                  <div className=\"space-y-4 border-t pt-4\">\n                    <Label className=\"text-base font-medium\">Payment Details</Label>\n                    \n                    {/* Discount Section - Only for Admin */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Discount Amount (₹)</Label>\n                        <Input\n                          type=\"number\"\n                          min={0}\n                          max={totalFromUrl || booking?.totalAmount || 0}\n                          value={discountAmount}\n                          onChange={(e) => setDiscountAmount(Number(e.target.value) || 0)}\n                          placeholder=\"0\"\n                        />\n                      </div>\n                      <div>\n                        <Label>Discount Reason</Label>\n                        <Input\n                          type=\"text\"\n                          value={discountReason}\n                          onChange={(e) => setDiscountReason(e.target.value)}\n                          placeholder=\"e.g., Staff discount, Loyalty bonus\"\n                        />\n                      </div>\n                    </div>\n\n                    {/* Paid Amount and Payment Date */}\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Paid Amount (₹)</Label>\n                        <Input\n                          type=\"number\"\n                          min={0}\n                          max={Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount)}\n                          value={paidAmount}\n                          onChange={(e) => setPaidAmount(Number(e.target.value) || 0)}\n                          placeholder=\"Enter amount to pay now\"\n                        />\n                        <p className=\"text-xs text-gray-500 mt-1\">\n                          Maximum: ₹{Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount).toLocaleString()}\n                        </p>\n                      </div>\n                      <div>\n                        <Label>Payment Date</Label>\n                        <Input\n                          type=\"date\"\n                          value={paymentDate}\n                          onChange={(e) => setPaymentDate(e.target.value)}\n                        />\n                      </div>\n                    </div>\n\n                    {/* Balance Display */}\n                    {paidAmount > 0 && (\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Total Amount:</span>\n                          <span>₹{(totalFromUrl || booking?.totalAmount || 0).toLocaleString()}</span>\n                        </div>\n                        {discountAmount > 0 && (\n                          <div className=\"flex justify-between text-sm text-green-600\">\n                            <span>Discount:</span>\n                            <span>-₹{discountAmount.toLocaleString()}</span>\n                          </div>\n                        )}\n                        <div className=\"flex justify-between text-sm\">\n                          <span>Amount to Pay:</span>\n                          <span>₹{Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount).toLocaleString()}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm font-medium\">\n                          <span>Paying Now:</span>\n                          <span>₹{paidAmount.toLocaleString()}</span>\n                        </div>\n                        <Separator />\n                        <div className=\"flex justify-between font-semibold\">\n                          <span>Balance Due:</span>\n                          <span className={`${Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount - paidAmount) > 0 ? 'text-orange-600' : 'text-green-600'}`}>\n                            ₹{Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount - paidAmount).toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  </div>\n                )}\n\n                {/* Credit Card Form */}\n                {paymentMethod === \"credit_card\" && (\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label>Card Number</Label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"1234 5678 9012 3456\"\n                        value={cardNumber}\n                        onChange={(e) => setCardNumber(formatCardNumber(e.target.value))}\n                        maxLength={19}\n                      />\n                    </div>\n                    \n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <Label>Expiry Date</Label>\n                        <Input\n                          type=\"text\"\n                          placeholder=\"MM/YY\"\n                          value={expiryDate}\n                          onChange={(e) => setExpiryDate(formatExpiryDate(e.target.value))}\n                          maxLength={5}\n                        />\n                      </div>\n                      <div>\n                        <Label>CVV</Label>\n                        <Input\n                          type=\"text\"\n                          placeholder=\"123\"\n                          value={cvv}\n                          onChange={(e) => setCvv(e.target.value.replace(/[^0-9]/g, '').substring(0, 3))}\n                          maxLength={3}\n                        />\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <Label>Cardholder Name</Label>\n                      <Input\n                        type=\"text\"\n                        placeholder=\"John Doe\"\n                        value={cardName}\n                        onChange={(e) => setCardName(e.target.value)}\n                      />\n                    </div>\n                  </div>\n                )}\n\n                {/* UPI Form */}\n                {paymentMethod === \"upi\" && (\n                  <div>\n                    <Label>UPI ID</Label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"yourname@paytm\"\n                      value={upiId}\n                      onChange={(e) => setUpiId(e.target.value)}\n                    />\n                  </div>\n                )}\n\n                {/* Cash Payment (Admin Only) */}\n                {paymentMethod === \"cash\" && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Shield className=\"h-5 w-5 text-blue-600\" />\n                      <span className=\"font-medium text-blue-800\">Cash Payment (Admin)</span>\n                    </div>\n                    <p className=\"text-sm text-blue-700\">\n                      This payment will be marked as cash payment by admin. No online processing required.\n                    </p>\n                  </div>\n                )}\n\n                {/* Security Notice */}\n                <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <Shield className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-sm font-medium text-green-800\">Secure Payment</span>\n                  </div>\n                  <p className=\"text-xs text-green-700 mt-1\">\n                    Your payment information is encrypted and secure.\n                  </p>\n                </div>\n\n                {/* Pay Button */}\n                <Button \n                  onClick={handlePayment}\n                  disabled={processing || processPaymentMutation.isPending || paidAmount <= 0}\n                  className=\"w-full h-12 text-lg font-semibold\"\n                  size=\"lg\"\n                >\n                  {processing || processPaymentMutation.isPending ? (\n                    <>\n                      <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Processing Payment...\n                    </>\n                  ) : paidAmount <= 0 ? (\n                    \"Enter amount to pay\"\n                  ) : (\n                    <>\n                      <Lock className=\"h-4 w-4 mr-2\" />\n                      Pay ₹{paidAmount.toLocaleString()} Now\n                    </>\n                  )}\n                </Button>\n                \n                {Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount - paidAmount) > 0 && paidAmount > 0 && (\n                  <div className=\"text-center text-sm text-gray-600 mt-2\">\n                    <p>Remaining balance of ₹{Math.max(0, (totalFromUrl || booking?.totalAmount || 0) - discountAmount - paidAmount).toLocaleString()} can be paid later</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n\n      {/* Receipt Modal */}\n      {lastPaymentId && (\n        <ReceiptModal\n          isOpen={showReceiptModal}\n          onClose={() => setShowReceiptModal(false)}\n          paymentId={lastPaymentId}\n          receiptData={receiptData}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":31548},"client/src/pages/PaymentPage.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation, useRoute } from 'wouter';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Separator } from '@/components/ui/separator';\nimport { ArrowLeft, Calendar, Clock, Users, MapPin, CreditCard, Smartphone, Building2 } from 'lucide-react';\nimport { useAuth } from '@/hooks/useAuth';\nimport { MockPaymentForm } from '@/components/MockPaymentForm';\n\ninterface BookingDetails {\n  id: number;\n  facilityName: string;\n  facilityType: string;\n  startDate: string;\n  endDate: string;\n  participantCount: number;\n  totalAmount: number;\n  paidAmount: number;\n  discountAmount: number;\n  paymentStatus: string;\n  planType: string;\n  groundLocation?: string;\n  bookingType: string;\n  slots?: Array<{\n    bookingDate: string;\n    startTime: string;\n    endTime: string;\n  }>;\n}\n\nexport default function PaymentPage() {\n  const [location, setLocation] = useLocation();\n  const [match, params] = useRoute('/payment/:bookingId');\n  const [booking, setBooking] = useState<BookingDetails | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string>('');\n  const { user } = useAuth();\n\n  useEffect(() => {\n    if (!params?.bookingId) {\n      setError('No booking ID provided');\n      setLoading(false);\n      return;\n    }\n\n    const fetchBookingDetails = async () => {\n      try {\n        const response = await fetch(`/api/bookings/${params.bookingId}`, {\n          credentials: 'include'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch booking details');\n        }\n        const bookingData = await response.json();\n        setBooking(bookingData);\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Failed to load booking');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchBookingDetails();\n  }, [params?.bookingId]);\n\n\n\n\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n          <p>Loading payment details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !booking) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <Card className=\"w-full max-w-md\">\n          <CardContent className=\"p-8 text-center\">\n            <p className=\"text-red-600 mb-4\">Error loading booking</p>\n            <p className=\"text-sm text-gray-600 mb-4\">{error}</p>\n            <Button onClick={() => setLocation('/profile?tab=bookings')}>\n              Go Back\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Calculate remaining balance\n  const remainingBalance = booking.totalAmount - (booking.paidAmount || 0) - (booking.discountAmount || 0);\n  const isPartiallyPaid = (booking.paidAmount || 0) > 0;\n  \n  // Get the first slot for display (since booking might have multiple slots)\n  const firstSlot = booking.slots?.[0];\n  const bookingDate = firstSlot ? firstSlot.bookingDate : booking.startDate;\n  const startTime = firstSlot ? firstSlot.startTime : \"00:00\";\n  const endTime = firstSlot ? firstSlot.endTime : \"23:59\";\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        {/* Header */}\n        <div className=\"flex items-center mb-6\">\n          <Button \n            variant=\"ghost\" \n            onClick={() => setLocation('/profile?tab=bookings')}\n            className=\"mr-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Bookings\n          </Button>\n          <h1 className=\"text-2xl font-bold\">\n            {isPartiallyPaid ? 'Complete Remaining Payment' : 'Complete Payment'}\n          </h1>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 gap-8\">\n          {/* Booking Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Booking Summary</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <h3 className=\"font-semibold text-lg\">{booking.facilityName || 'Sports Facility'}</h3>\n                <p className=\"text-gray-600\">{booking.facilityType || 'Sports Activity'}</p>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center text-sm\">\n                  <Calendar className=\"h-4 w-4 mr-2 text-gray-500\" />\n                  <span>{new Date(bookingDate).toLocaleDateString()}</span>\n                </div>\n                \n                <div className=\"flex items-center text-sm\">\n                  <Clock className=\"h-4 w-4 mr-2 text-gray-500\" />\n                  <span>{startTime} - {endTime}</span>\n                </div>\n                \n                <div className=\"flex items-center text-sm\">\n                  <Users className=\"h-4 w-4 mr-2 text-gray-500\" />\n                  <span>{booking.participantCount} participant(s)</span>\n                </div>\n                \n                <div className=\"flex items-center text-sm\">\n                  <Building2 className=\"h-4 w-4 mr-2 text-gray-500\" />\n                  <span className=\"capitalize\">{booking.bookingType} booking</span>\n                </div>\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Plan Type</span>\n                  <span className=\"capitalize\">{booking.planType}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Total Amount</span>\n                  <span>₹{booking.totalAmount.toLocaleString()}</span>\n                </div>\n                {isPartiallyPaid && (\n                  <>\n                    <div className=\"flex justify-between text-sm text-green-600\">\n                      <span>Amount Paid</span>\n                      <span>₹{(booking.paidAmount || 0).toLocaleString()}</span>\n                    </div>\n                    {(booking.discountAmount || 0) > 0 && (\n                      <div className=\"flex justify-between text-sm text-blue-600\">\n                        <span>Discount Applied</span>\n                        <span>₹{booking.discountAmount.toLocaleString()}</span>\n                      </div>\n                    )}\n                  </>\n                )}\n                <div className=\"flex justify-between font-semibold text-lg text-red-600 border-t pt-2\">\n                  <span>{isPartiallyPaid ? 'Remaining Balance' : 'Amount Due'}</span>\n                  <span>₹{remainingBalance.toLocaleString()}</span>\n                </div>\n              </div>\n\n              {/* Payment Status */}\n              <div className={`mt-6 p-4 rounded-lg ${\n                booking.paymentStatus === 'pending' ? 'bg-yellow-50' :\n                booking.paymentStatus === 'partial' ? 'bg-orange-50' :\n                'bg-green-50'\n              }`}>\n                <h4 className={`font-medium mb-2 ${\n                  booking.paymentStatus === 'pending' ? 'text-yellow-900' :\n                  booking.paymentStatus === 'partial' ? 'text-orange-900' :\n                  'text-green-900'\n                }`}>\n                  Payment Status: {booking.paymentStatus?.toUpperCase()}\n                </h4>\n                <div className={`text-sm space-y-1 ${\n                  booking.paymentStatus === 'pending' ? 'text-yellow-700' :\n                  booking.paymentStatus === 'partial' ? 'text-orange-700' :\n                  'text-green-700'\n                }`}>\n                  <p>User: {user?.firstName || 'User'}</p>\n                  <p>Email: {user?.email || 'Not provided'}</p>\n                  <p>Booking ID: #{booking.id}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Form */}\n          <MockPaymentForm\n            bookingId={booking.id}\n            amount={remainingBalance}\n            currency=\"INR\"\n            onSuccess={() => {\n              setLocation('/profile?tab=bookings');\n            }}\n            onCancel={() => {\n              setLocation('/profile?tab=bookings');\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8547},"client/src/pages/PendingPayments.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport Navbar from \"@/components/Navbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ArrowLeft, CreditCard, Clock, AlertCircle, Search, Filter, Calendar, MapPin, Users } from \"lucide-react\";\n\ninterface PendingBooking {\n  id: number;\n  facilityName: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  participants: number;\n  totalAmount: number;\n  balanceDue: number;\n  paidAmount: number;\n  discountAmount: number;\n  planType: string;\n  bookingType: string;\n  status: string;\n  paymentStatus: string;\n  createdAt: string;\n  user: {\n    firstName: string;\n    lastName: string;\n    email: string;\n  };\n}\n\nexport default function PendingPayments() {\n  const { user, isAuthenticated } = useAuth();\n  const [, setLocation] = useLocation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"created_desc\");\n  const [activeTab, setActiveTab] = useState<string>(\"pending\");\n\n  // Fetch pending payments\n  const { data: pendingBookings = [], isLoading: pendingLoading, error: pendingError } = useQuery<PendingBooking[]>({\n    queryKey: [\"/api/bookings/pending-payments\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/bookings/pending-payments\", {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch pending payments');\n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Fetch all payments\n  const { data: allBookings = [], isLoading: allLoading, error: allError } = useQuery<PendingBooking[]>({\n    queryKey: [\"/api/bookings/all-payments\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/bookings/all-payments\", {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch all payments');\n      return response.json();\n    },\n    enabled: isAuthenticated,\n  });\n\n  // Get current bookings based on active tab\n  const currentBookings = activeTab === \"pending\" ? pendingBookings : allBookings;\n  const isLoading = activeTab === \"pending\" ? pendingLoading : allLoading;\n  const error = activeTab === \"pending\" ? pendingError : allError;\n\n  // Filter and sort bookings\n  const filteredBookings = currentBookings\n    .filter(booking => {\n      const matchesSearch = \n        booking.facilityName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        booking.id.toString().includes(searchTerm) ||\n        `${booking.user.firstName} ${booking.user.lastName}`.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesStatus = statusFilter === \"all\" || booking.paymentStatus === statusFilter;\n      \n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"created_desc\":\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case \"created_asc\":\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case \"amount_desc\":\n          return b.totalAmount - a.totalAmount;\n        case \"amount_asc\":\n          return a.totalAmount - b.totalAmount;\n        case \"date_desc\":\n          return new Date(b.bookingDate).getTime() - new Date(a.bookingDate).getTime();\n        case \"date_asc\":\n          return new Date(a.bookingDate).getTime() - new Date(b.bookingDate).getTime();\n        default:\n          return 0;\n      }\n    });\n\n  const handlePayNow = (bookingId: number) => {\n    setLocation(`/payment/${bookingId}`);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8 text-center\">\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"p-8\">\n              <AlertCircle className=\"h-12 w-12 text-orange-500 mx-auto mb-4\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Authentication Required</h2>\n              <p className=\"text-gray-600 mb-4\">Please log in to view pending payments.</p>\n              <Button onClick={() => window.location.href = \"/api/login\"}>\n                Log In\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n                <p className=\"text-gray-600\">Loading pending payments...</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Navbar />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"max-w-6xl mx-auto text-center\">\n            <Card>\n              <CardContent className=\"p-8\">\n                <AlertCircle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                <h2 className=\"text-xl font-semibold mb-2\">Error Loading Payments</h2>\n                <p className=\"text-gray-600 mb-4\">Failed to load pending payments. Please try again.</p>\n                <Button onClick={() => window.location.reload()}>\n                  Retry\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Navbar />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          {/* Header */}\n          <div className=\"flex items-center gap-4 mb-6\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => setLocation('/profile?tab=bookings')}\n            >\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Profile\n            </Button>\n            <div>\n              <h1 className=\"text-2xl font-bold\">Payment Management</h1>\n              <p className=\"text-gray-600\">\n                Manage your payments and payment history\n              </p>\n            </div>\n          </div>\n\n          {/* Tabs */}\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"pending\" className=\"flex items-center gap-2\">\n                <Clock className=\"h-4 w-4\" />\n                Pending Payments ({pendingBookings.length})\n              </TabsTrigger>\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-4 w-4\" />\n                All Payments ({allBookings.length})\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"pending\" className=\"space-y-6\">\n              <PaymentContent \n                bookings={pendingBookings}\n                isLoading={pendingLoading}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                statusFilter={statusFilter}\n                setStatusFilter={setStatusFilter}\n                sortBy={sortBy}\n                setSortBy={setSortBy}\n                handlePayNow={handlePayNow}\n                isPending={true}\n              />\n            </TabsContent>\n\n            <TabsContent value=\"all\" className=\"space-y-6\">\n              <PaymentContent \n                bookings={allBookings}\n                isLoading={allLoading}\n                searchTerm={searchTerm}\n                setSearchTerm={setSearchTerm}\n                statusFilter={statusFilter}\n                setStatusFilter={setStatusFilter}\n                sortBy={sortBy}\n                setSortBy={setSortBy}\n                handlePayNow={handlePayNow}\n                isPending={false}\n              />\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// PaymentContent component for both tabs\ninterface PaymentContentProps {\n  bookings: PendingBooking[];\n  isLoading: boolean;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  statusFilter: string;\n  setStatusFilter: (value: string) => void;\n  sortBy: string;\n  setSortBy: (value: string) => void;\n  handlePayNow: (bookingId: number) => void;\n  isPending: boolean;\n}\n\nfunction PaymentContent({ \n  bookings, \n  isLoading, \n  searchTerm, \n  setSearchTerm, \n  statusFilter, \n  setStatusFilter, \n  sortBy, \n  setSortBy, \n  handlePayNow, \n  isPending \n}: PaymentContentProps) {\n  // Filter and sort bookings\n  const filteredBookings = bookings\n    .filter(booking => {\n      const matchesSearch = \n        (booking.facilityName?.toLowerCase() || '').includes(searchTerm.toLowerCase()) ||\n        booking.id.toString().includes(searchTerm) ||\n        `${booking.user?.firstName || ''} ${booking.user?.lastName || ''}`.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesStatus = statusFilter === \"all\" || booking.paymentStatus === statusFilter;\n      \n      return matchesSearch && matchesStatus;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"created_desc\":\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case \"created_asc\":\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case \"amount_desc\":\n          return b.totalAmount - a.totalAmount;\n        case \"amount_asc\":\n          return a.totalAmount - b.totalAmount;\n        case \"date_desc\":\n          return new Date(b.bookingDate).getTime() - new Date(a.bookingDate).getTime();\n        case \"date_asc\":\n          return new Date(a.bookingDate).getTime() - new Date(b.bookingDate).getTime();\n        default:\n          return 0;\n      }\n    });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-12\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading payments...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search bookings...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n              />\n            </div>\n            \n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger>\n                <Filter className=\"h-4 w-4 mr-2\" />\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Status</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"partial\">Partial</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"failed\">Failed</SelectItem>\n                <SelectItem value=\"refunded\">Refunded</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Sort by\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"created_desc\">Newest First</SelectItem>\n                <SelectItem value=\"created_asc\">Oldest First</SelectItem>\n                <SelectItem value=\"amount_desc\">Highest Amount</SelectItem>\n                <SelectItem value=\"amount_asc\">Lowest Amount</SelectItem>\n                <SelectItem value=\"date_desc\">Latest Booking Date</SelectItem>\n                <SelectItem value=\"date_asc\">Earliest Booking Date</SelectItem>\n              </SelectContent>\n            </Select>\n            \n            <div className=\"text-sm text-gray-600 flex flex-col\">\n              {isPending ? (\n                <>\n                  <div>Outstanding Amount: ₹{filteredBookings.reduce((sum, booking) => sum + Number(booking.balanceDue || 0), 0).toLocaleString()}</div>\n                  <div>Total Booking Value: ₹{filteredBookings.reduce((sum, booking) => sum + Number(booking.totalAmount || 0), 0).toLocaleString()}</div>\n                </>\n              ) : (\n                <>\n                  <div>Total Revenue: ₹{filteredBookings.reduce((sum, booking) => sum + Number(booking.totalAmount || 0), 0).toLocaleString()}</div>\n                  <div>Amount Collected: ₹{filteredBookings.reduce((sum, booking) => sum + Number(booking.paidAmount || 0), 0).toLocaleString()}</div>\n                </>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Payments List */}\n      {filteredBookings.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <CreditCard className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">\n              {isPending ? \"No Pending Payments\" : \"No Payments Found\"}\n            </h3>\n            <p className=\"text-gray-600 mb-4\">\n              {searchTerm || statusFilter !== \"all\" \n                ? \"No payments match your current filters.\" \n                : isPending \n                  ? \"All your bookings are paid up! Great job staying on top of your payments.\"\n                  : \"You don't have any payment records yet.\"}\n            </p>\n            {(searchTerm || statusFilter !== \"all\") && (\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setSearchTerm(\"\");\n                  setStatusFilter(\"all\");\n                }}\n              >\n                Clear Filters\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"grid gap-4\">\n          {filteredBookings.map((booking) => (\n            <Card key={booking.id} className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex flex-col lg:flex-row lg:items-center justify-between gap-4\">\n                  {/* Booking Details */}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-3 mb-3\">\n                      <h3 className=\"text-lg font-semibold\">{booking.facilityName}</h3>\n                      <Badge variant={\n                        booking.paymentStatus === 'paid' ? 'default' :\n                        booking.paymentStatus === 'partial' ? 'secondary' :\n                        booking.paymentStatus === 'pending' ? 'destructive' :\n                        booking.paymentStatus === 'failed' ? 'destructive' :\n                        'outline'\n                      }>\n                        {booking.paymentStatus}\n                      </Badge>\n                      <Badge variant=\"outline\">\n                        #{booking.id}\n                      </Badge>\n                    </div>\n                    \n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 text-sm text-gray-600\">\n                      <div className=\"flex items-center gap-2\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">\n                            {booking.bookingDate ? new Date(booking.bookingDate).toLocaleDateString() : 'Invalid Date'}\n                          </div>\n                          <div>{booking.startTime || 'N/A'} - {booking.endTime || 'N/A'}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Clock className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">{Math.round((booking.duration || 0) / 60)}h duration</div>\n                          <div className=\"capitalize\">{booking.planType} plan</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <Users className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">{booking.participants} people</div>\n                          <div className=\"capitalize\">{booking.bookingType}</div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center gap-2\">\n                        <MapPin className=\"h-4 w-4\" />\n                        <div>\n                          <div className=\"font-medium\">Total</div>\n                          <div>₹{Number(booking.totalAmount || 0).toLocaleString()}</div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* Payment Info and Action */}\n                  <div className=\"flex flex-col lg:flex-row items-end lg:items-center gap-4\">\n                    <div className=\"text-right\">\n                      {isPending || Number(booking.balanceDue || 0) > 0 ? (\n                        <div className=\"text-2xl font-bold text-red-600\">\n                          ₹{Number(booking.balanceDue || 0).toLocaleString()}\n                        </div>\n                      ) : (\n                        <div className=\"text-2xl font-bold text-green-600\">\n                          Fully Paid\n                        </div>\n                      )}\n                      <div className=\"text-sm text-gray-600\">\n                        {isPending || Number(booking.balanceDue || 0) > 0 ? \"Due Amount\" : \"Status\"}\n                      </div>\n                      {Number(booking.paidAmount || 0) > 0 && (\n                        <div className=\"text-xs text-green-600\">\n                          ₹{Number(booking.paidAmount || 0).toLocaleString()} paid\n                        </div>\n                      )}\n                      {Number(booking.discountAmount || 0) > 0 && (\n                        <div className=\"text-xs text-blue-600\">\n                          ₹{Number(booking.discountAmount || 0).toLocaleString()} discount\n                        </div>\n                      )}\n                    </div>\n                    \n                    {(isPending || Number(booking.balanceDue || 0) > 0) && (\n                      <Button\n                        onClick={() => handlePayNow(booking.id)}\n                        className=\"bg-green-600 hover:bg-green-700 whitespace-nowrap\"\n                      >\n                        <CreditCard className=\"h-4 w-4 mr-2\" />\n                        Pay Now\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":20112},"client/src/pages/admin/NotificationManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Bell,\n  Send,\n  Calendar,\n  CreditCard,\n  AlertCircle,\n  CheckCircle,\n  Clock,\n  Users\n} from \"lucide-react\";\n\nexport default function NotificationManagement() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [isProcessing, setIsProcessing] = useState<string | null>(null);\n\n  // Send booking reminders mutation\n  const sendBookingRemindersMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/send-booking-reminders\");\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Booking Reminders Sent\",\n        description: data.message,\n      });\n      setIsProcessing(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send booking reminders\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(null);\n    },\n  });\n\n  // Send payment reminders mutation\n  const sendPaymentRemindersMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/send-payment-reminders\");\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Payment Reminders Sent\",\n        description: data.message,\n      });\n      setIsProcessing(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send payment reminders\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(null);\n    },\n  });\n\n  // Process expired bookings mutation\n  const processExpiredBookingsMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/admin/process-expired-bookings\");\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Expired Bookings Processed\",\n        description: data.message,\n      });\n      setIsProcessing(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to process expired bookings\",\n        variant: \"destructive\",\n      });\n      setIsProcessing(null);\n    },\n  });\n\n  const handleSendBookingReminders = () => {\n    setIsProcessing(\"booking-reminders\");\n    sendBookingRemindersMutation.mutate();\n  };\n\n  const handleSendPaymentReminders = () => {\n    setIsProcessing(\"payment-reminders\");\n    sendPaymentRemindersMutation.mutate();\n  };\n\n  const handleProcessExpiredBookings = () => {\n    setIsProcessing(\"expired-bookings\");\n    processExpiredBookingsMutation.mutate();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 lg:ml-64 p-6 overflow-auto\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Notification Management</h1>\n              <p className=\"text-gray-600\">Send reminders and manage notifications</p>\n            </div>\n          </div>\n\n          {/* Notification Actions */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n            \n            {/* Booking Reminders */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Calendar className=\"h-5 w-5 text-blue-600\" />\n                  Booking Reminders\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    Send day-before reminders to users with confirmed bookings for tomorrow. \n                    Includes payment reminders for pending payments.\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      Auto-sends to upcoming bookings\n                    </Badge>\n                  </div>\n                  \n                  <Button\n                    onClick={handleSendBookingReminders}\n                    disabled={isProcessing === \"booking-reminders\"}\n                    className=\"w-full\"\n                  >\n                    {isProcessing === \"booking-reminders\" ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Send Booking Reminders\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Reminders */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <CreditCard className=\"h-5 w-5 text-orange-600\" />\n                  Payment Reminders\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    Send payment reminders to users with confirmed bookings that have \n                    pending or partial payment status.\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      <AlertCircle className=\"h-3 w-3 mr-1\" />\n                      Targets unpaid bookings\n                    </Badge>\n                  </div>\n                  \n                  <Button\n                    onClick={handleSendPaymentReminders}\n                    disabled={isProcessing === \"payment-reminders\"}\n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    {isProcessing === \"payment-reminders\" ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary mr-2\"></div>\n                        Sending...\n                      </>\n                    ) : (\n                      <>\n                        <Send className=\"h-4 w-4 mr-2\" />\n                        Send Payment Reminders\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Expired Bookings */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertCircle className=\"h-5 w-5 text-red-600\" />\n                  Expired Bookings\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    Automatically cancel bookings that are past their scheduled time \n                    and still have pending payment status.\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"destructive\" className=\"text-xs\">\n                      <AlertCircle className=\"h-3 w-3 mr-1\" />\n                      Auto-cancels overdue bookings\n                    </Badge>\n                  </div>\n                  \n                  <Button\n                    onClick={handleProcessExpiredBookings}\n                    disabled={isProcessing === \"expired-bookings\"}\n                    variant=\"destructive\"\n                    className=\"w-full\"\n                  >\n                    {isProcessing === \"expired-bookings\" ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Processing...\n                      </>\n                    ) : (\n                      <>\n                        <CheckCircle className=\"h-4 w-4 mr-2\" />\n                        Process Expired Bookings\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Information Panel */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notification System Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Automated Features</h3>\n                  <ul className=\"space-y-2 text-sm text-gray-600\">\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      Day-before booking reminders\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      Payment pending notifications\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      Booking cancellation alerts\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                      Queue position updates\n                    </li>\n                  </ul>\n                </div>\n                \n                <div>\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Smart Prevention</h3>\n                  <ul className=\"space-y-2 text-sm text-gray-600\">\n                    <li className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      Duplicate notification prevention\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      Auto-expiry of overdue bookings\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      Payment deadline enforcement\n                    </li>\n                    <li className=\"flex items-center gap-2\">\n                      <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n                      Real-time notification delivery\n                    </li>\n                  </ul>\n                </div>\n              </div>\n              \n              <div className=\"mt-6 p-4 bg-blue-50 rounded-lg\">\n                <div className=\"flex items-start gap-3\">\n                  <Bell className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                  <div>\n                    <h4 className=\"font-medium text-blue-900\">Ready for Email Integration</h4>\n                    <p className=\"text-sm text-blue-700 mt-1\">\n                      The notification system is prepared for SendGrid email integration. \n                      Once configured, notifications will be sent via email alongside in-app delivery.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":12169},"client/src/pages/admin/payments.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { MockPaymentForm } from \"@/components/MockPaymentForm\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"@/components/ui/tabs\";\nimport { \n  IndianRupee, \n  CreditCard, \n  Clock, \n  CheckCircle, \n  XCircle,\n  AlertCircle,\n  Plus,\n  User,\n  Calendar,\n  Building2,\n  Download,\n  FileText,\n  FileSpreadsheet,\n  Printer,\n  Eye,\n  Receipt,\n  History\n} from \"lucide-react\";\nimport { exportPaymentsToPDF, exportPaymentsToExcel, printPayments } from \"@/lib/exportUtils\";\nimport { PaymentHistoryModal } from \"@/components/PaymentHistoryModal\";\nimport jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\nimport * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\ninterface Payment {\n  id: number;\n  bookingId: number;\n  userId: string;\n  amount: string;\n  paymentMethod: string;\n  transactionId?: string;\n  status: string;\n  discountAmount?: string;\n  discountReason?: string;\n  processedAt?: string;\n  createdAt: string;\n  userName: string;\n  userEmail: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n}\n\ninterface PendingPayment {\n  id: number;\n  userId: string;\n  groundId: number;\n  bookingType: string;\n  planType: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  participantCount: number;\n  totalAmount: string;\n  paidAmount?: string;\n  discountAmount?: string;\n  status: string;\n  paymentStatus: string;\n  paymentMethod?: string;\n  createdAt: string;\n  userName: string;\n  userEmail: string;\n  userPhone?: string;\n  groundName: string;\n  sportName: string;\n  pendingAmount: number;\n}\n\n// Export functions for pending payments\nconst exportPendingPaymentsToPDF = (data: PendingPayment[]) => {\n  const doc = new jsPDF();\n  \n  // Add title\n  doc.setFontSize(20);\n  doc.text('Pending Payments Report', 20, 20);\n  \n  // Add generation date\n  doc.setFontSize(10);\n  doc.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, 20, 30);\n  \n  // Prepare table data\n  const tableData = data.map(payment => [\n    payment.id.toString(),\n    payment.userName,\n    payment.groundName,\n    new Date(payment.bookingDate).toLocaleDateString(),\n    `${payment.startTime} - ${payment.endTime}`,\n    `₹${Number(payment.totalAmount).toLocaleString()}`,\n    `₹${payment.pendingAmount.toLocaleString()}`,\n    payment.paymentStatus.charAt(0).toUpperCase() + payment.paymentStatus.slice(1)\n  ]);\n  \n  // Add table\n  autoTable(doc, {\n    head: [['ID', 'Customer', 'Facility', 'Date', 'Time', 'Total', 'Pending', 'Status']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 8 },\n    headStyles: { fillColor: [59, 130, 246] }\n  });\n  \n  doc.save('pending-payments-report.pdf');\n};\n\nconst exportPendingPaymentsToExcel = (data: PendingPayment[]) => {\n  const worksheetData = data.map(payment => ({\n    'Booking ID': payment.id,\n    'Customer': payment.userName,\n    'Email': payment.userEmail,\n    'Facility': payment.groundName,\n    'Sport': payment.sportName,\n    'Date': new Date(payment.bookingDate).toLocaleDateString(),\n    'Time': `${payment.startTime} - ${payment.endTime}`,\n    'Total Amount': Number(payment.totalAmount),\n    'Pending Amount': payment.pendingAmount,\n    'Payment Status': payment.paymentStatus,\n    'Created': new Date(payment.createdAt).toLocaleDateString()\n  }));\n  \n  const worksheet = XLSX.utils.json_to_sheet(worksheetData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'Pending Payments');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const data_blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(data_blob, 'pending-payments-report.xlsx');\n};\n\nconst printPendingPayments = (data: PendingPayment[]) => {\n  const printContent = `\n    <html>\n      <head>\n        <title>Pending Payments Report</title>\n        <style>\n          body { font-family: Arial, sans-serif; margin: 20px; }\n          h1 { color: #1f2937; margin-bottom: 10px; }\n          .meta { color: #6b7280; margin-bottom: 20px; }\n          table { width: 100%; border-collapse: collapse; }\n          th, td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }\n          th { background-color: #f3f4f6; font-weight: bold; }\n          @media print { body { margin: 0; } }\n        </style>\n      </head>\n      <body>\n        <h1>Pending Payments Report</h1>\n        <div class=\"meta\">Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>\n        <table>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Customer</th>\n              <th>Facility</th>\n              <th>Date</th>\n              <th>Time</th>\n              <th>Total</th>\n              <th>Pending</th>\n              <th>Status</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${data.map(payment => `\n              <tr>\n                <td>${payment.id}</td>\n                <td>${payment.userName}</td>\n                <td>${payment.groundName}</td>\n                <td>${new Date(payment.bookingDate).toLocaleDateString()}</td>\n                <td>${payment.startTime} - ${payment.endTime}</td>\n                <td>₹${Number(payment.totalAmount).toLocaleString()}</td>\n                <td>₹${payment.pendingAmount.toLocaleString()}</td>\n                <td>${payment.paymentStatus.charAt(0).toUpperCase() + payment.paymentStatus.slice(1)}</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      </body>\n    </html>\n  `;\n  \n  const printWindow = window.open('', '_blank');\n  if (printWindow) {\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n    printWindow.print();\n  }\n};\n\n// Export functions for all payments\nconst exportAllPaymentsToPDF = (data: Payment[]) => {\n  const doc = new jsPDF();\n  \n  // Add title\n  doc.setFontSize(20);\n  doc.text('All Payments Report', 20, 20);\n  \n  // Add generation date\n  doc.setFontSize(10);\n  doc.text(`Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}`, 20, 30);\n  \n  // Prepare table data\n  const tableData = data.map(payment => [\n    payment.id.toString(),\n    payment.bookingId.toString(),\n    payment.userName,\n    `₹${Number(payment.amount).toLocaleString()}`,\n    payment.paymentMethod,\n    payment.transactionId || 'N/A',\n    payment.status.charAt(0).toUpperCase() + payment.status.slice(1),\n    new Date(payment.createdAt).toLocaleDateString()\n  ]);\n  \n  // Add table\n  autoTable(doc, {\n    head: [['Payment ID', 'Booking ID', 'Customer', 'Amount', 'Method', 'Transaction ID', 'Status', 'Date']],\n    body: tableData,\n    startY: 40,\n    styles: { fontSize: 8 },\n    headStyles: { fillColor: [59, 130, 246] }\n  });\n  \n  doc.save('all-payments-report.pdf');\n};\n\nconst exportAllPaymentsToExcel = (data: Payment[]) => {\n  const worksheetData = data.map(payment => ({\n    'Payment ID': payment.id,\n    'Booking ID': payment.bookingId,\n    'Customer': payment.userName,\n    'Email': payment.userEmail,\n    'Amount': Number(payment.amount),\n    'Payment Method': payment.paymentMethod,\n    'Transaction ID': payment.transactionId || '',\n    'Status': payment.status,\n    'Discount Amount': Number(payment.discountAmount || 0),\n    'Discount Reason': payment.discountReason || '',\n    'Processed At': payment.processedAt ? new Date(payment.processedAt).toLocaleDateString() : '',\n    'Created': new Date(payment.createdAt).toLocaleDateString()\n  }));\n  \n  const worksheet = XLSX.utils.json_to_sheet(worksheetData);\n  const workbook = XLSX.utils.book_new();\n  XLSX.utils.book_append_sheet(workbook, worksheet, 'All Payments');\n  \n  const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n  const data_blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n  saveAs(data_blob, 'all-payments-report.xlsx');\n};\n\nconst printAllPayments = (data: Payment[]) => {\n  const printContent = `\n    <html>\n      <head>\n        <title>All Payments Report</title>\n        <style>\n          body { font-family: Arial, sans-serif; margin: 20px; }\n          h1 { color: #1f2937; margin-bottom: 10px; }\n          .meta { color: #6b7280; margin-bottom: 20px; }\n          table { width: 100%; border-collapse: collapse; }\n          th, td { border: 1px solid #d1d5db; padding: 8px; text-align: left; }\n          th { background-color: #f3f4f6; font-weight: bold; }\n          @media print { body { margin: 0; } }\n        </style>\n      </head>\n      <body>\n        <h1>All Payments Report</h1>\n        <div class=\"meta\">Generated: ${new Date().toLocaleDateString()} ${new Date().toLocaleTimeString()}</div>\n        <table>\n          <thead>\n            <tr>\n              <th>Payment ID</th>\n              <th>Booking ID</th>\n              <th>Customer</th>\n              <th>Amount</th>\n              <th>Method</th>\n              <th>Transaction ID</th>\n              <th>Status</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>\n            ${data.map(payment => `\n              <tr>\n                <td>${payment.id}</td>\n                <td>${payment.bookingId}</td>\n                <td>${payment.userName}</td>\n                <td>₹${Number(payment.amount).toLocaleString()}</td>\n                <td>${payment.paymentMethod}</td>\n                <td>${payment.transactionId || 'N/A'}</td>\n                <td>${payment.status.charAt(0).toUpperCase() + payment.status.slice(1)}</td>\n                <td>${new Date(payment.createdAt).toLocaleDateString()}</td>\n              </tr>\n            `).join('')}\n          </tbody>\n        </table>\n      </body>\n    </html>\n  `;\n  \n  const printWindow = window.open('', '_blank');\n  if (printWindow) {\n    printWindow.document.write(printContent);\n    printWindow.document.close();\n    printWindow.print();\n  }\n};\n\nexport default function AdminPayments() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const [collectDialogOpen, setCollectDialogOpen] = useState(false);\n  const [selectedBooking, setSelectedBooking] = useState<PendingPayment | null>(null);\n  \n  // Filtering and sorting state\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [methodFilter, setMethodFilter] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"date\");\n  const [sortOrder, setSortOrder] = useState<string>(\"desc\");\n\n  // Fetch all payments\n  const { data: payments = [], isLoading: paymentsLoading } = useQuery<Payment[]>({\n    queryKey: [\"/api/admin/payments\"],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Fetch pending payments\n  const { data: pendingPayments = [], isLoading: pendingLoading } = useQuery<PendingPayment[]>({\n    queryKey: [\"/api/admin/pending-payments\"],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Filter and sort payments  \n  const filteredPayments = payments.filter(payment => {\n    if (statusFilter !== \"all\" && payment.status !== statusFilter) return false;\n    if (methodFilter !== \"all\" && payment.paymentMethod !== methodFilter) return false;\n    return true;\n  }).sort((a, b) => {\n    let aValue: string | number, bValue: string | number;\n    \n    switch (sortBy) {\n      case \"amount\":\n        aValue = Number(a.amount);\n        bValue = Number(b.amount);\n        break;\n      case \"date\":\n        aValue = new Date(a.createdAt).getTime();\n        bValue = new Date(b.createdAt).getTime();\n        break;\n      case \"status\":\n        aValue = a.status;\n        bValue = b.status;\n        break;\n      default:\n        aValue = a.id;\n        bValue = b.id;\n    }\n    \n    if (sortOrder === \"asc\") {\n      return aValue > bValue ? 1 : -1;\n    } else {\n      return aValue < bValue ? 1 : -1;\n    }\n  });\n\n  // Calculate summary statistics - only count completed payments to match dashboard and reports\n  const totalRevenue = payments.reduce((sum, payment) => \n    sum + (payment.status === 'completed' ? Number(payment.amount) : 0), 0\n  );\n  \n  const pendingAmount = pendingPayments.reduce((sum, payment) => \n    sum + payment.pendingAmount, 0\n  );\n  \n  const totalDiscounts = payments.reduce((sum, payment) => \n    sum + Number(payment.discountAmount || 0), 0\n  );\n\n\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig: Record<string, { color: string; icon: React.ReactNode }> = {\n      completed: { color: \"bg-green-100 text-green-800\", icon: <CheckCircle className=\"h-3 w-3\" /> },\n      paid: { color: \"bg-green-100 text-green-800\", icon: <CheckCircle className=\"h-3 w-3\" /> },\n      pending: { color: \"bg-yellow-100 text-yellow-800\", icon: <Clock className=\"h-3 w-3\" /> },\n      failed: { color: \"bg-red-100 text-red-800\", icon: <XCircle className=\"h-3 w-3\" /> },\n      partial: { color: \"bg-orange-100 text-orange-800\", icon: <AlertCircle className=\"h-3 w-3\" /> },\n      refunded: { color: \"bg-blue-100 text-blue-800\", icon: <AlertCircle className=\"h-3 w-3\" /> },\n    };\n\n    const config = statusConfig[status] || statusConfig.pending;\n    return (\n      <Badge className={`${config.color} flex items-center gap-1`}>\n        {config.icon}\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${Number(amount).toLocaleString()}`;\n  };\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 p-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold\">Payments Management</h1>\n          <p className=\"text-gray-600 mt-2\">Manage all payments and collect pending amounts</p>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n                  <p className=\"text-2xl font-bold text-green-600\">₹{totalRevenue.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Clock className=\"h-8 w-8 text-orange-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Outstanding Amount</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">₹{pendingAmount.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <IndianRupee className=\"h-8 w-8 text-blue-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Discounts</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">₹{totalDiscounts.toLocaleString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <CreditCard className=\"h-8 w-8 text-purple-500\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Payments</p>\n                  <p className=\"text-2xl font-bold text-purple-600\">{payments.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"pending\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"pending\">\n              Pending Payments ({pendingPayments.length})\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\">\n              All Payments ({filteredPayments.length}/{payments.length})\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Pending Payments Tab */}\n          <TabsContent value=\"pending\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"h-5 w-5 text-orange-500\" />\n                    Pending Payments\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => printPendingPayments(pendingPayments)}\n                      className=\"flex items-center gap-2\"\n                      disabled={pendingPayments.length === 0}\n                    >\n                      <Printer className=\"h-4 w-4\" />\n                      Print\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => exportPendingPaymentsToPDF(pendingPayments)}\n                      className=\"flex items-center gap-2\"\n                      disabled={pendingPayments.length === 0}\n                    >\n                      <FileText className=\"h-4 w-4\" />\n                      PDF\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => exportPendingPaymentsToExcel(pendingPayments)}\n                      className=\"flex items-center gap-2\"\n                      disabled={pendingPayments.length === 0}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4\" />\n                      Excel\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {pendingLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading pending payments...</p>\n                  </div>\n                ) : pendingPayments.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <CheckCircle className=\"h-12 w-12 mx-auto mb-4 text-green-500\" />\n                    <p>No pending payments found!</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Booking ID</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Facility</TableHead>\n                          <TableHead>Date & Time</TableHead>\n                          <TableHead>Total Amount</TableHead>\n                          <TableHead>Pending Amount</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead className=\"text-center\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {pendingPayments.map((booking: PendingPayment) => (\n                          <TableRow key={booking.id}>\n                            <TableCell className=\"font-medium\">#{booking.id}</TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{booking.userName}</div>\n                                <div className=\"text-sm text-gray-500\">{booking.userEmail}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{booking.groundName}</div>\n                                <div className=\"text-sm text-gray-500\">{booking.sportName}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">\n                                  {new Date(booking.bookingDate).toLocaleDateString()}\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {booking.startTime} - {booking.endTime}\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>{formatCurrency(booking.totalAmount)}</TableCell>\n                            <TableCell className=\"font-medium text-orange-600\">\n                              {formatCurrency(booking.pendingAmount)}\n                            </TableCell>\n                            <TableCell>\n                              {getStatusBadge(booking.paymentStatus)}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center justify-center gap-1\">\n                                <Button\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    setSelectedBooking(booking);\n                                    setCollectDialogOpen(true);\n                                  }}\n                                  className=\"bg-green-600 hover:bg-green-700\"\n                                >\n                                  <Plus className=\"h-4 w-4 mr-1\" />\n                                  Collect\n                                </Button>\n                                <PaymentHistoryModal bookingId={booking.id} />\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* All Payments Tab */}\n          <TabsContent value=\"completed\">\n            <Card>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5 text-blue-500\" />\n                    All Payments\n                  </CardTitle>\n                  <div className=\"flex items-center gap-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => printPayments(payments, \"All Payments Report\")}\n                      className=\"flex items-center gap-2\"\n                      disabled={payments.length === 0}\n                    >\n                      <Printer className=\"h-4 w-4\" />\n                      Print\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => exportPaymentsToPDF(payments, \"All Payments Report\")}\n                      className=\"flex items-center gap-2\"\n                      disabled={payments.length === 0}\n                    >\n                      <FileText className=\"h-4 w-4\" />\n                      PDF\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => exportPaymentsToExcel(payments, \"All Payments Report\")}\n                      className=\"flex items-center gap-2\"\n                      disabled={payments.length === 0}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4\" />\n                      Excel\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              {/* Filter Controls */}\n              <div className=\"px-6 py-4 border-b\">\n                <div className=\"flex flex-wrap gap-4\">\n                  <div className=\"flex-1 min-w-[200px]\">\n                    <Label htmlFor=\"status-filter\">Filter by Status</Label>\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger id=\"status-filter\">\n                        <SelectValue placeholder=\"All Statuses\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Statuses</SelectItem>\n                        <SelectItem value=\"paid\">Paid</SelectItem>\n                        <SelectItem value=\"pending\">Pending</SelectItem>\n                        <SelectItem value=\"partial\">Partial</SelectItem>\n                        <SelectItem value=\"failed\">Failed</SelectItem>\n                        <SelectItem value=\"refunded\">Refunded</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-[200px]\">\n                    <Label htmlFor=\"method-filter\">Filter by Method</Label>\n                    <Select value={methodFilter} onValueChange={setMethodFilter}>\n                      <SelectTrigger id=\"method-filter\">\n                        <SelectValue placeholder=\"All Methods\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Methods</SelectItem>\n                        <SelectItem value=\"cash\">Cash</SelectItem>\n                        <SelectItem value=\"upi\">UPI</SelectItem>\n                        <SelectItem value=\"card\">Card</SelectItem>\n                        <SelectItem value=\"bank_transfer\">Bank Transfer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-[200px]\">\n                    <Label htmlFor=\"sort-by\">Sort by</Label>\n                    <Select value={sortBy} onValueChange={setSortBy}>\n                      <SelectTrigger id=\"sort-by\">\n                        <SelectValue placeholder=\"Sort by\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"date\">Date</SelectItem>\n                        <SelectItem value=\"amount\">Amount</SelectItem>\n                        <SelectItem value=\"status\">Status</SelectItem>\n                        <SelectItem value=\"id\">Payment ID</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-[150px]\">\n                    <Label htmlFor=\"sort-order\">Order</Label>\n                    <Select value={sortOrder} onValueChange={setSortOrder}>\n                      <SelectTrigger id=\"sort-order\">\n                        <SelectValue placeholder=\"Order\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"desc\">Newest First</SelectItem>\n                        <SelectItem value=\"asc\">Oldest First</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n              \n              <CardContent>\n                {paymentsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading payments...</p>\n                  </div>\n                ) : payments.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <CreditCard className=\"h-12 w-12 mx-auto mb-4\" />\n                    <p>No payments found!</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Payment ID</TableHead>\n                          <TableHead>Booking ID</TableHead>\n                          <TableHead>Customer</TableHead>\n                          <TableHead>Amount</TableHead>\n                          <TableHead>Method</TableHead>\n                          <TableHead>Transaction ID</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Date</TableHead>\n                          <TableHead className=\"text-center\">Actions</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {filteredPayments.map((payment: Payment) => (\n                          <TableRow key={payment.id}>\n                            <TableCell className=\"font-medium\">#{payment.id}</TableCell>\n                            <TableCell>#{payment.bookingId}</TableCell>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{payment.userName}</div>\n                                <div className=\"text-sm text-gray-500\">{payment.userEmail}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell className=\"font-medium\">\n                              {formatCurrency(payment.amount)}\n                              {payment.discountAmount && Number(payment.discountAmount) > 0 && (\n                                <div className=\"text-xs text-green-600\">\n                                  Discount: {formatCurrency(payment.discountAmount)}\n                                </div>\n                              )}\n                            </TableCell>\n                            <TableCell className=\"capitalize\">{payment.paymentMethod}</TableCell>\n                            <TableCell className=\"font-mono text-xs\">\n                              {payment.transactionId || '-'}\n                            </TableCell>\n                            <TableCell>\n                              {getStatusBadge(payment.status)}\n                            </TableCell>\n                            <TableCell>\n                              {new Date(payment.createdAt).toLocaleDateString()}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center justify-center gap-1\">\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => window.open(`/api/receipts/${payment.id}/preview`, '_blank')}\n                                  className=\"flex items-center gap-1\"\n                                  title=\"View Receipt\"\n                                >\n                                  <Eye className=\"h-4 w-4\" />\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => window.open(`/api/receipts/${payment.id}/pdf`, '_blank')}\n                                  className=\"flex items-center gap-1\"\n                                  title=\"Download Receipt PDF\"\n                                >\n                                  <Receipt className=\"h-4 w-4\" />\n                                </Button>\n                                <PaymentHistoryModal bookingId={payment.bookingId} />\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n\n        {/* Unified Payment Dialog */}\n        <Dialog open={collectDialogOpen} onOpenChange={setCollectDialogOpen}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Collect Payment - Booking #{selectedBooking?.id}</DialogTitle>\n            </DialogHeader>\n            {selectedBooking && (\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {/* Booking Summary */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg\">Booking Details</h3>\n                  <div className=\"p-4 bg-gray-50 rounded-lg space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Booking ID:</span>\n                      <span className=\"font-medium\">#{selectedBooking.id}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Customer:</span>\n                      <span className=\"font-medium\">{selectedBooking.userName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Email:</span>\n                      <span className=\"font-medium\">{selectedBooking.userEmail}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Facility:</span>\n                      <span className=\"font-medium\">{selectedBooking.groundName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Sport:</span>\n                      <span className=\"font-medium\">{selectedBooking.sportName}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Date & Time:</span>\n                      <span className=\"font-medium\">\n                        {new Date(selectedBooking.bookingDate).toLocaleDateString()} \n                        <br />\n                        {selectedBooking.startTime} - {selectedBooking.endTime}\n                      </span>\n                    </div>\n                    <hr />\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Total Amount:</span>\n                      <span className=\"font-medium\">{formatCurrency(selectedBooking.totalAmount)}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Amount Paid:</span>\n                      <span className=\"font-medium text-green-600\">\n                        {formatCurrency((parseFloat(selectedBooking.totalAmount) - selectedBooking.pendingAmount).toString())}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-sm text-gray-600\">Pending Amount:</span>\n                      <span className=\"font-bold text-orange-600\">\n                        {formatCurrency(selectedBooking.pendingAmount)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Unified Payment Form */}\n                <div>\n                  <MockPaymentForm\n                    bookingId={selectedBooking.id}\n                    amount={selectedBooking.pendingAmount}\n                    currency=\"INR\"\n                    onSuccess={() => {\n                      setCollectDialogOpen(false);\n                      // Refresh data\n                      queryClient.invalidateQueries({ queryKey: [\"/api/admin/payments\"] });\n                      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-payments\"] });\n                    }}\n                    onCancel={() => setCollectDialogOpen(false)}\n                  />\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":37675},"client/src/pages/admin/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport AdminSidebar from \"@/components/AdminSidebar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart, \n  PieChart, \n  Calendar, \n  Users, \n  IndianRupee, \n  TrendingUp, \n  Activity,\n  Download,\n  Filter,\n  FileText,\n  FileSpreadsheet,\n  Printer\n} from \"lucide-react\";\nimport {\n  exportRevenueToPDF,\n  exportRevenueBysportToPDF,\n  exportFacilityUsageToPDF,\n  exportMemberBookingsToPDF,\n  exportMemberPaymentsToPDF,\n  exportCouponUsageToPDF,\n  exportRevenueToExcel,\n  exportRevenueBySportToExcel,\n  exportFacilityUsageToExcel,\n  exportMemberBookingsToExcel,\n  exportMemberPaymentsToExcel,\n  exportCouponUsageToExcel,\n  printRevenue,\n  printRevenueBySport,\n  printFacilityUsage,\n  printMemberBookings,\n  printMemberPayments,\n  printCouponUsage\n} from \"@/lib/exportUtils\";\n\ninterface ReportFilters {\n  period: 'day' | 'week' | 'month';\n  startDate: string;\n  endDate: string;\n  userId?: string;\n}\n\nexport default function AdminReports() {\n  const { user } = useAuth();\n  const [filters, setFilters] = useState<ReportFilters>({\n    period: 'month',\n    startDate: '',\n    endDate: '',\n  });\n\n  // Revenue Report\n  const { data: revenueReport = [], isLoading: revenueLoading } = useQuery({\n    queryKey: [`/api/admin/reports/revenue?period=${filters.period}&startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Debug logging\n  console.log('Reports Debug:', {\n    revenueReport,\n    revenueLoading,\n    user: user?.role,\n    filters\n  });\n\n  // Revenue by Sport Report\n  const { data: revenueBySportReport = [], isLoading: revenueBySportLoading } = useQuery({\n    queryKey: [`/api/admin/reports/revenue-by-sport?period=${filters.period}&startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Facility Usage Report\n  const { data: facilityUsageReport = [], isLoading: facilityUsageLoading } = useQuery({\n    queryKey: [`/api/admin/reports/facility-usage?period=${filters.period}&startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Member Booking Report\n  const { data: memberBookingReport = [], isLoading: memberBookingLoading } = useQuery({\n    queryKey: [`/api/admin/reports/member-bookings?userId=${filters.userId || ''}&startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Member Payment Report\n  const { data: memberPaymentReport = [], isLoading: memberPaymentLoading } = useQuery({\n    queryKey: [`/api/admin/reports/member-payments?userId=${filters.userId || ''}&startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  // Coupon Usage Report\n  const { data: couponUsageReport = [], isLoading: couponUsageLoading } = useQuery({\n    queryKey: [`/api/admin/reports/coupon-usage?startDate=${filters.startDate}&endDate=${filters.endDate}`],\n    enabled: !!user && user.role === 'admin',\n  });\n\n  const formatCurrency = (amount: string | number) => {\n    return `₹${Number(amount).toLocaleString()}`;\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const FilterSection = () => (\n    <Card className=\"mb-6\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Filter className=\"h-5 w-5\" />\n          Report Filters\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"period\">Time Period</Label>\n            <Select value={filters.period} onValueChange={(value) => setFilters({ ...filters, period: value as 'day' | 'week' | 'month' })}>\n              <SelectTrigger>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"day\">Daily</SelectItem>\n                <SelectItem value=\"week\">Weekly</SelectItem>\n                <SelectItem value=\"month\">Monthly</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"startDate\">Start Date</Label>\n            <Input\n              id=\"startDate\"\n              type=\"date\"\n              value={filters.startDate}\n              onChange={(e) => setFilters({ ...filters, startDate: e.target.value })}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"endDate\">End Date</Label>\n            <Input\n              id=\"endDate\"\n              type=\"date\"\n              value={filters.endDate}\n              onChange={(e) => setFilters({ ...filters, endDate: e.target.value })}\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"userId\">Specific User (Optional)</Label>\n            <Input\n              id=\"userId\"\n              placeholder=\"Enter user ID\"\n              value={filters.userId || ''}\n              onChange={(e) => setFilters({ ...filters, userId: e.target.value || undefined })}\n            />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n\n  return (\n    <div className=\"flex min-h-screen bg-gray-50\">\n      <AdminSidebar />\n      <div className=\"flex-1 p-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold\">Reports & Analytics</h1>\n          <p className=\"text-gray-600 mt-2\">Comprehensive business insights and performance metrics</p>\n        </div>\n\n        <FilterSection />\n\n        {/* Summary Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-8 w-8 text-blue-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Bookings</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {facilityUsageReport.reduce((sum, row) => sum + Number(row.total_bookings || 0), 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <IndianRupee className=\"h-8 w-8 text-green-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Total Transactions</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {revenueReport.reduce((sum, row) => sum + Number(row.transaction_count || 0), 0)}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <TrendingUp className=\"h-8 w-8 text-purple-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Revenue Collected</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {formatCurrency(revenueReport.reduce((sum, row) => sum + Number(row.total_revenue || 0), 0))}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <Activity className=\"h-8 w-8 text-orange-600\" />\n                <div className=\"ml-4\">\n                  <p className=\"text-sm font-medium text-gray-600\">Pending Payments</p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {memberPaymentReport.filter(row => row.payment_status === 'pending').length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Explanation Card */}\n        <Card className=\"mb-6 bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-start gap-3\">\n              <div className=\"bg-blue-500 rounded-full p-1\">\n                <svg className=\"h-4 w-4 text-white\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\" />\n                </svg>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-blue-900\">Report Numbers Explained</h4>\n                <p className=\"text-sm text-blue-700 mt-1\">\n                  <strong>Total Bookings:</strong> All reservations made by customers. <br/>\n                  <strong>Total Transactions:</strong> Actual payments received for bookings. <br/>\n                  <strong>Pending Payments:</strong> Bookings created but payment not yet processed.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"revenue\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"revenue\" className=\"flex items-center gap-2\">\n              <IndianRupee className=\"h-4 w-4\" />\n              Revenue\n            </TabsTrigger>\n            <TabsTrigger value=\"facility\" className=\"flex items-center gap-2\">\n              <Activity className=\"h-4 w-4\" />\n              Facility Usage\n            </TabsTrigger>\n            <TabsTrigger value=\"members\" className=\"flex items-center gap-2\">\n              <Users className=\"h-4 w-4\" />\n              Member Reports\n            </TabsTrigger>\n            <TabsTrigger value=\"payments\" className=\"flex items-center gap-2\">\n              <BarChart className=\"h-4 w-4\" />\n              Payment Analysis\n            </TabsTrigger>\n            <TabsTrigger value=\"coupons\" className=\"flex items-center gap-2\">\n              <PieChart className=\"h-4 w-4\" />\n              Coupon Usage\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Revenue Reports Tab */}\n          <TabsContent value=\"revenue\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Overall Revenue Report */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                      Revenue Trends\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => printRevenue(revenueReport, 'Revenue Trends Report')}\n                        disabled={revenueReport.length === 0}\n                      >\n                        <Printer className=\"h-4 w-4 mr-1\" />\n                        Print\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => exportRevenueToPDF(revenueReport, 'Revenue Trends Report')}\n                        disabled={revenueReport.length === 0}\n                      >\n                        <FileText className=\"h-4 w-4 mr-1\" />\n                        PDF\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => exportRevenueToExcel(revenueReport, 'Revenue Trends Report')}\n                        disabled={revenueReport.length === 0}\n                      >\n                        <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                        Excel\n                      </Button>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {revenueLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                      <p>Loading revenue data...</p>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Period</TableHead>\n                            <TableHead>Transactions</TableHead>\n                            <TableHead>Total Revenue</TableHead>\n                            <TableHead>Avg Value</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {revenueReport.map((row: any, index: number) => (\n                            <TableRow key={index}>\n                              <TableCell className=\"font-medium\">{row.period_label}</TableCell>\n                              <TableCell>{row.transaction_count}</TableCell>\n                              <TableCell className=\"text-green-600 font-semibold\">\n                                {formatCurrency(row.total_revenue)}\n                              </TableCell>\n                              <TableCell>{formatCurrency(row.avg_transaction_value)}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Revenue by Sport Report */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BarChart className=\"h-5 w-5 text-blue-500\" />\n                      Revenue by Sport\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => printRevenueBySport(revenueBySportReport, 'Revenue by Sport Report')}\n                        disabled={revenueBySportReport.length === 0}\n                      >\n                        <Printer className=\"h-4 w-4 mr-1\" />\n                        Print\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => exportRevenueBysportToPDF(revenueBySportReport, 'Revenue by Sport Report')}\n                        disabled={revenueBySportReport.length === 0}\n                      >\n                        <FileText className=\"h-4 w-4 mr-1\" />\n                        PDF\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => exportRevenueBySportToExcel(revenueBySportReport, 'Revenue by Sport Report')}\n                        disabled={revenueBySportReport.length === 0}\n                      >\n                        <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                        Excel\n                      </Button>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {revenueBySportLoading ? (\n                    <div className=\"text-center py-8\">\n                      <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                      <p>Loading sport revenue data...</p>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-x-auto\">\n                      <Table>\n                        <TableHeader>\n                          <TableRow>\n                            <TableHead>Sport</TableHead>\n                            <TableHead>Period</TableHead>\n                            <TableHead>Revenue</TableHead>\n                            <TableHead>Transactions</TableHead>\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {revenueBySportReport.map((row: any, index: number) => (\n                            <TableRow key={index}>\n                              <TableCell className=\"font-medium\">{row.sport_name}</TableCell>\n                              <TableCell>{row.period_label}</TableCell>\n                              <TableCell className=\"text-green-600 font-semibold\">\n                                {formatCurrency(row.total_revenue)}\n                              </TableCell>\n                              <TableCell>{row.transaction_count}</TableCell>\n                            </TableRow>\n                          ))}\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Facility Usage Tab */}\n          <TabsContent value=\"facility\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Activity className=\"h-5 w-5 text-purple-500\" />\n                    Facility Usage Statistics\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => printFacilityUsage(facilityUsageReport, 'Facility Usage Report')}\n                      disabled={facilityUsageReport.length === 0}\n                    >\n                      <Printer className=\"h-4 w-4 mr-1\" />\n                      Print\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportFacilityUsageToPDF(facilityUsageReport, 'Facility Usage Report')}\n                      disabled={facilityUsageReport.length === 0}\n                    >\n                      <FileText className=\"h-4 w-4 mr-1\" />\n                      PDF\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportFacilityUsageToExcel(facilityUsageReport, 'Facility Usage Report')}\n                      disabled={facilityUsageReport.length === 0}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                      Excel\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {facilityUsageLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading facility usage data...</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Sport</TableHead>\n                          <TableHead>Ground</TableHead>\n                          <TableHead>Period</TableHead>\n                          <TableHead>Total Bookings</TableHead>\n                          <TableHead>Participants</TableHead>\n                          <TableHead>Confirmed</TableHead>\n                          <TableHead>Utilization</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {facilityUsageReport.map((row: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{row.sport_name}</TableCell>\n                            <TableCell>{row.ground_name}</TableCell>\n                            <TableCell>{row.period_label}</TableCell>\n                            <TableCell>{row.total_bookings}</TableCell>\n                            <TableCell>{row.total_participants}</TableCell>\n                            <TableCell>{row.confirmed_bookings}</TableCell>\n                            <TableCell>\n                              <Badge variant={Number(row.utilization_rate) > 70 ? \"default\" : \"secondary\"}>\n                                {row.utilization_rate}%\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Member Reports Tab */}\n          <TabsContent value=\"members\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5 text-orange-500\" />\n                    Member Booking Analytics\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => printMemberBookings(memberBookingReport, 'Member Booking Report')}\n                      disabled={memberBookingReport.length === 0}\n                    >\n                      <Printer className=\"h-4 w-4 mr-1\" />\n                      Print\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportMemberBookingsToPDF(memberBookingReport, 'Member Booking Report')}\n                      disabled={memberBookingReport.length === 0}\n                    >\n                      <FileText className=\"h-4 w-4 mr-1\" />\n                      PDF\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportMemberBookingsToExcel(memberBookingReport, 'Member Booking Report')}\n                      disabled={memberBookingReport.length === 0}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                      Excel\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {memberBookingLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading member booking data...</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Member</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Total Bookings</TableHead>\n                          <TableHead>Booking Value</TableHead>\n                          <TableHead>Confirmed</TableHead>\n                          <TableHead>Sports Played</TableHead>\n                          <TableHead>Member Since</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {memberBookingReport.map((row: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">\n                              {row.first_name} {row.last_name}\n                            </TableCell>\n                            <TableCell>{row.email}</TableCell>\n                            <TableCell>{row.total_bookings}</TableCell>\n                            <TableCell className=\"text-green-600 font-semibold\">\n                              {formatCurrency(row.total_booking_value)}\n                            </TableCell>\n                            <TableCell>{row.confirmed_bookings}</TableCell>\n                            <TableCell className=\"max-w-32 truncate\">\n                              {row.sports_played}\n                            </TableCell>\n                            <TableCell>{formatDate(row.first_booking_date)}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Payment Analysis Tab */}\n          <TabsContent value=\"payments\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <BarChart className=\"h-5 w-5 text-red-500\" />\n                    Member Payment Analysis\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => printMemberPayments(memberPaymentReport, 'Member Payment Analysis')}\n                      disabled={memberPaymentReport.length === 0}\n                    >\n                      <Printer className=\"h-4 w-4 mr-1\" />\n                      Print\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportMemberPaymentsToPDF(memberPaymentReport, 'Member Payment Analysis')}\n                      disabled={memberPaymentReport.length === 0}\n                    >\n                      <FileText className=\"h-4 w-4 mr-1\" />\n                      PDF\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportMemberPaymentsToExcel(memberPaymentReport, 'Member Payment Analysis')}\n                      disabled={memberPaymentReport.length === 0}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                      Excel\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {memberPaymentLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading payment analysis...</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Member</TableHead>\n                          <TableHead>Email</TableHead>\n                          <TableHead>Total Paid</TableHead>\n                          <TableHead>Cash</TableHead>\n                          <TableHead>UPI</TableHead>\n                          <TableHead>Card</TableHead>\n                          <TableHead>Bank Transfer</TableHead>\n                          <TableHead>Avg Payment</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {memberPaymentReport.map((row: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">\n                              {row.first_name} {row.last_name}\n                            </TableCell>\n                            <TableCell>{row.email}</TableCell>\n                            <TableCell className=\"text-green-600 font-semibold\">\n                              {formatCurrency(row.total_paid)}\n                            </TableCell>\n                            <TableCell>{formatCurrency(row.cash_payments)}</TableCell>\n                            <TableCell>{formatCurrency(row.upi_payments)}</TableCell>\n                            <TableCell>{formatCurrency(row.card_payments)}</TableCell>\n                            <TableCell>{formatCurrency(row.bank_transfer_payments)}</TableCell>\n                            <TableCell>{formatCurrency(row.avg_payment_amount)}</TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Coupon Usage Tab */}\n          <TabsContent value=\"coupons\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <PieChart className=\"h-5 w-5 text-indigo-500\" />\n                    Coupon Usage Report\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => printCouponUsage(couponUsageReport, 'Coupon Usage Report')}\n                    >\n                      <Printer className=\"h-4 w-4 mr-1\" />\n                      Print\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportCouponUsageToPDF(couponUsageReport, 'Coupon Usage Report')}\n                    >\n                      <FileText className=\"h-4 w-4 mr-1\" />\n                      PDF\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => exportCouponUsageToExcel(couponUsageReport, 'Coupon Usage Report')}\n                    >\n                      <FileSpreadsheet className=\"h-4 w-4 mr-1\" />\n                      Excel\n                    </Button>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {couponUsageLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\" />\n                    <p>Loading coupon usage data...</p>\n                  </div>\n                ) : couponUsageReport.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <PieChart className=\"h-12 w-12 mx-auto mb-4 text-gray-400\" />\n                    <p>No coupon usage data found</p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Coupon Code</TableHead>\n                          <TableHead>Discount Type</TableHead>\n                          <TableHead>Discount Value</TableHead>\n                          <TableHead>Times Used</TableHead>\n                          <TableHead>Total Discount Given</TableHead>\n                          <TableHead>Booking Value</TableHead>\n                          <TableHead>Discount %</TableHead>\n                          <TableHead>Status</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {couponUsageReport.map((row: any, index: number) => (\n                          <TableRow key={index}>\n                            <TableCell className=\"font-medium\">{row.coupon_code}</TableCell>\n                            <TableCell>\n                              <Badge variant=\"outline\">\n                                {row.discount_type}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              {row.discount_type === 'percentage' ? `${row.discount_value}%` : formatCurrency(row.discount_value)}\n                            </TableCell>\n                            <TableCell>{row.total_bookings_used}</TableCell>\n                            <TableCell className=\"text-red-600 font-semibold\">\n                              -{formatCurrency(row.total_discount_given)}\n                            </TableCell>\n                            <TableCell className=\"text-green-600\">\n                              {formatCurrency(row.total_booking_value)}\n                            </TableCell>\n                            <TableCell>{row.discount_percentage}%</TableCell>\n                            <TableCell>\n                              <Badge variant={row.used_count >= row.max_uses ? \"destructive\" : \"default\"}>\n                                {row.used_count >= row.max_uses ? \"Expired\" : \"Active\"}\n                              </Badge>\n                            </TableCell>\n                          </TableRow>\n                        ))}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":34831},"client/src/pages/user/Dashboard.tsx":{"content":"import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useToast } from '@/hooks/use-toast';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Separator } from '@/components/ui/separator';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport NotificationCenter from '@/components/NotificationCenter';\nimport { \n  Bell, \n  Calendar, \n  Clock, \n  MapPin, \n  Users, \n  DollarSign, \n  XCircle, \n  AlertTriangle,\n  CheckCircle,\n  Banknote,\n  ArrowLeft,\n  Home,\n  RotateCcw\n} from 'lucide-react';\n\n// Notification interface moved to NotificationCenter component\n\ninterface UpcomingBooking {\n  id: number;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  status: string;\n  totalAmount: string;\n  paidAmount: string;\n  paymentStatus: string;\n  facilityName: string;\n  sportName: string;\n  participantCount: number;\n  createdAt: string;\n}\n\ninterface CancellationPolicy {\n  hoursUntilBooking: number;\n  refundAmount: number;\n  cancellationFee: number;\n  message: string;\n}\n\nexport default function UserDashboard() {\n  const { toast } = useToast();\n  const { user, isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedBooking, setSelectedBooking] = useState<UpcomingBooking | null>(null);\n  const [cancellationReason, setCancellationReason] = useState('');\n  const [showCancelDialog, setShowCancelDialog] = useState(false);\n\n  // Fetch all user bookings and filter them properly\n  const { data: allBookings = [] } = useQuery({\n    queryKey: ['/api/bookings/user'],\n    enabled: isAuthenticated,\n  });\n\n  // Filter for truly upcoming bookings (future date/time and not cancelled)\n  const now = new Date();\n  const upcomingBookings = allBookings.filter((booking: UpcomingBooking) => {\n    if (booking.status === 'cancelled' || booking.status === 'completed') return false;\n    const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime}`);\n    return bookingDateTime > now;\n  });\n\n  // Cancel booking mutation\n  const cancelBookingMutation = useMutation({\n    mutationFn: async ({ bookingId, reason }: { bookingId: number; reason: string }) => {\n      return await apiRequest(\"POST\", `/api/user/cancel-booking/${bookingId}`, { reason });\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: ['/api/user/upcoming-bookings'] });\n      setShowCancelDialog(false);\n      setCancellationReason('');\n      \n      toast({\n        title: \"Booking Cancelled\",\n        description: `${data.message}. ${data.refundAmount > 0 ? `Refund: ₹${data.refundAmount}` : 'No refund applicable.'}`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n\n\n  const getStatusBadge = (status: string) => {\n    const config = {\n      'confirmed': { variant: 'default' as const, icon: CheckCircle, color: 'text-green-600' },\n      'pending': { variant: 'secondary' as const, icon: Clock, color: 'text-yellow-600' },\n      'cancelled': { variant: 'destructive' as const, icon: XCircle, color: 'text-red-600' },\n      'completed': { variant: 'default' as const, icon: CheckCircle, color: 'text-blue-600' },\n    };\n    \n    const statusConfig = config[status as keyof typeof config] || config.pending;\n    const Icon = statusConfig.icon;\n    \n    return (\n      <Badge variant={statusConfig.variant} className=\"flex items-center gap-1\">\n        <Icon className=\"h-3 w-3\" />\n        {status.charAt(0).toUpperCase() + status.slice(1)}\n      </Badge>\n    );\n  };\n\n  const getPaymentStatusBadge = (status: string) => {\n    const config = {\n      'completed': { variant: 'default' as const, color: 'text-green-600', label: 'Paid' },\n      'pending': { variant: 'secondary' as const, color: 'text-yellow-600', label: 'Unpaid' },\n      'partial': { variant: 'outline' as const, color: 'text-orange-600', label: 'Partial' },\n      'failed': { variant: 'destructive' as const, color: 'text-red-600', label: 'Failed' },\n      'refunded': { variant: 'outline' as const, color: 'text-gray-600', label: 'Refunded' },\n    };\n    \n    const paymentConfig = config[status as keyof typeof config] || config.pending;\n    \n    return (\n      <Badge variant={paymentConfig.variant}>\n        {paymentConfig.label}\n      </Badge>\n    );\n  };\n\n  const calculateCancellationPolicy = (booking: UpcomingBooking): CancellationPolicy => {\n    const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime}`);\n    const now = new Date();\n    const hoursUntilBooking = (bookingDateTime.getTime() - now.getTime()) / (1000 * 60 * 60);\n    \n    const totalPaid = parseFloat(booking.paidAmount || '0');\n    let refundAmount = 0;\n    let cancellationFee = 0;\n    let message = '';\n    \n    if (hoursUntilBooking >= 24) {\n      refundAmount = totalPaid;\n      message = 'Full refund available (cancelled 24+ hours before)';\n    } else if (hoursUntilBooking >= 2) {\n      cancellationFee = totalPaid * 0.5;\n      refundAmount = totalPaid - cancellationFee;\n      message = '50% refund available (cancelled 2-24 hours before)';\n    } else {\n      cancellationFee = totalPaid;\n      message = 'No refund available (cancelled less than 2 hours before)';\n    }\n    \n    return {\n      hoursUntilBooking: Math.round(hoursUntilBooking * 100) / 100,\n      refundAmount,\n      cancellationFee,\n      message\n    };\n  };\n\n  const handleCancelBooking = (booking: UpcomingBooking) => {\n    setSelectedBooking(booking);\n    setShowCancelDialog(true);\n  };\n\n  // Fetch notifications for unread count\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/user/notifications'],\n    enabled: isAuthenticated,\n  });\n\n  const unreadCount = notifications.filter((n: any) => !n.read).length;\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"w-96\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <h2 className=\"text-2xl font-bold mb-2\">Access Restricted</h2>\n              <p className=\"text-gray-600 mb-4\">Please log in to view your dashboard.</p>\n              <Button onClick={() => window.location.href = '/api/login'}>\n                Log In\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 py-8\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        {/* Header with Back Button */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => window.location.href = '/'}\n              className=\"flex items-center gap-2\"\n            >\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Home\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => window.location.href = '/facilities'}\n              className=\"flex items-center gap-2\"\n            >\n              <Calendar className=\"h-4 w-4\" />\n              Book Facilities\n            </Button>\n          </div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            My Personal Dashboard\n          </h1>\n          <p className=\"text-gray-600\">Welcome back, {user?.firstName || user?.username}! Manage <strong>your personal bookings</strong> and stay updated with notifications</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Notifications Panel */}\n          <div className=\"lg:col-span-1\">\n            <NotificationCenter />\n          </div>\n\n          {/* Bookings */}\n          <div className=\"lg:col-span-2\">\n            <Tabs defaultValue=\"upcoming\" className=\"space-y-6\">\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"upcoming\">Upcoming Bookings</TabsTrigger>\n                <TabsTrigger value=\"history\">Booking History</TabsTrigger>\n              </TabsList>\n\n              {/* Upcoming Bookings Tab */}\n              <TabsContent value=\"upcoming\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      Upcoming Bookings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {upcomingBookings.length === 0 ? (\n                      <div className=\"text-center py-12\">\n                        <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Upcoming Bookings</h3>\n                        <p className=\"text-gray-600 mb-4\">You don't have any bookings scheduled.</p>\n                        <Button onClick={() => window.location.href = '/facilities'}>\n                          Book a Facility\n                        </Button>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {upcomingBookings.map((booking: UpcomingBooking) => (\n                          <Card key={booking.id} className=\"border-l-4 border-l-blue-500\">\n                            <CardContent className=\"pt-4\">\n                              <div className=\"flex items-center justify-between mb-3\">\n                                <div className=\"flex items-center gap-2\">\n                                  <h3 className=\"font-semibold text-lg\">\n                                    {booking.sportName} - {booking.facilityName}\n                                  </h3>\n                                  {getStatusBadge(booking.status)}\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  {booking.status === 'confirmed' || booking.status === 'pending' ? (\n                                    <Button\n                                      variant=\"outline\"\n                                      size=\"sm\"\n                                      onClick={() => handleCancelBooking(booking)}\n                                      className=\"text-red-600 hover:text-red-700\"\n                                    >\n                                      <XCircle className=\"h-4 w-4 mr-1\" />\n                                      Cancel\n                                    </Button>\n                                  ) : null}\n                                </div>\n                              </div>\n                              \n                              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                <div className=\"flex items-center gap-2\">\n                                  <Calendar className=\"h-4 w-4 text-gray-500\" />\n                                  <span>{new Date(booking.bookingDate).toLocaleDateString()}</span>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <Clock className=\"h-4 w-4 text-gray-500\" />\n                                  <span>{booking.startTime} - {booking.endTime}</span>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <Users className=\"h-4 w-4 text-gray-500\" />\n                                  <span>{booking.participantCount} participants</span>\n                                </div>\n                                <div className=\"flex items-center gap-2\">\n                                  <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                                  <span>₹{parseFloat(booking.totalAmount).toLocaleString()}</span>\n                                </div>\n                              </div>\n                              \n                              <Separator className=\"my-3\" />\n                              \n                              <div className=\"flex items-center justify-between\">\n                                <div className=\"flex items-center gap-4\">\n                                  <span className=\"text-sm text-gray-600\">Payment Status:</span>\n                                  {getPaymentStatusBadge(booking.paymentStatus)}\n                                </div>\n                                <div className=\"text-sm text-gray-600\">\n                                  Paid: ₹{parseFloat(booking.paidAmount || '0').toLocaleString()}\n                                </div>\n                              </div>\n                            </CardContent>\n                          </Card>\n                        ))}\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n\n              {/* Booking History Tab */}\n              <TabsContent value=\"history\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-5 w-5\" />\n                      Booking History\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    {(() => {\n                      const pastBookings = allBookings.filter((booking: UpcomingBooking) => {\n                        const bookingDateTime = new Date(`${booking.bookingDate}T${booking.startTime}`);\n                        return bookingDateTime < now || booking.status === 'completed' || booking.status === 'cancelled';\n                      });\n\n                      return pastBookings.length === 0 ? (\n                        <div className=\"text-center py-12\">\n                          <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Booking History</h3>\n                          <p className=\"text-gray-600 mb-4\">Your completed and past bookings will appear here.</p>\n                        </div>\n                      ) : (\n                        <div className=\"space-y-4\">\n                          {pastBookings.map((booking: UpcomingBooking) => (\n                            <Card key={booking.id} className=\"border-l-4 border-l-gray-300\">\n                              <CardContent className=\"pt-4\">\n                                <div className=\"flex items-center justify-between mb-3\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <h3 className=\"font-semibold text-lg\">\n                                      {booking.sportName} - {booking.facilityName}\n                                    </h3>\n                                    {getStatusBadge(booking.status)}\n                                  </div>\n                                </div>\n                                \n                                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <Calendar className=\"h-4 w-4 text-gray-500\" />\n                                    <span>{new Date(booking.bookingDate).toLocaleDateString()}</span>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Clock className=\"h-4 w-4 text-gray-500\" />\n                                    <span>{booking.startTime} - {booking.endTime}</span>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <Users className=\"h-4 w-4 text-gray-500\" />\n                                    <span>{booking.participantCount} participants</span>\n                                  </div>\n                                  <div className=\"flex items-center gap-2\">\n                                    <DollarSign className=\"h-4 w-4 text-gray-500\" />\n                                    <span>₹{parseFloat(booking.totalAmount).toLocaleString()}</span>\n                                  </div>\n                                </div>\n                                \n                                <Separator className=\"my-3\" />\n                                \n                                <div className=\"flex items-center justify-between\">\n                                  <div className=\"flex items-center gap-4\">\n                                    <span className=\"text-sm text-gray-600\">Payment Status:</span>\n                                    {getPaymentStatusBadge(booking.paymentStatus)}\n                                  </div>\n                                  <div className=\"text-sm text-gray-600\">\n                                    Paid: ₹{parseFloat(booking.paidAmount || '0').toLocaleString()}\n                                  </div>\n                                </div>\n                              </CardContent>\n                            </Card>\n                          ))}\n                        </div>\n                      );\n                    })()}\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n\n\n\n        {/* Cancellation Dialog */}\n        <Dialog open={showCancelDialog} onOpenChange={setShowCancelDialog}>\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Cancel Booking</DialogTitle>\n            </DialogHeader>\n            {selectedBooking && (\n              <div className=\"space-y-4\">\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n                    <span className=\"font-medium text-yellow-800\">Cancellation Policy</span>\n                  </div>\n                  {(() => {\n                    const policy = calculateCancellationPolicy(selectedBooking);\n                    return (\n                      <div className=\"text-sm text-yellow-700\">\n                        <p className=\"mb-2\">{policy.message}</p>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex justify-between\">\n                            <span>Hours until booking:</span>\n                            <span className=\"font-medium\">{policy.hoursUntilBooking}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span>Refund amount:</span>\n                            <span className=\"font-medium\">₹{policy.refundAmount}</span>\n                          </div>\n                          {policy.cancellationFee > 0 && (\n                            <div className=\"flex justify-between\">\n                              <span>Cancellation fee:</span>\n                              <span className=\"font-medium\">₹{policy.cancellationFee}</span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })()}\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Reason for Cancellation (Optional)\n                  </label>\n                  <Textarea\n                    value={cancellationReason}\n                    onChange={(e) => setCancellationReason(e.target.value)}\n                    placeholder=\"Please let us know why you're cancelling...\"\n                    rows={3}\n                  />\n                </div>\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowCancelDialog(false)}\n                    className=\"flex-1\"\n                  >\n                    Keep Booking\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => cancelBookingMutation.mutate({\n                      bookingId: selectedBooking.id,\n                      reason: cancellationReason\n                    })}\n                    disabled={cancelBookingMutation.isPending}\n                    className=\"flex-1\"\n                  >\n                    {cancelBookingMutation.isPending ? 'Cancelling...' : 'Confirm Cancellation'}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":21379},"client/src/components/StepByStepBooking.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { ArrowLeft, ArrowRight, Check, Calendar as CalendarIcon, Clock, Users, CreditCard } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface StepByStepBookingProps {\n  isOpen: boolean;\n  onClose: () => void;\n  isAdminBooking?: boolean;\n}\n\ninterface Sport {\n  id: number;\n  sportName: string;\n  bookingType: string;\n  description?: string;\n  imageUrl?: string;\n}\n\ninterface Ground {\n  id: number;\n  sportId: number;\n  groundName: string;\n  location?: string;\n  maxCapacity?: number;\n  facilities?: string;\n  imageUrl?: string;\n}\n\ninterface Plan {\n  id: number;\n  groundId: number;\n  planName: string;\n  planType: string;\n  durationDays: number;\n  basePrice: number;\n  peakHourMultiplier: number;\n  weekendMultiplier: number;\n  description?: string;\n}\n\ninterface TimeSlot {\n  id: string;\n  facilityId: number;\n  timeSlotId: number;\n  startTime: string;\n  endTime: string;\n  slotName: string;\n  isPeakHour: boolean;\n  isAvailable: boolean;\n  availableCapacity: number;\n  maxCapacity: number;\n  totalPrice: number;\n}\n\nexport default function StepByStepBooking({ isOpen, onClose, isAdminBooking = false }: StepByStepBookingProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedSport, setSelectedSport] = useState<Sport | null>(null);\n  const [selectedGround, setSelectedGround] = useState<Ground | null>(null);\n  const [selectedBookingMode, setSelectedBookingMode] = useState<\"per-person\" | \"full-ground\">(\"per-person\");\n  const [selectedPlan, setSelectedPlan] = useState<Plan | null>(null);\n  const [numberOfPersons, setNumberOfPersons] = useState(1);\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [endDate, setEndDate] = useState<Date | null>(null);\n  const [selectedTimeSlots, setSelectedTimeSlots] = useState<string[]>([]);\n  const [numberOfHours, setNumberOfHours] = useState(1);\n\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  // Step 1: Fetch all sports\n  const { data: sports = [], isLoading: sportsLoading } = useQuery<Sport[]>({\n    queryKey: [\"/api/sports\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/sports\", { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch sports');\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Step 2: Fetch grounds for selected sport\n  const { data: grounds = [], isLoading: groundsLoading } = useQuery<Ground[]>({\n    queryKey: [\"/api/grounds\", selectedSport?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/grounds?sportId=${selectedSport?.id}`, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch grounds');\n      return response.json();\n    },\n    enabled: !!selectedSport?.id,\n  });\n\n  // Step 4: Fetch plans for selected ground\n  const { data: plans = [], isLoading: plansLoading } = useQuery<Plan[]>({\n    queryKey: [\"/api/plans\", selectedGround?.id],\n    queryFn: async () => {\n      const response = await fetch(`/api/plans?groundId=${selectedGround?.id}`, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch plans');\n      return response.json();\n    },\n    enabled: !!selectedGround?.id,\n  });\n\n  // Step 6: Fetch time slots with availability\n  const { data: timeSlots = [], isLoading: timeSlotsLoading } = useQuery<TimeSlot[]>({\n    queryKey: [\"/api/facilities\", selectedGround?.id, \"slots\", selectedDate?.toISOString().split('T')[0]],\n    queryFn: async () => {\n      if (!selectedGround?.id || !selectedDate) return [];\n      const dateStr = selectedDate.toISOString().split('T')[0];\n      const response = await fetch(`/api/facilities/${selectedGround.id}/slots?date=${dateStr}`, { credentials: 'include' });\n      if (!response.ok) throw new Error('Failed to fetch time slots');\n      return response.json();\n    },\n    enabled: !!selectedGround?.id && !!selectedDate && currentStep >= 6,\n  });\n\n  // Calculate end date when plan or date changes\n  useEffect(() => {\n    if (selectedPlan && selectedDate) {\n      if (selectedPlan.planType === 'hourly') {\n        setEndDate(selectedDate);\n      } else {\n        const calculatedEndDate = new Date(selectedDate);\n        calculatedEndDate.setDate(calculatedEndDate.getDate() + selectedPlan.durationDays - 1);\n        setEndDate(calculatedEndDate);\n      }\n    }\n  }, [selectedPlan, selectedDate]);\n\n  // Get available booking modes for selected sport\n  const getAvailableBookingModes = () => {\n    if (!selectedSport) return [];\n    \n    const modes = [];\n    if (selectedSport.bookingType === \"per-person\") modes.push(\"per-person\");\n    if (selectedSport.bookingType === \"full-ground\") modes.push(\"full-ground\");\n    if (selectedSport.bookingType === \"both\") {\n      modes.push(\"per-person\");\n      modes.push(\"full-ground\");\n    }\n    \n    return modes;\n  };\n\n  // Filter plans based on booking mode\n  const getFilteredPlans = () => {\n    if (!plans.length) return [];\n    \n    return plans.filter(plan => {\n      const planName = plan.planName.toLowerCase();\n      const modeKeyword = selectedBookingMode === \"per-person\" ? \"person\" : \"court\";\n      return planName.includes(modeKeyword);\n    });\n  };\n\n  // Calculate total price\n  const calculateTotalPrice = () => {\n    if (!selectedPlan || !selectedTimeSlots.length || !timeSlots.length) return 0;\n    \n    let total = 0;\n    selectedTimeSlots.forEach(slotId => {\n      const slot = timeSlots.find(s => s.id === slotId);\n      if (slot) {\n        const basePrice = selectedPlan.basePrice;\n        const participants = selectedBookingMode === \"per-person\" ? numberOfPersons : 1;\n        const peakMultiplier = slot.isPeakHour ? selectedPlan.peakHourMultiplier : 1;\n        const isWeekend = selectedDate ? [0, 6].includes(selectedDate.getDay()) : false;\n        const weekendMultiplier = isWeekend ? selectedPlan.weekendMultiplier : 1;\n        \n        total += basePrice * participants * peakMultiplier * weekendMultiplier;\n      }\n    });\n    \n    return total;\n  };\n\n  // Handle next step\n  const handleNext = () => {\n    if (currentStep < 7) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  // Handle previous step\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // Check if current step is valid\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 1: return !!selectedSport;\n      case 2: return !!selectedGround && selectedGround.sportId === selectedSport?.id;\n      case 3: return !!selectedBookingMode && getAvailableBookingModes().includes(selectedBookingMode);\n      case 4: return !!selectedPlan && (selectedBookingMode === \"full-ground\" || numberOfPersons > 0);\n      case 5: return !!selectedDate;\n      case 6: return selectedTimeSlots.length > 0;\n      case 7: return true;\n      default: return false;\n    }\n  };\n\n  // Handle booking submission\n  const createBookingMutation = useMutation({\n    mutationFn: async (bookingData: any) => {\n      return await apiRequest(\"POST\", \"/api/bookings\", bookingData);\n    },\n    onSuccess: async (response) => {\n      const booking = await response.json();\n      toast({\n        title: \"Booking Created Successfully!\",\n        description: `Your booking has been created with ID: ${booking.id}`,\n      });\n      \n      // Navigate to payment page\n      const total = calculateTotalPrice();\n      setLocation(`/payment/${booking.id}?total=${total}&isAdmin=${isAdminBooking}`);\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookNow = () => {\n    if (!selectedSport || !selectedGround || !selectedPlan || !selectedDate || !selectedTimeSlots.length) {\n      toast({\n        title: \"Invalid Selection\",\n        description: \"Please complete all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const bookingData = {\n      sportId: selectedSport.id,\n      groundId: selectedGround.id,\n      bookingType: selectedBookingMode,\n      planType: selectedPlan.planType,\n      planId: selectedPlan.id,\n      bookingDate: selectedDate.toISOString().split('T')[0],\n      participantCount: selectedBookingMode === \"per-person\" ? numberOfPersons : 1,\n      timeSlots: selectedTimeSlots,\n      totalAmount: calculateTotalPrice(),\n      status: \"pending\",\n    };\n\n    createBookingMutation.mutate(bookingData);\n  };\n\n  // Reset form when dialog closes\n  useEffect(() => {\n    if (!isOpen) {\n      setCurrentStep(1);\n      setSelectedSport(null);\n      setSelectedGround(null);\n      setSelectedBookingMode(\"per-person\");\n      setSelectedPlan(null);\n      setNumberOfPersons(1);\n      setSelectedDate(new Date());\n      setEndDate(null);\n      setSelectedTimeSlots([]);\n      setNumberOfHours(1);\n    }\n  }, [isOpen]);\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 1: Select Sport</h3>\n            {sportsLoading ? (\n              <div className=\"text-center py-8\">Loading sports...</div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {sports.map((sport) => (\n                  <Card \n                    key={sport.id} \n                    className={`cursor-pointer transition-all ${selectedSport?.id === sport.id ? 'ring-2 ring-primary bg-primary/5' : 'hover:shadow-md'}`}\n                    onClick={() => setSelectedSport(sport)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-3\">\n                        {sport.imageUrl && (\n                          <img src={sport.imageUrl} alt={sport.sportName} className=\"w-12 h-12 object-cover rounded\" />\n                        )}\n                        <div>\n                          <h4 className=\"font-medium\">{sport.sportName}</h4>\n                          {sport.description && (\n                            <p className=\"text-sm text-gray-600\">{sport.description}</p>\n                          )}\n                          <Badge variant=\"outline\" className=\"mt-1 text-xs\">\n                            {sport.bookingType}\n                          </Badge>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 2: Select Ground</h3>\n            <p className=\"text-sm text-gray-600\">Sport: {selectedSport?.sportName}</p>\n            {groundsLoading ? (\n              <div className=\"text-center py-8\">Loading grounds...</div>\n            ) : (\n              <div className=\"grid grid-cols-1 gap-4\">\n                {grounds.map((ground) => (\n                  <Card \n                    key={ground.id} \n                    className={`cursor-pointer transition-all ${selectedGround?.id === ground.id ? 'ring-2 ring-primary bg-primary/5' : 'hover:shadow-md'}`}\n                    onClick={() => setSelectedGround(ground)}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div>\n                          <h4 className=\"font-medium\">{ground.groundName}</h4>\n                          {ground.location && (\n                            <p className=\"text-sm text-gray-600\">{ground.location}</p>\n                          )}\n                          {ground.facilities && (\n                            <p className=\"text-sm text-gray-500 mt-1\">{ground.facilities}</p>\n                          )}\n                        </div>\n                        <div className=\"text-right\">\n                          {ground.maxCapacity && (\n                            <Badge variant=\"secondary\">\n                              <Users className=\"w-3 h-3 mr-1\" />\n                              Max: {ground.maxCapacity}\n                            </Badge>\n                          )}\n                          <div className=\"mt-2 space-x-1\">\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              {selectedSport?.bookingType === \"both\" ? \"Both Modes\" : \n                               selectedSport?.bookingType === \"per-person\" ? \"Per Person\" : \n                               selectedSport?.bookingType === \"full-ground\" ? \"Full Ground\" : \"Available\"}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 3: Select Booking Mode</h3>\n            <p className=\"text-sm text-gray-600\">Ground: {selectedGround?.groundName}</p>\n            <RadioGroup \n              value={selectedBookingMode} \n              onValueChange={(value) => setSelectedBookingMode(value as \"per-person\" | \"full-ground\")}\n            >\n              {getAvailableBookingModes().map((mode) => (\n                <div key={mode} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={mode} id={mode} />\n                  <Label htmlFor={mode} className=\"cursor-pointer\">\n                    {mode === \"per-person\" ? \"Per Person Booking\" : \"Full Ground Booking\"}\n                  </Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 4: Select Plan & Number of Persons</h3>\n            <p className=\"text-sm text-gray-600\">Booking Mode: {selectedBookingMode}</p>\n            \n            {plansLoading ? (\n              <div className=\"text-center py-8\">Loading plans...</div>\n            ) : (\n              <div className=\"space-y-4\">\n                <div>\n                  <Label>Select Plan</Label>\n                  <div className=\"grid grid-cols-1 gap-3 mt-2\">\n                    {getFilteredPlans().map((plan) => (\n                      <Card \n                        key={plan.id} \n                        className={`cursor-pointer transition-all ${selectedPlan?.id === plan.id ? 'ring-2 ring-primary bg-primary/5' : 'hover:shadow-md'}`}\n                        onClick={() => setSelectedPlan(plan)}\n                      >\n                        <CardContent className=\"p-4\">\n                          <div className=\"flex justify-between items-center\">\n                            <div>\n                              <h4 className=\"font-medium\">{plan.planName}</h4>\n                              <p className=\"text-sm text-gray-600\">₹{plan.basePrice} - {plan.planType}</p>\n                              {plan.description && (\n                                <p className=\"text-xs text-gray-500 mt-1\">{plan.description}</p>\n                              )}\n                            </div>\n                            <Badge variant={plan.planType === 'hourly' ? 'default' : 'secondary'}>\n                              {plan.durationDays} {plan.planType === 'hourly' ? 'hour' : 'days'}\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                </div>\n\n                {selectedBookingMode === \"per-person\" && selectedGround?.maxCapacity && (\n                  <div>\n                    <Label>Number of Persons</Label>\n                    <Select \n                      value={numberOfPersons.toString()} \n                      onValueChange={(value) => setNumberOfPersons(parseInt(value))}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {Array.from({ length: selectedGround.maxCapacity }, (_, i) => i + 1).map((num) => (\n                          <SelectItem key={num} value={num.toString()}>\n                            {num} {num === 1 ? 'Person' : 'Persons'}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 5: Select Date</h3>\n            <p className=\"text-sm text-gray-600\">Plan: {selectedPlan?.planName}</p>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <Label>\n                  {selectedPlan?.planType === 'hourly' ? 'Booking Date' : 'Start Date'}\n                </Label>\n                <div className=\"mt-2\">\n                  <Calendar\n                    mode=\"single\"\n                    selected={selectedDate}\n                    onSelect={setSelectedDate}\n                    disabled={(date) => date < new Date()}\n                    className=\"rounded-md border\"\n                  />\n                </div>\n              </div>\n\n              {selectedPlan?.planType !== 'hourly' && endDate && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                  <div className=\"flex items-center gap-2\">\n                    <CalendarIcon className=\"w-4 h-4 text-blue-600\" />\n                    <span className=\"font-medium text-blue-800\">Calculated End Date</span>\n                  </div>\n                  <p className=\"text-blue-700 mt-1\">\n                    Your {selectedPlan?.planType} plan will end on: {endDate.toLocaleDateString()}\n                  </p>\n                  <p className=\"text-sm text-blue-600 mt-1\">\n                    Duration: {selectedPlan?.durationDays} days\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 6:\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Step 6: Select Time Slots</h3>\n            <p className=\"text-sm text-gray-600\">\n              Date: {selectedDate?.toLocaleDateString()}\n              {selectedPlan?.planType === 'hourly' && (\n                <span className=\"ml-4\">\n                  Select {numberOfHours} slot{numberOfHours > 1 ? 's' : ''}\n                </span>\n              )}\n            </p>\n\n            {selectedPlan?.planType === 'hourly' && (\n              <div className=\"mb-4\">\n                <Label>Number of Hours</Label>\n                <Select \n                  value={numberOfHours.toString()} \n                  onValueChange={(value) => {\n                    setNumberOfHours(parseInt(value));\n                    setSelectedTimeSlots([]); // Reset selection when changing hours\n                  }}\n                >\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {[1, 2, 3, 4, 5, 6].map((hours) => (\n                      <SelectItem key={hours} value={hours.toString()}>\n                        {hours} {hours === 1 ? 'Hour' : 'Hours'}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            )}\n\n            {timeSlotsLoading ? (\n              <div className=\"text-center py-8\">Loading time slots...</div>\n            ) : (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {timeSlots.map((slot) => {\n                  const isSelected = selectedTimeSlots.includes(slot.id);\n                  const isAvailable = selectedBookingMode === \"full-ground\" \n                    ? slot.isAvailable \n                    : slot.isAvailable && slot.availableCapacity >= numberOfPersons;\n                  const canSelect = isAvailable && (\n                    selectedPlan?.planType !== 'hourly' || selectedTimeSlots.length < numberOfHours || isSelected\n                  );\n\n                  return (\n                    <Card \n                      key={slot.id}\n                      className={`cursor-pointer transition-all ${\n                        isSelected \n                          ? 'ring-2 ring-primary bg-primary/5' \n                          : canSelect \n                            ? 'hover:shadow-md' \n                            : 'opacity-50 cursor-not-allowed'\n                      }`}\n                      onClick={() => {\n                        if (!canSelect) return;\n                        \n                        if (isSelected) {\n                          setSelectedTimeSlots(prev => prev.filter(id => id !== slot.id));\n                        } else {\n                          if (selectedPlan?.planType === 'hourly' && selectedTimeSlots.length >= numberOfHours) {\n                            return; // Can't select more slots than hours\n                          }\n                          setSelectedTimeSlots(prev => [...prev, slot.id]);\n                        }\n                      }}\n                    >\n                      <CardContent className=\"p-3\">\n                        <div className=\"text-center\">\n                          <div className=\"font-medium\">{slot.slotName}</div>\n                          <div className=\"text-sm text-gray-600\">\n                            {slot.startTime} - {slot.endTime}\n                          </div>\n                          {slot.isPeakHour && (\n                            <Badge variant=\"destructive\" className=\"text-xs mt-1\">Peak</Badge>\n                          )}\n                          {selectedBookingMode === \"per-person\" && (\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              Available: {slot.availableCapacity}/{slot.maxCapacity}\n                            </div>\n                          )}\n                          <div className=\"text-sm font-medium text-green-600 mt-1\">\n                            ₹{slot.totalPrice || 0}\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            )}\n          </div>\n        );\n\n      case 7:\n        return (\n          <div className=\"space-y-6\">\n            <h3 className=\"text-lg font-semibold\">Step 7: Booking Summary</h3>\n            \n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Booking Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <Label className=\"text-gray-600\">Sport</Label>\n                    <p className=\"font-medium\">{selectedSport?.sportName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-600\">Ground</Label>\n                    <p className=\"font-medium\">{selectedGround?.groundName}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-600\">Booking Mode</Label>\n                    <p className=\"font-medium\">{selectedBookingMode}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-gray-600\">Plan</Label>\n                    <p className=\"font-medium\">{selectedPlan?.planName}</p>\n                  </div>\n                  {selectedBookingMode === \"per-person\" && (\n                    <div>\n                      <Label className=\"text-gray-600\">Number of Persons</Label>\n                      <p className=\"font-medium\">{numberOfPersons}</p>\n                    </div>\n                  )}\n                  <div>\n                    <Label className=\"text-gray-600\">Date</Label>\n                    <p className=\"font-medium\">{selectedDate?.toLocaleDateString()}</p>\n                  </div>\n                  {endDate && selectedPlan?.planType !== 'hourly' && (\n                    <div>\n                      <Label className=\"text-gray-600\">End Date</Label>\n                      <p className=\"font-medium\">{endDate.toLocaleDateString()}</p>\n                    </div>\n                  )}\n                  <div>\n                    <Label className=\"text-gray-600\">Time Slots</Label>\n                    <div className=\"space-y-1\">\n                      {selectedTimeSlots.map(slotId => {\n                        const slot = timeSlots.find(s => s.id === slotId);\n                        return slot ? (\n                          <p key={slotId} className=\"font-medium text-sm\">\n                            {slot.slotName} ({slot.startTime} - {slot.endTime})\n                            {slot.isPeakHour && <Badge variant=\"destructive\" className=\"ml-2 text-xs\">Peak</Badge>}\n                          </p>\n                        ) : null;\n                      })}\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-primary\">\n                    Total: ₹{calculateTotalPrice().toLocaleString()}\n                  </div>\n                  <p className=\"text-sm text-gray-600 mt-1\">\n                    Including peak hour and weekend charges if applicable\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <div className=\"flex gap-3\">\n              <Button \n                variant=\"outline\" \n                onClick={onClose}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button \n                onClick={handleBookNow}\n                disabled={createBookingMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createBookingMutation.isPending ? (\n                  <>\n                    <Clock className=\"w-4 h-4 mr-2 animate-spin\" />\n                    Creating Booking...\n                  </>\n                ) : (\n                  <>\n                    <CreditCard className=\"w-4 h-4 mr-2\" />\n                    Book Now\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {isAdminBooking ? \"Admin Booking\" : \"Book Facility\"} - Step {currentStep} of 7\n          </DialogTitle>\n          <DialogDescription>\n            Follow the step-by-step process to complete your booking\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Progress Bar */}\n        <div className=\"mb-6\">\n          <div className=\"flex justify-between mb-2\">\n            {[1, 2, 3, 4, 5, 6, 7].map((step) => (\n              <div\n                key={step}\n                className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                  step <= currentStep\n                    ? 'bg-primary text-white'\n                    : 'bg-gray-200 text-gray-600'\n                }`}\n              >\n                {step < currentStep ? <Check className=\"w-4 h-4\" /> : step}\n              </div>\n            ))}\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-primary h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStep - 1) / 6) * 100}%` }}\n            />\n          </div>\n        </div>\n\n        {/* Step Content */}\n        <div className=\"min-h-[400px]\">\n          {renderStepContent()}\n        </div>\n\n        {/* Navigation Buttons */}\n        {currentStep < 7 && (\n          <div className=\"flex justify-between pt-4 border-t\">\n            <Button \n              variant=\"outline\" \n              onClick={handlePrevious}\n              disabled={currentStep === 1}\n            >\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Previous\n            </Button>\n            <Button \n              onClick={handleNext}\n              disabled={!isStepValid()}\n            >\n              Next\n              <ArrowRight className=\"w-4 h-4 ml-2\" />\n            </Button>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":30059},"server/receipt.ts":{"content":"import jsPDF from 'jspdf';\nimport autoTable from 'jspdf-autotable';\n\nexport interface ReceiptData {\n  receiptId: string;\n  bookingId: number;\n  paymentId: number;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  facilityName: string;\n  sportName: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  participants: number;\n  totalBookingAmount: number;\n  totalAmount: number;\n  paidAmount: number;\n  discountAmount?: number;\n  totalPaidBeforeThis?: number;\n  paymentMethod: string;\n  transactionId?: string;\n  paymentDate: string;\n  balanceAmount: number;\n  paymentStatus: string;\n}\n\nexport class ReceiptGenerator {\n  static generateReceiptPDF(receiptData: ReceiptData): Buffer {\n    const doc = new jsPDF();\n    const pageWidth = doc.internal.pageSize.width;\n    \n    // Header\n    doc.setFontSize(20);\n    doc.setFont('helvetica', 'bold');\n    doc.text('ARYEN RECREATION CENTRE', pageWidth / 2, 25, { align: 'center' });\n    \n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'normal');\n    doc.text('Sports Facility Booking Receipt', pageWidth / 2, 35, { align: 'center' });\n    \n    // Receipt Info\n    doc.setFontSize(10);\n    doc.text(`Receipt ID: ${receiptData.receiptId}`, 20, 50);\n    doc.text(`Date: ${new Date(receiptData.paymentDate).toLocaleDateString()}`, pageWidth - 60, 50);\n    \n    // Customer Details\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Customer Details:', 20, 70);\n    \n    doc.setFont('helvetica', 'normal');\n    doc.setFontSize(10);\n    doc.text(`Name: ${receiptData.customerName}`, 20, 82);\n    doc.text(`Email: ${receiptData.customerEmail}`, 20, 92);\n    doc.text(`Phone: ${receiptData.customerPhone}`, 20, 102);\n    \n    // Booking Details\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Booking Details:', 20, 120);\n    \n    doc.setFont('helvetica', 'normal');\n    doc.setFontSize(10);\n    doc.text(`Booking ID: ${receiptData.bookingId}`, 20, 132);\n    doc.text(`Facility: ${receiptData.facilityName}`, 20, 142);\n    doc.text(`Sport: ${receiptData.sportName}`, 20, 152);\n    doc.text(`Date: ${new Date(receiptData.bookingDate).toLocaleDateString()}`, 20, 162);\n    doc.text(`Time: ${receiptData.startTime} - ${receiptData.endTime}`, 20, 172);\n    doc.text(`Participants: ${receiptData.participants}`, 20, 182);\n    \n    // Payment Summary Table\n    const paymentData = [\n      ['Description', 'Amount'],\n      ['Total Booking Amount', `₹${receiptData.totalBookingAmount.toLocaleString()}`],\n      ['Discount Applied', `₹${(receiptData.discountAmount || 0).toLocaleString()}`],\n      ['Amount After Discount', `₹${(receiptData.totalBookingAmount - (receiptData.discountAmount || 0)).toLocaleString()}`],\n      ['Total Paid (Before This Payment)', `₹${(receiptData.totalPaidBeforeThis || 0).toLocaleString()}`],\n      ['Due Amount (Before This Payment)', `₹${receiptData.totalAmount.toLocaleString()}`],\n      ['Amount Paid This Transaction', `₹${receiptData.paidAmount.toLocaleString()}`],\n      ['Remaining Balance', `₹${receiptData.balanceAmount.toLocaleString()}`]\n    ];\n    \n    autoTable(doc, {\n      startY: 200,\n      head: [paymentData[0]],\n      body: paymentData.slice(1),\n      theme: 'grid',\n      headStyles: { fillColor: [66, 139, 202] },\n      styles: { fontSize: 10 },\n      columnStyles: {\n        0: { cellWidth: 80 },\n        1: { cellWidth: 60, halign: 'right' }\n      }\n    });\n    \n    // Payment Details\n    const finalY = (doc as any).lastAutoTable.finalY + 20;\n    doc.setFontSize(12);\n    doc.setFont('helvetica', 'bold');\n    doc.text('Payment Details:', 20, finalY);\n    \n    doc.setFont('helvetica', 'normal');\n    doc.setFontSize(10);\n    doc.text(`Payment Method: ${receiptData.paymentMethod}`, 20, finalY + 12);\n    doc.text(`Transaction ID: ${receiptData.transactionId || 'N/A'}`, 20, finalY + 22);\n    doc.text(`Payment Status: ${receiptData.paymentStatus.toUpperCase()}`, 20, finalY + 32);\n    doc.text(`Payment Date: ${new Date(receiptData.paymentDate).toLocaleString()}`, 20, finalY + 42);\n    \n    // Footer\n    doc.setFontSize(8);\n    doc.text('Thank you for choosing Aryen Recreation Centre!', pageWidth / 2, finalY + 65, { align: 'center' });\n    doc.text('For any queries, contact us at support@aryenrecreation.com', pageWidth / 2, finalY + 75, { align: 'center' });\n    \n    return Buffer.from(doc.output('arraybuffer'));\n  }\n  \n  static generateReceiptHTML(receiptData: ReceiptData): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Receipt - ${receiptData.receiptId}</title>\n        <style>\n          body { font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { text-align: center; border-bottom: 2px solid #428bca; padding-bottom: 20px; margin-bottom: 30px; }\n          .header h1 { color: #428bca; margin: 0; font-size: 24px; }\n          .header p { margin: 5px 0; color: #666; }\n          .receipt-info { display: flex; justify-content: space-between; margin-bottom: 30px; }\n          .section { margin-bottom: 25px; }\n          .section h3 { color: #333; border-bottom: 1px solid #ddd; padding-bottom: 5px; }\n          .details { line-height: 1.6; }\n          .payment-table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n          .payment-table th, .payment-table td { border: 1px solid #ddd; padding: 10px; text-align: left; }\n          .payment-table th { background-color: #428bca; color: white; }\n          .payment-table td:last-child { text-align: right; }\n          .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #ddd; color: #666; font-size: 12px; }\n          .status { padding: 5px 10px; border-radius: 3px; font-weight: bold; }\n          .status.paid { background-color: #d4edda; color: #155724; }\n          .status.partial { background-color: #fff3cd; color: #856404; }\n          .status.pending { background-color: #f8d7da; color: #721c24; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>ARYEN RECREATION CENTRE</h1>\n          <p>Sports Facility Booking Receipt</p>\n        </div>\n        \n        <div class=\"receipt-info\">\n          <div><strong>Receipt ID:</strong> ${receiptData.receiptId}</div>\n          <div><strong>Date:</strong> ${new Date(receiptData.paymentDate).toLocaleDateString()}</div>\n        </div>\n        \n        <div class=\"section\">\n          <h3>Customer Details</h3>\n          <div class=\"details\">\n            <div><strong>Name:</strong> ${receiptData.customerName}</div>\n            <div><strong>Email:</strong> ${receiptData.customerEmail}</div>\n            <div><strong>Phone:</strong> ${receiptData.customerPhone}</div>\n          </div>\n        </div>\n        \n        <div class=\"section\">\n          <h3>Booking Details</h3>\n          <div class=\"details\">\n            <div><strong>Booking ID:</strong> ${receiptData.bookingId}</div>\n            <div><strong>Facility:</strong> ${receiptData.facilityName}</div>\n            <div><strong>Sport:</strong> ${receiptData.sportName}</div>\n            <div><strong>Date:</strong> ${new Date(receiptData.bookingDate).toLocaleDateString()}</div>\n            <div><strong>Time:</strong> ${receiptData.startTime} - ${receiptData.endTime}</div>\n            <div><strong>Participants:</strong> ${receiptData.participants}</div>\n          </div>\n        </div>\n        \n        <div class=\"section\">\n          <h3>Payment Summary</h3>\n          <table class=\"payment-table\">\n            <tr>\n              <th>Description</th>\n              <th>Amount</th>\n            </tr>\n            <tr>\n              <td>Total Booking Amount</td>\n              <td>₹${receiptData.totalBookingAmount.toLocaleString()}</td>\n            </tr>\n            <tr>\n              <td>Discount Applied</td>\n              <td style=\"color: green;\">-₹${(receiptData.discountAmount || 0).toLocaleString()}</td>\n            </tr>\n            <tr>\n              <td>Amount After Discount</td>\n              <td>₹${(receiptData.totalBookingAmount - (receiptData.discountAmount || 0)).toLocaleString()}</td>\n            </tr>\n            <tr>\n              <td>Total Paid (Before This Payment)</td>\n              <td style=\"color: blue;\">₹${(receiptData.totalPaidBeforeThis || 0).toLocaleString()}</td>\n            </tr>\n            <tr style=\"background-color: #f0f8ff;\">\n              <td><strong>Due Amount (Before This Payment)</strong></td>\n              <td><strong>₹${receiptData.totalAmount.toLocaleString()}</strong></td>\n            </tr>\n            <tr style=\"background-color: #f0fff0;\">\n              <td><strong>Amount Paid This Transaction</strong></td>\n              <td><strong style=\"color: green;\">₹${receiptData.paidAmount.toLocaleString()}</strong></td>\n            </tr>\n            <tr style=\"background-color: #f5f5f5;\">\n              <td><strong>Remaining Balance</strong></td>\n              <td><strong>${receiptData.balanceAmount > 0 ? '₹' + receiptData.balanceAmount.toLocaleString() : 'Fully Paid'}</strong></td>\n            </tr>\n          </table>\n        </div>\n        \n        <div class=\"section\">\n          <h3>Payment Details</h3>\n          <div class=\"details\">\n            <div><strong>Payment Method:</strong> ${receiptData.paymentMethod}</div>\n            <div><strong>Transaction ID:</strong> ${receiptData.transactionId || 'N/A'}</div>\n            <div><strong>Payment Status:</strong> <span class=\"status ${receiptData.paymentStatus.toLowerCase()}\">${receiptData.paymentStatus.toUpperCase()}</span></div>\n            <div><strong>Payment Date:</strong> ${new Date(receiptData.paymentDate).toLocaleString()}</div>\n          </div>\n        </div>\n        \n        <div class=\"footer\">\n          <p>Thank you for choosing Aryen Recreation Centre!</p>\n          <p>For any queries, contact us at support@aryenrecreation.com</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n  \n  static generateSMSText(receiptData: ReceiptData): string {\n    return `Aryen Recreation Centre - Payment Receipt\nReceipt ID: ${receiptData.receiptId}\nBooking: ${receiptData.facilityName}\nDate: ${new Date(receiptData.bookingDate).toLocaleDateString()}\nTime: ${receiptData.startTime}-${receiptData.endTime}\nAmount Paid: ₹${receiptData.paidAmount.toLocaleString()}\nBalance: ₹${receiptData.balanceAmount.toLocaleString()}\nStatus: ${receiptData.paymentStatus.toUpperCase()}\nThank you for choosing us!`;\n  }\n}","size_bytes":10524},"server/types.ts":{"content":"import { User } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User {\n      id: string;\n      email: string | null;\n      firstName: string | null;\n      lastName: string | null;\n      role: string;\n      userType?: string;\n      isActive: boolean;\n      phone: string | null;\n      profileImageUrl: string | null;\n      password: string | null;\n      emailVerified: boolean | null;\n      notificationPreferences: unknown;\n      createdAt: Date | null;\n      updatedAt: Date | null;\n    }\n  }\n}","size_bytes":524},"client/src/components/MockPaymentForm.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2, CreditCard, Smartphone, Building2, Banknote, Receipt } from \"lucide-react\";\nimport { ReceiptModal } from \"./ReceiptModal\";\n\ninterface MockPaymentFormProps {\n  bookingId: number;\n  amount: number;\n  currency?: string;\n  onSuccess: () => void;\n  onCancel: () => void;\n}\n\nexport const MockPaymentForm = ({ \n  bookingId, \n  amount, \n  currency = 'INR', \n  onSuccess, \n  onCancel \n}: MockPaymentFormProps) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [selectedMethod, setSelectedMethod] = useState<'card' | 'upi' | 'netbanking' | 'cash'>('card');\n  const [paymentAmount, setPaymentAmount] = useState<string>(amount.toString());\n  const [discountAmount, setDiscountAmount] = useState<string>('0');\n  const [discountReason, setDiscountReason] = useState<string>('');\n  const [showReceiptModal, setShowReceiptModal] = useState(false);\n  const [lastPaymentId, setLastPaymentId] = useState<number | null>(null);\n  const [receiptData, setReceiptData] = useState<any>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  // Check if user is admin/manager for admin features\n  const isAdmin = user?.role === 'admin' || user?.role === 'manager';\n\n  const handlePayment = async () => {\n    const numericAmount = parseFloat(paymentAmount);\n    const numericDiscount = parseFloat(discountAmount || '0');\n    const finalAmountDue = Math.max(0, amount - numericDiscount);\n    \n    // Validate payment amount\n    if (!paymentAmount || numericAmount <= 0) {\n      toast({\n        title: \"Invalid Amount\",\n        description: \"Please enter a valid payment amount.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (numericAmount > finalAmountDue) {\n      toast({\n        title: \"Amount Too High\",\n        description: `Payment amount cannot exceed the final balance of ₹${finalAmountDue.toLocaleString()}.`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate discount for admin users\n    if (isAdmin && numericDiscount > 0) {\n      if (numericDiscount > amount) {\n        toast({\n          title: \"Invalid Discount\",\n          description: \"Discount cannot exceed the original amount.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      if (!discountReason.trim()) {\n        toast({\n          title: \"Missing Discount Reason\",\n          description: \"Please provide a reason for the discount.\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    setIsProcessing(true);\n    \n    try {\n      // Simulate payment processing delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Call mock payment success endpoint\n      const response = await fetch('/api/test-payment-success', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          bookingId,\n          amount: numericAmount,\n          paymentMethod: selectedMethod,\n          discountAmount: parseFloat(discountAmount || '0'),\n          discountReason: discountReason\n        })\n      });\n\n      if (!response.ok) {\n        throw new Error('Payment processing failed');\n      }\n\n      const result = await response.json();\n      \n      // Store payment ID and generate receipt data\n      if (result.payment && result.payment.id) {\n        setLastPaymentId(result.payment.id);\n        \n        // Create receipt data for immediate display\n        if (result.booking) {\n          const booking = result.booking;\n          const totalBookingAmount = booking.totalAmount;\n          const discountAmount = booking.discountAmount || 0;\n          const totalPaidAfterThisPayment = booking.paidAmount || 0; // Updated total paid amount from backend\n          const previouslyPaid = totalPaidAfterThisPayment - numericAmount; // Previous payments before this one\n          \n          // Due amount = Total booking - discount - previous payments (what was owed before this payment)\n          const dueAmount = Math.max(0, totalBookingAmount - discountAmount - previouslyPaid);\n          \n          // Balance amount = Total booking - discount - all payments including this one\n          const balanceAmount = Math.max(0, totalBookingAmount - discountAmount - totalPaidAfterThisPayment);\n          \n          // Calculate total paid for this booking BEFORE this payment\n          const totalPaidBeforeThisPayment = previouslyPaid;\n          \n          console.log('Receipt calculation:', {\n            totalBookingAmount,\n            discountAmount,\n            previouslyPaid,\n            totalPaidAfterThisPayment,\n            dueAmount,\n            balanceAmount\n          });\n          \n          // Parse time slot properly\n          const timeSlot = booking.timeSlot || '';\n          const [startTime, endTime] = timeSlot.includes('-') ? timeSlot.split('-') : [timeSlot, timeSlot];\n          \n          setReceiptData({\n            receiptId: `RCP-${Date.now()}-${Math.random().toString(36).substr(2, 6).toUpperCase()}`,\n            bookingId: booking.id,\n            paymentId: result.payment.id,\n            customerName: `${user?.firstName || ''} ${user?.lastName || ''}`.trim() || 'Customer',\n            customerEmail: user?.email || '',\n            customerPhone: user?.phone || '',\n            facilityName: booking.groundName || 'Sports Facility',\n            sportName: booking.sportName || 'Sport',\n            bookingDate: booking.bookingDate || booking.startDate,\n            startTime: (startTime || '00:00').trim(),\n            endTime: (endTime || '00:00').trim(),\n            participants: booking.participantCount || 1,\n            totalBookingAmount: totalBookingAmount, // Original booking total\n            totalPaidBeforeThis: totalPaidBeforeThisPayment, // Total paid before this payment\n            totalAmount: dueAmount, // Show due amount instead of total booking amount\n            paidAmount: numericAmount, // This payment amount\n            discountAmount: discountAmount,\n            paymentMethod: selectedMethod,\n            transactionId: `${selectedMethod.toUpperCase()}-${Date.now()}`,\n            paymentDate: new Date().toISOString(),\n            balanceAmount: balanceAmount,\n            paymentStatus: result.paymentStatus || 'partial' // Use booking payment status from backend\n          });\n        }\n      }\n      \n      toast({\n        title: \"Payment Successful\",\n        description: \"Your booking has been confirmed!\",\n        duration: 3000,\n      });\n      \n      // Show receipt modal after a short delay\n      setTimeout(() => {\n        setShowReceiptModal(true);\n      }, 1000);\n    } catch (error) {\n      console.error('Payment error:', error);\n      toast({\n        title: \"Payment Failed\",\n        description: \"Unable to process payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle>Make Payment</CardTitle>\n        <p className=\"text-sm text-gray-600\">\n          Remaining Balance: {currency} ₹{amount.toLocaleString()}\n        </p>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {/* Admin-only Discount Section - Moved to top */}\n          {isAdmin && (\n            <div className=\"space-y-4 border-b pb-4\">\n              <p className=\"text-sm font-medium text-gray-700\">Admin Options</p>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"discountAmount\" className=\"text-sm font-medium text-gray-700\">\n                    Discount Amount (₹)\n                  </Label>\n                  <Input\n                    id=\"discountAmount\"\n                    type=\"number\"\n                    placeholder=\"0\"\n                    value={discountAmount}\n                    onChange={(e) => {\n                      setDiscountAmount(e.target.value);\n                      // Update payment amount when discount changes\n                      const newDiscount = parseFloat(e.target.value || '0');\n                      const finalAmount = Math.max(0, amount - newDiscount);\n                      setPaymentAmount(finalAmount.toString());\n                    }}\n                    min=\"0\"\n                    max={amount}\n                    className=\"text-sm\"\n                  />\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"discountReason\" className=\"text-sm font-medium text-gray-700\">\n                    Discount Reason\n                  </Label>\n                  <Input\n                    id=\"discountReason\"\n                    type=\"text\"\n                    placeholder=\"e.g., Staff discount\"\n                    value={discountReason}\n                    onChange={(e) => setDiscountReason(e.target.value)}\n                    className=\"text-sm\"\n                  />\n                </div>\n              </div>\n\n              {/* Balance calculation with discount */}\n              {parseFloat(discountAmount) > 0 && (\n                <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                  <div className=\"space-y-1 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span>Original Amount:</span>\n                      <span>₹{amount.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between text-green-600\">\n                      <span>Discount:</span>\n                      <span>-₹{parseFloat(discountAmount || '0').toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex justify-between font-medium border-t pt-1\">\n                      <span>Final Amount:</span>\n                      <span>₹{Math.max(0, amount - parseFloat(discountAmount || '0')).toLocaleString()}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Payment Amount Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"paymentAmount\" className=\"text-sm font-medium text-gray-700\">\n              Payment Amount (₹)\n            </Label>\n            <Input\n              id=\"paymentAmount\"\n              type=\"number\"\n              placeholder=\"Enter amount to pay\"\n              value={paymentAmount}\n              onChange={(e) => setPaymentAmount(e.target.value)}\n              min=\"1\"\n              max={Math.max(0, amount - parseFloat(discountAmount || '0'))}\n              className=\"text-lg\"\n            />\n            <p className=\"text-xs text-gray-500\">\n              You can pay any amount up to ₹{Math.max(0, amount - parseFloat(discountAmount || '0')).toLocaleString()}\n            </p>\n          </div>\n\n          {/* Payment Method Selection */}\n          <div className=\"space-y-3\">\n            <p className=\"text-sm font-medium text-gray-700\">Select Payment Method</p>\n            \n            {/* Credit/Debit Card */}\n            <div \n              className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                selectedMethod === 'card' \n                  ? 'border-primary bg-primary/5' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => setSelectedMethod('card')}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <CreditCard className=\"h-5 w-5 text-blue-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Credit/Debit Card</p>\n                  <p className=\"text-xs text-gray-500\">Visa, Mastercard, RuPay</p>\n                </div>\n                <div className=\"ml-auto\">\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    selectedMethod === 'card' ? 'border-primary bg-primary' : 'border-gray-300'\n                  }`}>\n                    {selectedMethod === 'card' && (\n                      <div className=\"w-2 h-2 bg-white rounded-full mx-auto mt-0.5\"></div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* UPI */}\n            <div \n              className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                selectedMethod === 'upi' \n                  ? 'border-primary bg-primary/5' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => setSelectedMethod('upi')}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Smartphone className=\"h-5 w-5 text-orange-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">UPI</p>\n                  <p className=\"text-xs text-gray-500\">Pay using UPI ID or QR code</p>\n                </div>\n                <div className=\"ml-auto\">\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    selectedMethod === 'upi' ? 'border-primary bg-primary' : 'border-gray-300'\n                  }`}>\n                    {selectedMethod === 'upi' && (\n                      <div className=\"w-2 h-2 bg-white rounded-full mx-auto mt-0.5\"></div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Net Banking */}\n            <div \n              className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                selectedMethod === 'netbanking' \n                  ? 'border-primary bg-primary/5' \n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => setSelectedMethod('netbanking')}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <Building2 className=\"h-5 w-5 text-green-600\" />\n                <div>\n                  <p className=\"font-medium text-sm\">Net Banking</p>\n                  <p className=\"text-xs text-gray-500\">Pay using your bank account</p>\n                </div>\n                <div className=\"ml-auto\">\n                  <div className={`w-4 h-4 rounded-full border-2 ${\n                    selectedMethod === 'netbanking' ? 'border-primary bg-primary' : 'border-gray-300'\n                  }`}>\n                    {selectedMethod === 'netbanking' && (\n                      <div className=\"w-2 h-2 bg-white rounded-full mx-auto mt-0.5\"></div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Cash Payment Method - Admin Only */}\n            {isAdmin && (\n              <div \n                className={`border rounded-lg p-3 cursor-pointer transition-colors ${\n                  selectedMethod === 'cash' \n                    ? 'border-primary bg-primary/5' \n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n                onClick={() => setSelectedMethod('cash')}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Banknote className=\"h-5 w-5 text-green-600\" />\n                  <div>\n                    <p className=\"font-medium text-sm\">Cash Payment</p>\n                    <p className=\"text-xs text-gray-500\">Admin only - Direct cash collection</p>\n                  </div>\n                  <div className=\"ml-auto\">\n                    <div className={`w-4 h-4 rounded-full border-2 ${\n                      selectedMethod === 'cash' ? 'border-primary bg-primary' : 'border-gray-300'\n                    }`}>\n                      {selectedMethod === 'cash' && (\n                        <div className=\"w-2 h-2 bg-white rounded-full mx-auto mt-0.5\"></div>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n\n\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onCancel}\n              disabled={isProcessing}\n              className=\"flex-1\"\n            >\n              Cancel\n            </Button>\n            <Button \n              onClick={handlePayment}\n              disabled={isProcessing}\n              className=\"flex-1\"\n            >\n              {isProcessing ? (\n                <>\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  Processing...\n                </>\n              ) : (\n                \"Payment Confirmed\"\n              )}\n            </Button>\n          </div>\n\n          {/* Security Info */}\n          <div className=\"mt-4 pt-4 border-t\">\n            <div className=\"flex items-center justify-center space-x-4 text-xs text-gray-500\">\n              <span>🔒 Secure Payment</span>\n              <span>🛡️ 256-bit SSL</span>\n              <span>🔐 Encrypted</span>\n            </div>\n            <p className=\"text-center text-xs text-gray-400 mt-2\">\n              This is a demo payment system for testing purposes\n            </p>\n          </div>\n        </div>\n      </CardContent>\n      \n      {/* Receipt Modal */}\n      {lastPaymentId && (\n        <ReceiptModal\n          isOpen={showReceiptModal}\n          onClose={() => {\n            setShowReceiptModal(false);\n            // Call onSuccess only when user closes the receipt modal\n            onSuccess();\n          }}\n          paymentId={lastPaymentId}\n          receiptData={receiptData}\n        />\n      )}\n    </Card>\n  );\n};","size_bytes":18094},"server/notifications.ts":{"content":"import { MailService } from '@sendgrid/mail';\n\n// SMS Service (Mock implementation - replace with actual SMS provider)\nclass SMSService {\n  static async sendSMS(to: string, message: string): Promise<boolean> {\n    try {\n      console.log(`SMS to ${to}: ${message}`);\n      // In production, integrate with SMS provider like Twilio, AWS SNS, etc.\n      // For now, we'll simulate success\n      return true;\n    } catch (error) {\n      console.error('SMS sending failed:', error);\n      return false;\n    }\n  }\n}\n\n// Email Service using SendGrid\nclass EmailService {\n  private static mailService: MailService;\n\n  static initialize() {\n    if (!process.env.SENDGRID_API_KEY) {\n      console.warn('SENDGRID_API_KEY not configured - email features will be disabled');\n      return;\n    }\n    \n    this.mailService = new MailService();\n    this.mailService.setApiKey(process.env.SENDGRID_API_KEY);\n  }\n\n  static async sendReceiptEmail(\n    to: string,\n    customerName: string,\n    receiptId: string,\n    htmlContent: string,\n    pdfAttachment?: Buffer\n  ): Promise<boolean> {\n    if (!this.mailService) {\n      console.warn('Email service not initialized');\n      return false;\n    }\n\n    try {\n      const emailData: any = {\n        to,\n        from: 'noreply@aryenrecreation.com', // Replace with your verified sender\n        subject: `Payment Receipt - ${receiptId} | Aryen Recreation Centre`,\n        html: htmlContent,\n        text: `Dear ${customerName},\\n\\nThank you for your payment. Please find your receipt attached.\\n\\nReceipt ID: ${receiptId}\\n\\nBest regards,\\nAryen Recreation Centre Team`\n      };\n\n      if (pdfAttachment) {\n        emailData.attachments = [\n          {\n            content: pdfAttachment.toString('base64'),\n            filename: `receipt-${receiptId}.pdf`,\n            type: 'application/pdf',\n            disposition: 'attachment'\n          }\n        ];\n      }\n\n      await this.mailService.send(emailData);\n      console.log(`Receipt email sent to ${to}`);\n      return true;\n    } catch (error) {\n      console.error('Email sending failed:', error);\n      return false;\n    }\n  }\n}\n\n// Initialize email service\nEmailService.initialize();\n\nexport { SMSService, EmailService };","size_bytes":2208},"client/src/components/ReceiptModal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Download, Mail, MessageSquare, Printer, X } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ReceiptData {\n  receiptId: string;\n  bookingId: number;\n  paymentId: number;\n  customerName: string;\n  customerEmail: string;\n  customerPhone: string;\n  facilityName: string;\n  sportName: string;\n  bookingDate: string;\n  startTime: string;\n  endTime: string;\n  participants: number;\n  totalAmount: number;\n  paidAmount: number;\n  discountAmount?: number;\n  paymentMethod: string;\n  transactionId?: string;\n  paymentDate: string;\n  balanceAmount: number;\n  paymentStatus: string;\n}\n\ninterface ReceiptModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  paymentId: number;\n  receiptData?: ReceiptData;\n}\n\nexport function ReceiptModal({ isOpen, onClose, paymentId, receiptData }: ReceiptModalProps) {\n  const [sendSMS, setSendSMS] = useState(false);\n  const [sendEmail, setSendEmail] = useState(false);\n  const [isGenerating, setIsGenerating] = useState(false);\n  const { toast } = useToast();\n\n  const handleGenerateReceipt = async () => {\n    if (!paymentId) return;\n    \n    setIsGenerating(true);\n    try {\n      const response = await fetch(`/api/receipts/generate`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({\n          paymentId,\n          sendSMS,\n          sendEmail\n        })\n      });\n\n      const result = await response.json();\n      \n      if (result.success) {\n        toast({\n          title: \"Receipt Generated\",\n          description: `Receipt ${result.receipt.receiptId} generated successfully. ${\n            sendSMS ? (result.receipt.sent.sms ? 'SMS sent.' : 'SMS failed.') : ''\n          } ${\n            sendEmail ? (result.receipt.sent.email ? 'Email sent.' : 'Email failed.') : ''\n          }`.trim(),\n        });\n      } else {\n        throw new Error(result.message || 'Failed to generate receipt');\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate receipt. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  const handleDownloadPDF = async () => {\n    try {\n      const response = await fetch(`/api/receipts/${paymentId}/pdf`, {\n        method: 'GET',\n        credentials: 'include'\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to download PDF');\n      }\n      \n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = `receipt-${paymentId}.pdf`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n      \n      toast({\n        title: \"Success\",\n        description: \"Receipt PDF downloaded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download PDF. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handlePreview = () => {\n    window.open(`/api/receipts/${paymentId}/preview`, '_blank');\n  };\n\n  const handlePrint = () => {\n    const printWindow = window.open(`/api/receipts/${paymentId}/preview`, '_blank');\n    if (printWindow) {\n      printWindow.onload = () => {\n        printWindow.print();\n      };\n    }\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `₹${amount.toLocaleString()}`;\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      completed: { variant: \"default\", className: \"bg-green-100 text-green-800\" },\n      partial: { variant: \"secondary\", className: \"bg-yellow-100 text-yellow-800\" },\n      pending: { variant: \"outline\", className: \"bg-red-100 text-red-800\" },\n      failed: { variant: \"destructive\", className: \"bg-red-100 text-red-800\" },\n    } as const;\n\n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    \n    return (\n      <Badge className={config.className}>\n        {status.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  if (!receiptData) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Receipt Preview</DialogTitle>\n          </DialogHeader>\n          <div className=\"text-center py-8\">\n            <p>Loading receipt data...</p>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <DialogTitle>Payment Receipt</DialogTitle>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Receipt Header */}\n          <Card>\n            <CardHeader className=\"text-center bg-blue-50\">\n              <CardTitle className=\"text-2xl text-blue-900\">ARYEN RECREATION CENTRE</CardTitle>\n              <p className=\"text-blue-700\">Sports Facility Booking Receipt</p>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              <div className=\"flex justify-between items-center mb-4\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Receipt ID</p>\n                  <p className=\"font-bold text-lg\">{receiptData.receiptId}</p>\n                </div>\n                <div className=\"text-right\">\n                  <p className=\"text-sm text-gray-600\">Date</p>\n                  <p className=\"font-bold\">{new Date(receiptData.paymentDate).toLocaleDateString()}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {/* Customer Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Customer Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Name</p>\n                  <p className=\"font-semibold\">{receiptData.customerName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Email</p>\n                  <p>{receiptData.customerEmail || 'Not provided'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Phone</p>\n                  <p>{receiptData.customerPhone || 'Not provided'}</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Booking Details */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Booking Details</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Booking ID</p>\n                  <p className=\"font-semibold\">#{receiptData.bookingId}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Facility</p>\n                  <p>{receiptData.facilityName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Sport</p>\n                  <p>{receiptData.sportName}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Date & Time</p>\n                  <p>{receiptData.bookingDate ? new Date(receiptData.bookingDate).toLocaleDateString() : 'Date not available'}</p>\n                  <p className=\"text-sm\">{receiptData.startTime && receiptData.endTime ? `${receiptData.startTime} - ${receiptData.endTime}` : 'Time not available'}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Participants</p>\n                  <p>{receiptData.participants}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Payment Summary */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Payment Summary</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span>Total Booking Amount</span>\n                  <span className=\"font-semibold\">{formatCurrency(receiptData.totalBookingAmount || 600)}</span>\n                </div>\n                {receiptData.discountAmount && receiptData.discountAmount > 0 && (\n                  <div className=\"flex justify-between text-green-600\">\n                    <span>Discount Applied</span>\n                    <span className=\"font-semibold\">-{formatCurrency(receiptData.discountAmount)}</span>\n                  </div>\n                )}\n                <div className=\"flex justify-between border-t pt-2\">\n                  <span>Amount After Discount</span>\n                  <span className=\"font-semibold\">{formatCurrency((receiptData.totalBookingAmount || 600) - (receiptData.discountAmount || 0))}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Total Paid (Before This Payment)</span>\n                  <span className=\"font-semibold text-blue-600\">{formatCurrency(receiptData.totalPaidBeforeThis || ((receiptData.totalBookingAmount || 600) - (receiptData.discountAmount || 0) - receiptData.totalAmount))}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between bg-blue-50 p-2 rounded\">\n                  <span className=\"font-medium\">Due Amount (before this payment)</span>\n                  <span className=\"font-semibold\">{formatCurrency(receiptData.totalAmount)}</span>\n                </div>\n                <div className=\"flex justify-between bg-green-50 p-2 rounded\">\n                  <span className=\"font-medium\">Amount Paid This Transaction</span>\n                  <span className=\"font-semibold text-green-600\">{formatCurrency(receiptData.paidAmount)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between text-lg font-bold bg-gray-50 p-2 rounded\">\n                  <span>Remaining Balance</span>\n                  <span className={receiptData.balanceAmount > 0 ? \"text-red-600\" : \"text-green-600\"}>\n                    {formatCurrency(receiptData.balanceAmount)}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Payment Details</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span>Payment Method</span>\n                <span className=\"font-semibold\">{receiptData.paymentMethod}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Transaction ID</span>\n                <span className=\"font-mono text-sm\">{receiptData.transactionId || 'N/A'}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Payment Status</span>\n                <span>{getStatusBadge(receiptData.paymentStatus)}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Payment Date</span>\n                <span>{new Date(receiptData.paymentDate).toLocaleString()}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Receipt Actions</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {/* Notification Options */}\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium\">Send Receipt Via:</h4>\n                <div className=\"flex gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"sms\" \n                      checked={sendSMS} \n                      onCheckedChange={(checked) => setSendSMS(!!checked)}\n                      disabled={!receiptData.customerPhone}\n                    />\n                    <label htmlFor=\"sms\" className=\"text-sm\">\n                      SMS {!receiptData.customerPhone && '(No phone number)'}\n                    </label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox \n                      id=\"email\" \n                      checked={sendEmail} \n                      onCheckedChange={(checked) => setSendEmail(!!checked)}\n                      disabled={!receiptData.customerEmail}\n                    />\n                    <label htmlFor=\"email\" className=\"text-sm\">\n                      Email {!receiptData.customerEmail && '(No email address)'}\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-wrap gap-3\">\n                <Button onClick={handleGenerateReceipt} disabled={isGenerating}>\n                  <MessageSquare className=\"h-4 w-4 mr-2\" />\n                  {isGenerating ? 'Generating...' : 'Generate & Send'}\n                </Button>\n                <Button variant=\"outline\" onClick={handlePreview}>\n                  <span className=\"h-4 w-4 mr-2\">👁</span>\n                  Preview\n                </Button>\n                <Button variant=\"outline\" onClick={handleDownloadPDF}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Download PDF\n                </Button>\n                <Button variant=\"outline\" onClick={handlePrint}>\n                  <Printer className=\"h-4 w-4 mr-2\" />\n                  Print\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Footer */}\n          <div className=\"text-center text-sm text-gray-600 border-t pt-4\">\n            <p>Thank you for choosing Aryen Recreation Centre!</p>\n            <p>For any queries, contact us at support@aryenrecreation.com</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":15143},"client/src/components/PaymentHistoryModal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { History, Receipt, Download, Eye } from \"lucide-react\";\n\ninterface PaymentHistoryModalProps {\n  bookingId: number;\n}\n\ninterface PaymentRecord {\n  id: number;\n  amount: number;\n  paymentMethod: string;\n  status: string;\n  processedAt: string;\n  transactionId?: string;\n}\n\ninterface PaymentHistoryData {\n  bookingId: number;\n  bookingDetails: {\n    facilityName: string;\n    sportName: string;\n    totalAmount: number;\n    discountAmount: number;\n    paidAmount: number;\n    netAmount: number;\n    balanceDue: number;\n    paymentStatus: string;\n  };\n  payments: PaymentRecord[];\n}\n\nfunction formatCurrency(amount: number): string {\n  return `₹${amount.toLocaleString()}`;\n}\n\nfunction getStatusBadge(status: string) {\n  const statusColors = {\n    completed: \"bg-green-100 text-green-800\",\n    pending: \"bg-yellow-100 text-yellow-800\",\n    failed: \"bg-red-100 text-red-800\",\n    partial: \"bg-blue-100 text-blue-800\"\n  };\n\n  return (\n    <Badge className={statusColors[status as keyof typeof statusColors] || \"bg-gray-100 text-gray-800\"}>\n      {status.charAt(0).toUpperCase() + status.slice(1)}\n    </Badge>\n  );\n}\n\nexport function PaymentHistoryModal({ bookingId }: PaymentHistoryModalProps) {\n  const [open, setOpen] = useState(false);\n\n  const { data: paymentHistory, isLoading } = useQuery<PaymentHistoryData>({\n    queryKey: [`/api/bookings/${bookingId}/payment-history`],\n    queryFn: async () => {\n      const response = await fetch(`/api/bookings/${bookingId}/payment-history`, {\n        credentials: 'include',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch payment history');\n      }\n      return response.json();\n    },\n    enabled: open && !!bookingId,\n  });\n\n  const handlePreviewReceipt = (paymentId: number) => {\n    window.open(`/api/receipts/${paymentId}/preview`, '_blank');\n  };\n\n  const handleDownloadReceipt = (paymentId: number) => {\n    window.open(`/api/receipts/${paymentId}/pdf`, '_blank');\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\">\n          <History className=\"h-4 w-4 mr-2\" />\n          Payment History\n        </Button>\n      </DialogTrigger>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Payment History - Booking #{bookingId}</DialogTitle>\n          <DialogDescription>\n            View all payments made for this booking and download receipts\n          </DialogDescription>\n        </DialogHeader>\n\n        {isLoading && (\n          <div className=\"text-center py-8\">\n            <div className=\"text-muted-foreground\">Loading payment history...</div>\n          </div>\n        )}\n\n        {paymentHistory && (\n          <div className=\"space-y-6\">\n            {/* Booking Summary */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Booking Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <div className=\"font-medium\">{paymentHistory.bookingDetails.facilityName}</div>\n                    <div className=\"text-sm text-muted-foreground\">{paymentHistory.bookingDetails.sportName}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-medium\">\n                      {formatCurrency(paymentHistory.bookingDetails.totalAmount)} \n                      {paymentHistory.bookingDetails.discountAmount > 0 && (\n                        <span className=\"text-green-600 ml-2\">\n                          (-{formatCurrency(paymentHistory.bookingDetails.discountAmount)})\n                        </span>\n                      )}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      Net: {formatCurrency(paymentHistory.bookingDetails.netAmount || paymentHistory.bookingDetails.totalAmount)}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"mt-4 pt-4 border-t flex justify-between items-center\">\n                  <span>Payment Status:</span>\n                  {getStatusBadge(paymentHistory.bookingDetails.paymentStatus)}\n                </div>\n                <div className=\"flex justify-between items-center mt-2\">\n                  <span>Total Paid:</span>\n                  <span className=\"font-semibold text-green-600\">\n                    {formatCurrency(paymentHistory.bookingDetails.paidAmount)}\n                  </span>\n                </div>\n                <div className=\"flex justify-between items-center\">\n                  <span>Balance Due:</span>\n                  <span className=\"font-semibold text-red-600\">\n                    {formatCurrency(paymentHistory.bookingDetails.balanceDue || Math.max(0, (paymentHistory.bookingDetails.netAmount || paymentHistory.bookingDetails.totalAmount) - paymentHistory.bookingDetails.paidAmount))}\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Payment Records */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Payment Records ({paymentHistory.payments.length})</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {paymentHistory.payments.length === 0 ? (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    No payments found for this booking\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {paymentHistory.payments.map((payment) => (\n                      <div\n                        key={payment.id}\n                        className=\"border rounded-lg p-4 hover:bg-gray-50 transition-colors\"\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"space-y-2\">\n                            <div className=\"flex items-center gap-3\">\n                              <span className=\"font-semibold\">{formatCurrency(payment.amount)}</span>\n                              {getStatusBadge(payment.status)}\n                            </div>\n                            <div className=\"text-sm text-muted-foreground space-y-1\">\n                              <div>Payment Method: {payment.paymentMethod}</div>\n                              <div>Date: {new Date(payment.processedAt).toLocaleDateString()} at {new Date(payment.processedAt).toLocaleTimeString()}</div>\n                              {payment.transactionId && (\n                                <div>Transaction ID: {payment.transactionId}</div>\n                              )}\n                            </div>\n                          </div>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handlePreviewReceipt(payment.id)}\n                            >\n                              <Eye className=\"h-4 w-4 mr-1\" />\n                              Preview\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => handleDownloadReceipt(payment.id)}\n                            >\n                              <Download className=\"h-4 w-4 mr-1\" />\n                              Download\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8366},"PAYMENT_HISTORY_GUIDE.md":{"content":"# Payment History System Guide\n\n## Overview\n\nThe Payment History System provides complete transparency and tracking for all booking payments, allowing users to view comprehensive payment records and access receipts for any transaction.\n\n## Key Features\n\n### Payment History Modal\n- **Comprehensive Payment View**: Shows all payments made for a specific booking\n- **Booking Summary**: Displays total booking amount, discounts, paid amounts, and remaining balance\n- **Individual Payment Records**: Each payment listed with amount, date, method, and status\n- **Receipt Access**: Preview and download options for every payment receipt\n- **Real-time Balance Calculations**: Accurate financial summaries updated in real-time\n\n### Payment Record Details\nEach payment record includes:\n- Payment amount and method\n- Transaction date and time\n- Payment status (completed, pending, failed, etc.)\n- Transaction ID (when available)\n- Receipt preview and download buttons\n\n## Implementation\n\n### Backend API\n\n#### Payment History Endpoint\n```typescript\nGET /api/bookings/:bookingId/payment-history\n```\n\n**Response Structure:**\n```typescript\n{\n  bookingId: number,\n  bookingDetails: {\n    facilityName: string,\n    sportName: string,\n    totalAmount: number,\n    discountAmount: number,\n    paidAmount: number,\n    paymentStatus: string\n  },\n  payments: PaymentRecord[]\n}\n```\n\n#### Security & Authorization\n- Users can only access payment history for their own bookings\n- Admin users can access payment history for all bookings\n- Proper authentication verification before data access\n\n### Frontend Component\n\n#### PaymentHistoryModal Component\n**Location:** `client/src/components/PaymentHistoryModal.tsx`\n\n**Key Features:**\n- Modal dialog interface with comprehensive payment display\n- Responsive design with proper mobile support\n- Real-time data fetching with loading states\n- Error handling for failed requests\n- Integration with existing UI component library\n\n**Props:**\n```typescript\ninterface PaymentHistoryModalProps {\n  bookingId: number;\n}\n```\n\n### Integration Points\n\n#### Payment Page Integration\n- Payment History button appears in payment page header\n- Easily accessible from all payment workflows\n- Consistent with existing UI patterns\n\n#### Receipt System Integration\n- Each payment record links to receipt generation system\n- Preview receipts open in new browser tab\n- PDF downloads trigger automatic file download\n- Seamless integration with existing receipt functionality\n\n## User Experience Flow\n\n### Accessing Payment History\n1. User navigates to payment page for a booking\n2. Clicks \"Payment History\" button in page header\n3. Modal opens showing comprehensive payment history\n4. User can view all payments and access receipts\n\n### Viewing Payment Records\n1. Payment history modal displays booking summary at top\n2. Individual payment records listed chronologically\n3. Each record shows payment details and receipt options\n4. Status badges provide visual payment status indicators\n\n### Receipt Access\n1. Click \"Preview\" to view receipt in new browser tab\n2. Click \"Download\" to download PDF receipt\n3. Each receipt contains booking-specific payment data\n4. Receipts include comprehensive financial breakdown\n\n## Technical Details\n\n### Data Flow\n1. **Request Initiated**: User clicks Payment History button\n2. **API Call**: Frontend requests payment history data\n3. **Data Retrieval**: Backend fetches booking and payment records\n4. **Security Check**: Verify user authorization for booking access\n5. **Response**: Return comprehensive payment history data\n6. **Display**: Frontend renders payment history modal\n7. **Receipt Access**: Individual receipt generation on demand\n\n### Performance Considerations\n- Payment history loaded on-demand when modal opens\n- Efficient database queries to minimize response time\n- Receipt generation handled by existing optimized system\n- Proper error handling for network issues\n\n### Error Handling\n- Network connectivity issues handled gracefully\n- Invalid booking ID scenarios managed properly\n- Authorization failures return appropriate error messages\n- Loading states provide user feedback during data retrieval\n\n## Configuration\n\n### Database Requirements\n- Existing payments table with booking relationships\n- Proper indexing on booking_id for efficient queries\n- Payment status and timestamp fields required\n\n### Environment Setup\nNo additional environment variables required - uses existing authentication and database configuration.\n\n## Benefits\n\n### For Users\n- **Complete Transparency**: Full view of all payments made\n- **Easy Receipt Access**: Download receipts for any payment\n- **Financial Clarity**: Clear understanding of payment history and balances\n- **Convenient Access**: Easily accessible from payment workflows\n\n### For Administrators\n- **Payment Oversight**: Complete visibility into user payment patterns\n- **Support Tool**: Helpful for customer service and payment inquiries\n- **Audit Trail**: Comprehensive record of all payment activities\n- **Integration**: Seamlessly works with existing admin tools\n\n### For Business\n- **Enhanced Trust**: Transparent payment processes build customer confidence\n- **Reduced Support**: Users can self-service payment history inquiries\n- **Better Records**: Comprehensive payment tracking for business analytics\n- **Professional Image**: Modern, comprehensive payment management system\n\n## Future Enhancements\n\n### Potential Additions\n- **Payment Analytics**: Charts and graphs showing payment patterns\n- **Bulk Receipt Download**: Download multiple receipts at once\n- **Payment Reminders**: Integration with notification system\n- **Export Options**: CSV or Excel export of payment history\n- **Payment Search**: Filter and search payment records\n- **Payment Categories**: Group payments by type or purpose\n\n### Integration Opportunities\n- **Mobile App**: Extend payment history to mobile applications\n- **Email Integration**: Automated payment history emails\n- **Dashboard Widgets**: Payment history summaries on user dashboards\n- **Reporting System**: Integration with business reporting tools","size_bytes":6096},"RECEIPT_SYSTEM_GUIDE.md":{"content":"# Receipt Generation System Guide\n\n## Overview\n\nThe Aryen Recreation Centre booking system includes a comprehensive receipt generation and payment history system that provides detailed financial transparency for all booking transactions.\n\n## Features\n\n### Receipt Generation\n- **Booking-Specific Receipts**: Each payment generates a unique receipt with complete booking context\n- **Detailed Payment Breakdown**: Shows total booking amount, discounts applied, previous payments, current payment, and remaining balance\n- **Multiple Formats**: HTML preview and PDF download options for all receipts\n- **Professional Layout**: Branded receipt template with clear formatting and financial summaries\n\n### Payment History\n- **Complete Payment Tracking**: All payments for a booking are tracked with timestamps and transaction details\n- **Payment History Modal**: Accessible from payment pages showing comprehensive payment records\n- **Individual Receipt Access**: Preview and download receipts for any previous payment\n- **Financial Summary**: Real-time calculation of total paid, discounts applied, and remaining balances\n\n## Architecture\n\n### Backend Components\n\n#### Receipt Data Generation (`server/routes.ts`)\n```typescript\nasync function generateReceiptData(paymentId: number): Promise<ReceiptData> {\n  // Fetches payment, booking, and user data\n  // Calculates payment history and totals\n  // Returns comprehensive receipt data object\n}\n```\n\n#### Receipt Generator (`server/receipt.ts`)\n```typescript\nclass ReceiptGenerator {\n  static generateReceiptHTML(receiptData: ReceiptData): string\n  static generateReceiptPDF(receiptData: ReceiptData): Buffer\n}\n```\n\n### API Endpoints\n\n#### Receipt Generation\n- `POST /api/receipts/generate` - Generate receipt with SMS/email options\n- `GET /api/receipts/:paymentId/preview` - HTML preview of receipt\n- `GET /api/receipts/:paymentId/pdf` - PDF download of receipt\n\n#### Payment History\n- `GET /api/bookings/:bookingId/payment-history` - Get all payments for a booking\n\n### Frontend Components\n\n#### ReceiptModal (`client/src/components/ReceiptModal.tsx`)\n- Displays receipt data with detailed payment breakdown\n- Shows booking information and payment details\n- Provides PDF download and print options\n\n#### PaymentHistoryModal (`client/src/components/PaymentHistoryModal.tsx`)\n- Lists all payments for a specific booking\n- Shows booking summary with financial totals\n- Provides receipt preview and download for each payment\n- Displays payment status and transaction details\n\n## Receipt Data Structure\n\n### Financial Breakdown Fields\n```typescript\ninterface ReceiptData {\n  receiptId: string;\n  bookingId: number;\n  paymentId: number;\n  totalBookingAmount: number;      // Original booking total + discount\n  discountAmount: number;          // Discount applied\n  totalPaidBeforeThis: number;     // Sum of previous payments\n  totalAmount: number;             // Due amount before this payment\n  paidAmount: number;              // Current payment amount\n  balanceAmount: number;           // Remaining balance after payment\n  // ... other booking and customer details\n}\n```\n\n### Payment Breakdown Display\n1. **Total Booking Amount**: Original booking cost including any discounts\n2. **Discount Applied**: Amount discounted (shown as negative)\n3. **Amount After Discount**: Net booking amount after discount\n4. **Total Paid (Before This Payment)**: Sum of all previous payments\n5. **Due Amount (Before This Payment)**: Outstanding amount before current payment\n6. **Amount Paid This Transaction**: Current payment being processed\n7. **Remaining Balance**: Outstanding amount after current payment\n\n## Implementation Details\n\n### Receipt Generation Process\n1. **Payment Processing**: When a payment is completed\n2. **Data Collection**: Gather booking, user, and payment history data\n3. **Financial Calculations**: Calculate payment totals and remaining balances\n4. **Receipt Generation**: Create HTML and PDF versions\n5. **Delivery Options**: Email, SMS, or direct download\n\n### Payment History Process\n1. **Request Payment History**: User clicks \"Payment History\" button\n2. **Data Fetching**: Retrieve all payments for the booking\n3. **Display**: Show comprehensive payment records with receipt access\n4. **Receipt Access**: Users can preview or download any payment receipt\n\n## User Experience\n\n### From Payment Page\n- Users see \"Payment History\" button in payment page header\n- Click opens modal with complete payment history\n- Each payment record shows amount, date, status, and receipt options\n\n### From Receipt Modal\n- After payment completion, users see detailed receipt\n- Receipt includes comprehensive financial breakdown\n- Options to download PDF, print, or view payment history\n\n### Receipt Content\n- **Header**: Aryen Recreation Centre branding\n- **Receipt Details**: Unique receipt ID and date\n- **Customer Information**: Name, email, phone\n- **Booking Details**: Facility, sport, date, time, participants\n- **Payment Summary**: Detailed financial breakdown table\n- **Payment Details**: Method, transaction ID, status\n- **Footer**: Thank you message and contact information\n\n## Security & Access Control\n\n### Authorization\n- Users can only access receipts for their own bookings\n- Admins can access receipts for all bookings\n- Payment history requires authentication\n\n### Data Privacy\n- No sensitive payment information stored in receipts\n- Transaction IDs are masked for security\n- Only authorized users can access payment records\n\n## Configuration\n\n### Environment Variables\n```env\nSENDGRID_API_KEY=your_api_key_here  # For email receipt delivery\n```\n\n### Receipt Customization\n- Receipt template can be customized in `server/receipt.ts`\n- Branding, colors, and layout are configurable\n- Additional fields can be added to receipt data structure\n\n## Best Practices\n\n### Receipt Generation\n1. Always generate receipts immediately after payment confirmation\n2. Include comprehensive financial breakdown for transparency\n3. Ensure receipt data is booking-specific and accurate\n4. Provide multiple download/access options\n\n### Payment History\n1. Display payments in chronological order\n2. Include payment status and method information\n3. Provide easy access to individual receipts\n4. Show running totals and balance calculations\n\n### User Experience\n1. Make payment history easily accessible from payment pages\n2. Provide clear financial summaries and breakdowns\n3. Offer multiple receipt formats (HTML preview, PDF download)\n4. Ensure consistent styling and branding across all receipt formats","size_bytes":6543}}}